[{"path":"https://cmmr.github.io/rbiom/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel P. Smith. Author, maintainer, copyright holder.","code":""},{"path":"https://cmmr.github.io/rbiom/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Smith D (2023). rbiom: Read/Write, Transform, Summarize 'BIOM' Data. R package version 1.0.3.9084, https://cmmr.github.io/rbiom/index.html.","code":"@Manual{,   title = {rbiom: Read/Write, Transform, and Summarize 'BIOM' Data},   author = {Daniel P. Smith},   year = {2023},   note = {R package version 1.0.3.9084},   url = {https://cmmr.github.io/rbiom/index.html}, }"},{"path":"https://cmmr.github.io/rbiom/index.html","id":"rbiom","dir":"","previous_headings":"","what":"Read/Write, Transform, and Summarize BIOM Data","title":"Read/Write, Transform, and Summarize BIOM Data","text":"package toolkit working Biological Observation Matrix (BIOM) files. Features include reading/writing BIOM formats, rarefaction, alpha diversity, beta diversity (including UniFrac), summarizing counts taxonomic level, sample subsetting. Standalone functions reading, writing, subsetting phylogenetic trees also provided. CPU intensive operations encoded C multi-thread support. Reference material available online https://cmmr.github.io/rbiom/index.html Source code can found https://github.com/cmmr/rbiom","code":""},{"path":"https://cmmr.github.io/rbiom/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Read/Write, Transform, and Summarize BIOM Data","text":"latest stable version can downloaded CRAN. development version available GitHub.","code":"install.packages(\"rbiom\") install.packages(\"remotes\") remotes::install_github(\"cmmr/rbiom\")"},{"path":"https://cmmr.github.io/rbiom/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Read/Write, Transform, and Summarize BIOM Data","text":"Several functions default use available CPU cores. limit number cores used, can set numThreads option: enable caching speed repeat operations, call init.cache(). instance:","code":"library(rbiom)  infile <- system.file(\"extdata\", \"hmp50.bz2\", package = \"rbiom\") biom <- read.biom(infile)  # Rarefy to 1000 reads per sample biom <- rarefy(biom, depth=1000)  # Summarize counts by phylum phyla <- taxa.rollup(biom, 'Phylum') phyla[1:4,1:6]  # Work with metadata table(biom$metadata$Sex, biom$metadata$Body.Site) sprintf(\"Mean age: %.1f\", mean(biom$metadata$Age))  # Draw the phylogenetic tree plot(biom$phylogeny)  # Get unifrac distance matrix dm <- beta.div(biom, 'unifrac') RcppParallel::setThreadOptions(numThreads = 4) library(rbiom) init.cache()"},{"path":"https://cmmr.github.io/rbiom/index.html","id":"building-from-source","dir":"","previous_headings":"","what":"Building from source","title":"Read/Write, Transform, and Summarize BIOM Data","text":"rbiom requires following system libraries can installed operating system’s package manager. deb (Debian, Ubuntu): libudunits2-dev libssl-dev libxml2-dev libcurl4-openssl-dev libgdal-dev rpm (Fedora, CentOS, RHEL): udunits2-devel openssl-devel libxml2-devel libcurl-devel gdal-devel csw (Solaris): libssl_dev openssl@1.1 libxml2_dev gdal_dev brew (OSX): udunits","code":""},{"path":"https://cmmr.github.io/rbiom/reference/adiv_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize alpha diversity with boxplots. — adiv_boxplot","title":"Visualize alpha diversity with boxplots. — adiv_boxplot","text":"Visualize alpha diversity boxplots.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/adiv_boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize alpha diversity with boxplots. — adiv_boxplot","text":"","code":"adiv_boxplot(   biom,   x = NULL,   metric = \"Shannon\",   layers = \"lsb\",   color.by = NULL,   pattern.by = NULL,   shape.by = NULL,   facet.by = NULL,   limit.by = NULL,   p.adj = \"fdr\",   p.label = 0.05,   ci = 95,   xlab.angle = \"auto\",   safe = FALSE,   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/adiv_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize alpha diversity with boxplots. — adiv_boxplot","text":"biom BIOM object, returned read_biom. x categorical metadata column name use x-axis.  default, NULL, groups samples single category. metric Alpha diversity metric(s) use. Options : \"OTUs\",  \"Shannon\", \"Chao1\", \"Simpson\", / \"InvSimpson\". Default: \"Shannon\". layers \"box\" (\"x\"), \"bar\", \"violin\",  \"dot\", \"strip\", \"crossbar\", \"errorbar\",  \"linerange\", \"pointrange\". Single letter  abbreviations also accepted. instance, c(\"box\", \"dot\")  equivalent c(\"x\", \"d\") \"xd\". See vignette(\"boxplots\") examples . Default: \"lsb\". color., pattern., shape., facet., limit.Metadata columns  use aesthetics partitioning. See details. Default: NULL p.adj Method use multiple comparisons adjustment p-values. Run p.adjust.methods list available options. (Default: fdr) p.label Minimum adjusted p-value display plot  bracket. p.label = 0.05 -  Use specific value. p.label = TRUE -  equivalent p.label = 0.05 p.label = FALSE -  show stats plot p.label = Inf -  display p-values p.label = NULL -  calculate stats numeric vector one value  provided, used breaks asterisk notation. Default: TRUE ci calculate min/max crossbar,  errorbar, linerange, pointrange layers. Provide number 75 100 define confidence interval's confidence level, commonly 95 97.5. options :  range,  sd (standard deviation),  se (standard error),  mad (median absolute deviation).  center mark crossbar pointrange represents mean, except mad case represents median. Trendlines require confidence interval value.  Set NULL disable. Default: 95 xlab.angle rotate tick labels x-axis.  'auto' (default), automatically selects rotation value.  0, 30, 90 sets angle horizontal,  angled, vertical, respectively. safe FALSE, data.frame column names  \".metric\" auto-converted \"Metric\" improve human-readability. Conversion aborted conflict found metadata column name. (Default: FALSE) ... Parameters matched formal arguments ggplot2 functions. Prefixing parameter names layer name ensures particular parameter passed , , layer. instance, dot.size = 2 d.size = 2 ensures  dotplot layer size set 2.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/adiv_boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize alpha diversity with boxplots. — adiv_boxplot","text":"ggplot2 plot. computed data points statistics          attached attr(p, 'data') attr(p, 'stats'),          respectively.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/adiv_boxplot.html","id":"aesthetics-and-partitions","dir":"Reference","previous_headings":"","what":"Aesthetics and Partitions","title":"Visualize alpha diversity with boxplots. — adiv_boxplot","text":"Metadata can used flexibly subset, partition, apply aesthetics  creating plot. Common use cases provided . thorough  documentation available https://cmmr.github.io/rbiom. color.- categorical metadata column. (Max 1) pattern.- categorical metadata column. (Max 1) shape.- categorical metadata column. (Max 1) facet.- Categorical metadata column(s) . limit.- metadata column(s). built-color palettes colorblind-friendly. available  categorical palette names : \"okabe\", \"carto\", \"r4\",  \"polychrome\", \"tol\", \"bright\", \"light\",  \"muted\", \"vibrant\", \"tableau\", \"classic\",  \"alphabet\", \"tableau20\", \"kelly\", \"fishy\". Patterns sourced magick R package. Pattern names :  \"bricks\", \"hexagons\", \"horizontalsaw\",  \"hs_fdiagonal\", \"fishscales\", \"verticalsaw\",  \"checkerboard\", \"octagons\", \"right45\",  \"hs_cross\", \"hs_bdiagonal\", \"hs_diagcross\",  \"hs_horizontal\", \"hs_vertical\", \"left45\",  \"leftshingle\", \"rightshingle\", \"verticalbricks\",  \"verticalleftshingle\", \"verticalrightshingle\". Shapes can given per base R - numbers 0 17 various shapes, decimal value ascii character, e.g. -z = 65:90; -Z = 97:122 use  letters instead shapes plot. Character strings may used well.","code":"## Colors ----------------------------   color.by = \"Body Site\"   color.by = list('Body Site' = \"bright\")   color.by = list('Body Site' = c(\"Stool\", \"Saliva\"))   color.by = list('Body Site' = list('values' = c(\"Stool\", \"Saliva\"), 'palette' = \"bright\"))   color.by = list('Body Site' = c('Stool' = \"blue\", 'Saliva' = \"green\"))      ## Patterns --------------------------   pattern.by = \"Body Site\"   pattern.by = list('Body Site' = c(\"Stool\", \"Saliva\"))   pattern.by = list('Body Site' = c('Stool' = \"left45\", 'Saliva' = \"hs_cross\"))      ## Shapes ----------------------------   shape.by = \"Body Site\"   shape.by = list('Body Site' = c(\"Stool\", \"Saliva\"))   shape.by = list('Body Site' = c('Stool' = 7, 'Saliva' = 8))      ## Facets ----------------------------   facet.by = \"Body Site\"   facet.by = c(\"Body Site\", \"Sex\")   facet.by = list('Body Site' = c(\"Stool\", \"Saliva\"), \"Sex\")      ## Limits ----------------------------   limit.by = list('Sex' = \"Male\", 'Age' = c(20,40))   limit.by = list('Body Site' = c(\"Saliva\", \"Anterior nares\"), 'Age' = c(NA,35))"},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/adiv_boxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize alpha diversity with boxplots. — adiv_boxplot","text":"","code":"library(rbiom)          biom <- rarefy(hmp50)          adiv_boxplot(biom, x = \"Body Site\", metric = \"Shannon\")      adiv_boxplot(biom, x = \"Sex\", metric = c(\"OTUs\", \"Shannon\"), layers=\"b\", color.by=\"Body Site\", scales=\"free\")      adiv_boxplot(biom, x = \"Body Site\", metric = \"Simpson\", layers=\"p\", color.by=\"Sex\", xlab.angle=30)"},{"path":"https://cmmr.github.io/rbiom/reference/adiv_corrplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize alpha diversity with scatterplots and trendlines. — adiv_corrplot","title":"Visualize alpha diversity with scatterplots and trendlines. — adiv_corrplot","text":"Visualize alpha diversity scatterplots trendlines.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/adiv_corrplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize alpha diversity with scatterplots and trendlines. — adiv_corrplot","text":"","code":"adiv_corrplot(   biom,   x,   metric = \"OTUs\",   points = FALSE,   model = \"linear\",   ci = 95,   color.by = NULL,   facet.by = NULL,   limit.by = NULL,   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/adiv_corrplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize alpha diversity with scatterplots and trendlines. — adiv_corrplot","text":"biom BIOM object, returned read_biom. x numeric metadata column name use x-axis. Required. metric Alpha diversity metric(s) use. Options :  \"OTUs\", \"Shannon\", \"Chao1\", \"Simpson\",  /\"InvSimpson\". Default: \"OTUs\". points Overlay scatter plot. Default: FALSE. model type trendline fit data. Options :  \"linear\", \"logarithmic\", \"local\". can alternatively provide method /formula arguments override preset options  stat_smooth. Default: \"linear\". ci confidence interval display around fitted curve. Set FALSE hide confidence interval. Default: 95. color., facet., limit.Metadata columns use aesthetics  partitioning. See details. Default: NULL ... Additional parameters pass along ggplot2 functions. Prefix parameter name either p. s. ensure gets passed ()  geom_point  geom_smooth, respectively. instance,  p.size = 2 ensures points size set  2.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/adiv_corrplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize alpha diversity with scatterplots and trendlines. — adiv_corrplot","text":"ggplot2 plot. computed data points statistics          attached attr(p, 'data') attr(p, 'stats'),          respectively.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/adiv_corrplot.html","id":"aesthetics-and-partitions","dir":"Reference","previous_headings":"","what":"Aesthetics and Partitions","title":"Visualize alpha diversity with scatterplots and trendlines. — adiv_corrplot","text":"Metadata can used flexibly subset, partition, apply aesthetics  creating plot. Common use cases provided . thorough  documentation available https://cmmr.github.io/rbiom. color.- metadata column. (Max 1) facet.- categorical metadata column(s). limit.- metadata column(s). built-color palettes colorblind-friendly. available categorical palette names : \"okabe\", \"carto\",  \"r4\", \"polychrome\", \"tol\", \"bright\",  \"light\", \"muted\", \"vibrant\", \"tableau\",  \"classic\", \"alphabet\", \"tableau20\", \"kelly\",  \"fishy\". available numeric palette names : \"reds\", \"oranges\",  \"greens\", \"purples\", \"grays\", \"acton\",  \"bamako\", \"batlow\", \"bilbao\", \"buda\",  \"davos\", \"devon\", \"grayC\", \"hawaii\",  \"imola\", \"lajolla\", \"lapaz\", \"nuuk\",  \"oslo\", \"tokyo\", \"turku\", \"bam\",  \"berlin\", \"broc\", \"cork\", \"lisbon\",  \"roma\", \"tofino\", \"vanimo\", \"vik\"","code":"## Colors ----------------------------   color.by = \"Body Site\"   color.by = list('Body Site' = \"bright\")   color.by = list('Body Site' = c(\"Stool\", \"Saliva\"))   color.by = list('Body Site' = list('values' = c(\"Stool\", \"Saliva\"), 'palette' = \"bright\"))   color.by = list('Body Site' = c('Stool' = \"blue\", 'Saliva' = \"green\"))      ## Facets ----------------------------   facet.by = \"Body Site\"   facet.by = c(\"Body Site\", \"Sex\")   facet.by = list('Body Site' = c(\"Stool\", \"Saliva\"), \"Sex\")      ## Limits ----------------------------   limit.by = list('Sex' = \"Male\", 'Age' = c(20,40))   limit.by = list('Body Site' = c(\"Saliva\", \"Anterior nares\"), 'Age' = c(NA,35))"},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/adiv_corrplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize alpha diversity with scatterplots and trendlines. — adiv_corrplot","text":"","code":"library(rbiom)          adiv_corrplot(rarefy(hmp50), \"Age\", color.by=\"Body Site\", metric=c(\"shannon\", \"otus\"), facet.by = \"Sex\", ci = 90)"},{"path":"https://cmmr.github.io/rbiom/reference/adiv_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the diversity of each sample. — adiv_table","title":"Estimate the diversity of each sample. — adiv_table","text":"Estimate diversity sample.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/adiv_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the diversity of each sample. — adiv_table","text":"","code":"adiv_table(   biom,   rarefy = FALSE,   metrics = \"all\",   long = FALSE,   md = FALSE,   safe = FALSE )"},{"path":"https://cmmr.github.io/rbiom/reference/adiv_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the diversity of each sample. — adiv_table","text":"biom matrix, simple_triplet_matrix, BIOM object, returned read_biom. matrices, rows columns assumed taxa samples, respectively. rarefy Control /whether rarefactions done prior alpha  diversity computations. Options : FALSE Use sample's current set observations without applying     rarefaction. (Default) TRUE Automatically select apply single rarefaction. \"multi\", \"multi_log\", \"multi_even\" Automatically select apply multiple rarefactions.     \"multi\" provides \"multi_log\" low end      \"multi_even\" high end. integer vector Rarefy specified depth(s). metrics Character vector one following:  Depth, OTUs, Shannon, Chao1,  Simpson, InvSimpson. Non-ambiguous abbreviations  also accepted. default, , returns . long Pivot returned data long format? FALSE metric column. (Default) TRUE \"Sample\", \"Metric\" \"Diversity\" columns returned. Rows     added attain combinations samples x metrics. md Include metadata output data frame? Options : FALSE include metadata. (Default) TRUE Include metadata. character vector Include specified metadata columns. safe autogenerated columns prefixed \".\" avoid  conflicting metadata column names? (Default: FALSE)","code":""},{"path":"https://cmmr.github.io/rbiom/reference/adiv_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the diversity of each sample. — adiv_table","text":"data frame four diversity values sample  biom. column names Sample, Depth          diversity metrics: OTUs, Shannon, Chao1,  Simpson, InvSimpson. row names sample          names, except multiple rarefactions done.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/adiv_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the diversity of each sample. — adiv_table","text":"","code":"library(rbiom)          ad <- adiv_table(hmp50)     head(ad) #>       Sample Depth OTUs  Shannon     Chao1   Simpson InvSimpson #> HMP01  HMP01  1660   49 1.741153  59.08333 0.5668414   2.308623 #> HMP02  HMP02  1371   75 2.587403 104.38889 0.8133914   5.358811 #> HMP03  HMP03  1353   75 2.950982  90.04167 0.8936622   9.403996 #> HMP04  HMP04  1895   83 3.255785  93.32143 0.9323645  14.785121 #> HMP05  HMP05  3939   67 1.462651 127.75000 0.5252255   2.106263 #> HMP06  HMP06  4150  105 3.087615 131.88889 0.9103916  11.159668          biom <- subset(hmp50, `Body Site` == \"Saliva\" & Age < 26)     ad   <- adiv_table(biom, \"multi\")     boxplot(Shannon ~ Depth, data=ad, xlab=\"Reads\", ylab=\"Diversity\")"},{"path":"https://cmmr.github.io/rbiom/reference/apcoa.html","id":null,"dir":"Reference","previous_headings":"","what":"PCoA adjusted for corvariates. — apcoa","title":"PCoA adjusted for corvariates. — apcoa","text":"Please cite: Shi Y, Zhang L, KA, Peterson CB, Jenq RR. aPCoA: covariate adjusted principal coordinates analysis. Bioinformatics. 2020 Jul  1;36(13):4099-4101. doi: 10.1093/bioinformatics/btaa276.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/apcoa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PCoA adjusted for corvariates. — apcoa","text":"","code":"apcoa(distmat, covariates)"},{"path":"https://cmmr.github.io/rbiom/reference/apcoa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PCoA adjusted for corvariates. — apcoa","text":"distmat distance matrix (dist class object) want run aPCoA . covariates data.frame confounding covariate(s). row  names data frame match labels distance matrix.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/apcoa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PCoA adjusted for corvariates. — apcoa","text":"numeric matrix row names covariates,      one column computed adjusted principal coordinates.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/apcoa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PCoA adjusted for corvariates. — apcoa","text":"","code":"library(rbiom)     library(ggplot2)          dm <- unifrac(hmp50)     reg_pcoa <- ape::pcoa(dm)[['vectors']]     adj_pcoa <- apcoa(dm, metadata(biom)[,'Sex',drop=FALSE]) #> Error in is(biom, \"BIOM\"): object 'biom' not found          ids   <- sample_names(hmp50)     color <- metadata(hmp50, 'Sex')     ggplot(mapping=aes(x=reg_pcoa[ids, 1], y=reg_pcoa[ids, 2], color=color)) + geom_point()      ggplot(mapping=aes(x=adj_pcoa[ids, 1], y=adj_pcoa[ids, 2], color=color)) + geom_point() #> Error in geom_point(): Problem while computing aesthetics. #> ℹ Error occurred in the 1st layer. #> Caused by error in `FUN()`: #> ! object 'adj_pcoa' not found"},{"path":"https://cmmr.github.io/rbiom/reference/as_percent.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert absolute counts to relative abundances. — as_percent","title":"Convert absolute counts to relative abundances. — as_percent","text":"Convert absolute counts relative abundances.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/as_percent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert absolute counts to relative abundances. — as_percent","text":"","code":"as_percent(biom)"},{"path":"https://cmmr.github.io/rbiom/reference/as_percent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert absolute counts to relative abundances. — as_percent","text":"biom BIOM object, returned read_biom.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/as_percent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert absolute counts to relative abundances. — as_percent","text":"BIOM object.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/as_percent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert absolute counts to relative abundances. — as_percent","text":"","code":"library(rbiom)          counts(hmp50)[1:4,1:5] #>          HMP01 HMP02 HMP03 HMP04 HMP05 #> UncO2713     0     0     0     0     0 #> UncO4101     1     5     6    18     5 #> AnmMass2     0     0     0     0     0 #> PreBivi6     0     0     0     0     0          biom <- as_percent(hmp50) #> Error in if (attr(biom, \"rarefaction\") == 1) return(biom): argument is of length zero     counts(biom)[1:4,1:5] #> Error in is(biom, \"BIOM\"): object 'biom' not found"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_biplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Display distances between samples as a 2-D scatter plot. — bdiv_biplot","title":"Display distances between samples as a 2-D scatter plot. — bdiv_biplot","text":"Display distances samples 2-D scatter plot.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_biplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display distances between samples as a 2-D scatter plot. — bdiv_biplot","text":"","code":"bdiv_biplot(   biom,   metric = \"Bray-Curtis\",   ord = \"PCoA\",   layers = NULL,   color.by = NULL,   shape.by = NULL,   facet.by = NULL,   limit.by = NULL,   weighted = TRUE,   rank = NULL,   taxa = 5,   p.top = Inf,   p.adj = \"fdr\",   perms = 1000,   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_biplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display distances between samples as a 2-D scatter plot. — bdiv_biplot","text":"biom BIOM object, returned read_biom. metric Beta diversity metric use calculating inter-sample distances. Options : \"Bray-Curtis\", \"Manhattan\", \"Euclidean\", \"Jaccard\", \"UniFrac\". Default: \"Bray-Curtis\". ord Ordination method use condensing n-dimensional data two dimensions. Options : \"UMAP\", \"tSNE\", \"NMDS\", \"PCoA\". Default: \"PCoA\". layers graphical elements use drawing. Options : point, spider, ellipse, name samples, mean, taxon, arrow biplots. Single letter abbreviations also accepted. instance, c(\"point\", \"ellipse\") equivalent c(\"p\", \"e\")  \"pe\". See vignette(\"biplots\") examples . Default: \"pce\"/\"p\" ordinations  /without color.argument. color., shape., facet., limit.Metadata columns  use data partitioning. Default: NULL weighted employing beta diversity metric, use weighted version. Default: TRUE. rank rank taxa display, example \"Phylum\"  \"Genus\". Run taxa_ranks() see options  given BIOM object. default, NULL, selects lowest level. taxa taxa display. integer value show top n abundant taxa. value 0 <= n < 1 show taxa  mean abundance greater (e.g. 0.1). character vector taxon names show taxa. Default: 5. p.top display taxa significant differences abundance. p.top >= 1, p.top  significant taxa displayed. p.top less one, taxa adjusted p-value <= p.top displayed. Recommended used combination taxa parameter set lower bound mean abundance considered taxa. Default: Inf. p.adj Method use multiple comparisons adjustment p-values. Run p.adjust.methods list available options. Default: \"fdr\". perms Number random permutations use estimating statistical significance. Default: 1000. ... Parameters underlying functions. Prefixing parameter names layer name ensures particular parameter passed , , layer. instance, dot.size = 2 d.size = 2 ensures  dotplot layer size set 2.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_biplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display distances between samples as a 2-D scatter plot. — bdiv_biplot","text":"ggplot2 plot. computed data points statistics          attached attr(p, 'data') attr(p, 'stats'),          respectively.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_biplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display distances between samples as a 2-D scatter plot. — bdiv_biplot","text":"","code":"library(rbiom)          biom <- rarefy(hmp50)      bdiv_biplot(biom, color.by=\"Body Site\", rank=\"Genus\")"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize BIOM data with boxplots. — bdiv_boxplot","title":"Visualize BIOM data with boxplots. — bdiv_boxplot","text":"Visualize BIOM data boxplots.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize BIOM data with boxplots. — bdiv_boxplot","text":"","code":"bdiv_boxplot(   biom,   x = NULL,   metric = \"Bray-Curtis\",   layers = \"lsb\",   color.by = NULL,   pattern.by = NULL,   shape.by = NULL,   facet.by = NULL,   limit.by = NULL,   p.adj = \"fdr\",   p.label = TRUE,   ci = 95,   xlab.angle = \"auto\",   weighted = TRUE,   tree = NULL,   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize BIOM data with boxplots. — bdiv_boxplot","text":"biom BIOM object, returned read_biom. x categorical metadata column name. Prefix column name  == != limit comparisons within groups, respectively. default, NULL groups distances  single column. metric Beta diversity metric(s) use. Options  \"Manhattan\", \"Euclidean\", \"Bray-Curtis\",  \"Jaccard\", \"UniFrac\". UniFrac requires  phylogenetic tree. Default: \"Bray-Curtis\". layers \"box\" (\"x\"), \"bar\", \"violin\",  \"dot\", \"strip\", \"crossbar\", \"errorbar\",  \"linerange\", \"pointrange\". Single letter  abbreviations also accepted. instance, c(\"box\", \"dot\")  equivalent c(\"x\", \"d\") \"xd\". See vignette(\"boxplots\") examples . Default: \"lsb\". color., pattern., shape., facet., limit.Metadata columns  use data partitioning. Prefix column name  == != limit comparisons within groups, respectively. Default: NULL p.adj Method use multiple comparisons adjustment p-values. Run p.adjust.methods list available options. (Default: fdr) p.label Minimum adjusted p-value display plot  bracket. p.label = 0.05 -  Use specific value. p.label = TRUE -  equivalent p.label = 0.05 p.label = FALSE -  show stats plot p.label = Inf -  display p-values p.label = NULL -  calculate stats numeric vector one value  provided, used breaks asterisk notation. Default: TRUE ci calculate min/max crossbar,  errorbar, linerange, pointrange layers. Provide number 75 100 define confidence interval's confidence level, commonly 95 97.5. options :  range,  sd (standard deviation),  se (standard error),  mad (median absolute deviation).  center mark crossbar pointrange represents mean, except mad case represents median. Trendlines require confidence interval value.  Set NULL disable. Default: 95 xlab.angle rotate tick labels x-axis.  'auto' (default), automatically selects rotation value.  0, 30, 90 sets angle horizontal,  angled, vertical, respectively. weighted employing beta diversity metric, use weighted version. Default: TRUE. tree phylogenetic tree use calculating UniFrac distance. default, NULL, use BIOM object's tree. ... Parameters matched formal arguments ggplot2 functions. Prefixing parameter names layer name ensures particular parameter passed , , layer. instance, dot.size = 2 d.size = 2 ensures  dotplot layer size set 2. filter.fun function takes bdiv_table() input returns bdiv_table() output. modified table used plotting. Default: NULL.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize BIOM data with boxplots. — bdiv_boxplot","text":"ggplot2 plot. computed data points statistics          attached attr(p, 'data') attr(p, 'stats'),          respectively.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_boxplot.html","id":"aesthetics-and-partitions","dir":"Reference","previous_headings":"","what":"Aesthetics and Partitions","title":"Visualize BIOM data with boxplots. — bdiv_boxplot","text":"Metadata can used flexibly subset, partition, apply aesthetics  creating plot. Common use cases provided . thorough  documentation available https://cmmr.github.io/rbiom. color.- categorical metadata column. (Max 1) pattern.- categorical metadata column. (Max 1) shape.- categorical metadata column. (Max 1) facet.- Categorical metadata column(s) . limit.- metadata column(s). built-color palettes colorblind-friendly. available  categorical palette names : \"okabe\", \"carto\", \"r4\",  \"polychrome\", \"tol\", \"bright\", \"light\",  \"muted\", \"vibrant\", \"tableau\", \"classic\",  \"alphabet\", \"tableau20\", \"kelly\", \"fishy\". Patterns sourced magick R package. Pattern names :  \"bricks\", \"hexagons\", \"horizontalsaw\",  \"hs_fdiagonal\", \"fishscales\", \"verticalsaw\",  \"checkerboard\", \"octagons\", \"right45\",  \"hs_cross\", \"hs_bdiagonal\", \"hs_diagcross\",  \"hs_horizontal\", \"hs_vertical\", \"left45\",  \"leftshingle\", \"rightshingle\", \"verticalbricks\",  \"verticalleftshingle\", \"verticalrightshingle\". Shapes can given per base R - numbers 0 17 various shapes, decimal value ascii character, e.g. -z = 65:90; -Z = 97:122 use  letters instead shapes plot. Character strings may used well.","code":"## Colors ----------------------------   color.by = \"Body Site\"   color.by = list('Body Site' = \"bright\")   color.by = list('Body Site' = c(\"Stool\", \"Saliva\"))   color.by = list('Body Site' = list('values' = c(\"Stool\", \"Saliva\"), 'palette' = \"bright\"))   color.by = list('Body Site' = c('Stool' = \"blue\", 'Saliva' = \"green\"))      ## Patterns --------------------------   pattern.by = \"Body Site\"   pattern.by = list('Body Site' = c(\"Stool\", \"Saliva\"))   pattern.by = list('Body Site' = c('Stool' = \"left45\", 'Saliva' = \"hs_cross\"))      ## Shapes ----------------------------   shape.by = \"Body Site\"   shape.by = list('Body Site' = c(\"Stool\", \"Saliva\"))   shape.by = list('Body Site' = c('Stool' = 7, 'Saliva' = 8))      ## Facets ----------------------------   facet.by = \"Body Site\"   facet.by = c(\"Body Site\", \"Sex\")   facet.by = list('Body Site' = c(\"Stool\", \"Saliva\"), \"Sex\")      ## Limits ----------------------------   limit.by = list('Sex' = \"Male\", 'Age' = c(20,40))   limit.by = list('Body Site' = c(\"Saliva\", \"Anterior nares\"), 'Age' = c(NA,35))"},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_boxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize BIOM data with boxplots. — bdiv_boxplot","text":"","code":"library(rbiom)          biom <- rarefy(hmp50)     bdiv_boxplot(biom, x=\"==Body Site\", metric=\"UniFrac\", color.by=\"Body Site\")"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_distmat.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a distance matrix of samples vs samples. — bdiv_distmat","title":"Make a distance matrix of samples vs samples. — bdiv_distmat","text":"Make distance matrix samples vs samples.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_distmat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a distance matrix of samples vs samples. — bdiv_distmat","text":"","code":"bdiv_distmat(   biom,   method = \"bray-curtis\",   weighted = TRUE,   tree = NULL,   stat.by = NULL,   seed = 0,   perms = 999 )"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_distmat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a distance matrix of samples vs samples. — bdiv_distmat","text":"biom matrix, simple_triplet_matrix, BIOM  object, returned read_biom. matrices, rows  columns assumed taxa samples, respectively. method distance algorithm use. Options : \"bray-curtis\", \"manhattan\", \"euclidean\",  \"jaccard\", \"unifrac\". Non-ambiguous abbreviations  method names also accepted. phylogenetic tree must  present biom explicitly provided via tree= use UniFrac methods. (Default: \"bray-curtis\") weighted Take relative abundances account.  weighted=FALSE, presence/absence considered.  (Default: TRUE) tree phylo object representing phylogenetic relationships taxa biom. taken tree embedded biom object explicitly specified. required computing UniFrac distance matrices.  (Default: NULL) stat.Specify categorical metadata column name compute adonis  statistics return results attributes named 'stats_raw'  'stats_tbl'. (Default: NULL) seed Random seed adonis permutations. (Default: 0) perms Number random permutations use adonis calcuation. (Default: 999)","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_distmat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a distance matrix of samples vs samples. — bdiv_distmat","text":"distance matrix.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_distmat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a distance matrix of samples vs samples. — bdiv_distmat","text":"","code":"library(rbiom)          biom <- select(hmp50, 1:10)     dm <- bdiv_distmat(biom, 'unifrac')     as.matrix(dm)[1:4,1:4] #>           HMP01     HMP02     HMP03     HMP04 #> HMP01 0.0000000 0.1950253 0.3687298 0.4239831 #> HMP02 0.1950253 0.0000000 0.2101679 0.3187533 #> HMP03 0.3687298 0.2101679 0.0000000 0.3040937 #> HMP04 0.4239831 0.3187533 0.3040937 0.0000000     plot(hclust(dm))"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Display beta diversities in an all vs all grid. — bdiv_heatmap","title":"Display beta diversities in an all vs all grid. — bdiv_heatmap","text":"Display beta diversities vs grid.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display beta diversities in an all vs all grid. — bdiv_heatmap","text":"","code":"bdiv_heatmap(   biom,   metric = \"Bray-Curtis\",   weighted = TRUE,   grid = list(label = \"Distance\", colors = \"-bilbao\"),   color.by = NULL,   order.by = NULL,   limit.by = NULL,   label = TRUE,   label_size = NULL,   rescale = \"none\",   trees = TRUE,   clust = \"complete\",   dist = \"euclidean\",   tree_height = NULL,   track_height = NULL,   ratio = 1,   legend = \"right\",   xlab.angle = \"auto\",   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display beta diversities in an all vs all grid. — bdiv_heatmap","text":"biom BIOM object, returned read_biom. metric Beta diversity metric(s) use. Options  \"Manhattan\", \"Euclidean\", \"Bray-Curtis\",  \"Jaccard\", \"UniFrac\". UniFrac requires  phylogenetic tree. Default: \"Bray-Curtis\". weighted beta diversity metric weighted  abundances? Default: TRUE. grid Color palette name, list entries label,  colors, range, bins, na.color, / guide. See Track Definitions section details. Default: list(label = \"Distance\", colors = \"-bilbao\"). color.Add annotation tracks metadata column(s).  See \"Annotation Tracks\" section details. Default: NULL order.metadata column(s) use ordering samples  across x y axes. Overrides clust argument. See \"Ordering Limiting\" section details. Default: NULL limit.Metadata definition(s) use sample subsetting prior calculations.  See \"Ordering Limiting\" section details. Default: NULL label Label matrix rows columns. can supply list logical vector length two control row labels column  labels separately, example  label = c(rows = TRUE, cols = FALSE), simply  label = c(T, F). valid options \"rows\", \"cols\", \"\", \"bottom\", \"right\", \"none\". Default: TRUE. label_size font size use row column labels.  can supply numeric vector length two control row label sizes  column label sizes separately, example  c(rows = 20, cols = 8), simply c(20, 8). Default: NULL, computes:  pmax(8, pmin(20, 100 / dim(mtx))). rescale Rescale rows columns common min/max. Options: \"none\", \"rows\", \"cols\". Default: \"none\". trees Draw dendrogram rows (left) columns (top). can  supply list logical vector length two control row tree  column tree separately, example  trees = c(rows = T, cols = F), simply trees = c(T, F).  valid options \"rows\", \"cols\", \"\",  \"left\", \"top\", \"none\". Default: TRUE. clust Clustering algorithm reordering rows columns  similarity. can supply list character vector length two  control row column clustering separately, example  clust = c(rows = \"complete\", cols = NA), simply  clust = c(\"complete\", NA). Default: \"complete\". Options : FALSE NA -  Disable reordering. hclust object method name -  \"ward.D\",      \"ward.D2\", \"single\", \"complete\",      \"average\", \"mcquitty\", \"median\",      \"centroid\". dist Distance algorithm use reordering rows columns  similarity. can supply list character vector length two control row column clustering separately, example  dist = c(rows = \"euclidean\", cols = \"maximum\"), simply  dist = c(\"euclidean\", \"maximum\"). Default: \"euclidean\". Options : dist object method name -  \"euclidean\",      \"maximum\", \"manhattan\", \"canberra\",      \"binary\", \"minkowski\". tree_height, track_height height dendrogram annotation tracks multiples (fractions) smaller dimension grid cell size. Use numeric vector length two assign c(left, top) independently.  Default: NULL, computes: tree_height = sqrt(min(dim(mtx))), track_height = tree_height / 4. ratio Height/width ratio entire grid.  Default: 1 (square). legend place legend. Options : \"right\" \"bottom\". Default: \"right\". xlab.angle Angle labels bottom plot.  Options \"auto\", 0, 30, 90.  Default: \"auto\". ... Additional arguments pass ggplot2::theme(). example, labs.title = \"Plot Title\". tree phylogenetic tree use calculating UniFrac distance. default, NULL, use BIOM object's tree.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display beta diversities in an all vs all grid. — bdiv_heatmap","text":"ggplot2 plot. computed data points attached  attr(, 'data').","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_heatmap.html","id":"annotation-tracks","dir":"Reference","previous_headings":"","what":"Annotation Tracks","title":"Display beta diversities in an all vs all grid. — bdiv_heatmap","text":"Metadata can displayed colored tracks heatmap. Common use  cases provided , thorough documentation available  https://cmmr.github.io/rbiom . following entries track definitions understood: colors -  pre-defined palette name custom set colors map . range -  c(min,max) use scale values. label -  Label track. Defaults name list element. side -  Options \"top\" (default) \"left\". na.color -  color use NA values. bins -  Bin gradient many bins/steps. guide -  list arguments guide_colorbar() guide_legend(). built-color palettes colorblind-friendly. Categorical palette names: \"okabe\", \"carto\", \"r4\",  \"polychrome\", \"tol\", \"bright\", \"light\",  \"muted\", \"vibrant\", \"tableau\", \"classic\",  \"alphabet\", \"tableau20\", \"kelly\", \"fishy\". Numeric palette names: \"reds\", \"oranges\", \"greens\",  \"purples\", \"grays\", \"acton\", \"bamako\",  \"batlow\", \"bilbao\", \"buda\", \"davos\",  \"devon\", \"grayC\", \"hawaii\", \"imola\",  \"lajolla\", \"lapaz\", \"nuuk\", \"oslo\",  \"tokyo\", \"turku\", \"bam\", \"berlin\",  \"broc\", \"cork\", \"lisbon\", \"roma\",  \"tofino\", \"vanimo\", \"vik\".","code":"## Categorical ---------------------------- color.by = \"Body Site\" color.by = list('Body Site' = \"bright\") color.by = list('Body Site' = c(\"Stool\", \"Saliva\"), 'colors' = \"bright\") color.by = list('Body Site' = c('Stool' = \"blue\", 'Saliva' = \"green\"))  ## Numeric -------------------------------- color.by = \"Age\" color.by = list('Age' = \"reds\") color.by = list('Age' = c(20,NA), 'colors' = \"reds\") # at least 20 years old color.by = list('Age' = c(20,40)) # between 20 and 40 years old (inclusive)  ## Multiple Tracks ------------------------ color.by = c(\"Body Site\", \"Age\") color.by = list('Body Site' = \"bright\", 'Age' = \"reds\") color.by = list(   'Body Site' = c('Stool' = \"blue\", 'Saliva' = \"green\"),   'Age'       = list(range = c(20,40), 'colors' = \"reds\") )"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_heatmap.html","id":"ordering-and-limiting","dir":"Reference","previous_headings":"","what":"Ordering and Limiting","title":"Display beta diversities in an all vs all grid. — bdiv_heatmap","text":"order.controls metadata column(s) used arrange samples plot. also enables subsetting particular set  range values. Prefix column name - arrange values  descending order rather ascending. limit.used specify subset samples without side-effects aesthetics. especially useful limiting data single categorical metadata value. Unlike *.parameters, limit.must always named list().","code":"## Categorical ---------------------------- order.by = \"Body Site\" order.by = list('Body Site' = c(\"Stool\", \"Saliva\"))  ## Numeric -------------------------------- order.by = \"-Age\" order.by = list('Age'  = c(20,NA)) # at least 20 years old order.by = list('-Age' = c(20,40)) # between 20 and 40 years old (inclusive)  ## Multiple / Mixed ----------------------- order.by = c(\"-Body Site\", \"Age\") order.by = list(\"Body Site\", '-Age' = c(20,40)) ## Categorical ---------------------------- limit.by = list('Sex' = \"Male\")  ## Numeric -------------------------------- limit.by = list('Age' = c(20,NA)) # at least 20 years old limit.by = list('Age' = c(20,40)) # between 20 and 40 years old (inclusive)  ## Multiple / Mixed ----------------------- limit.by = list(   'Sex'       = \"Male\",    'Body Site' = c(\"Stool\", \"Saliva\")   'Age'       = c(20,40) )"},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display beta diversities in an all vs all grid. — bdiv_heatmap","text":"","code":"library(rbiom)       biom <- hmp50 %>% rarefy() %>% select(1:10)   bdiv_heatmap(biom, color.by=\"Body Site\")"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_ord_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduce a distance matrix to two or three dimensions — bdiv_ord_table","title":"Reduce a distance matrix to two or three dimensions — bdiv_ord_table","text":"Reduce distance matrix two three dimensions","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_ord_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduce a distance matrix to two or three dimensions — bdiv_ord_table","text":"","code":"bdiv_ord_table(   biom,   dist = \"Bray-Curtis\",   ord = \"UMAP\",   weighted = TRUE,   tree = NULL,   md = NULL,   k = 2,   safe = TRUE,   split.by = NULL,   stat.by = NULL,   seed = 0,   perms = 1000,   rank = NULL,   taxa = 5,   p.adj = \"fdr\",   p.top = 5,   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_ord_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reduce a distance matrix to two or three dimensions — bdiv_ord_table","text":"biom BIOM object, returned read_biom. Alternatively, distance matrix, bdiv_distmat. dist distance algorithm use. Options : \"Bray-Curtis\", \"Manhattan\", \"Euclidean\",  \"Jaccard\", \"UniFrac\". phylogenetic tree must present biom explicitly provided via tree= use UniFrac methods. Ignored biom distance matrix. Multiple values allowed. Default: \"Bray-Curtis\". ord Method reducing dimensionality distance matrix. Multiple values allowed. Options : \"UMAP\" (default) Uniform manifold approximation projection,       via umap. \"PCoA\" Principal coordinate analysis,       via pcoa. \"NMDS\" Nonmetric multidimensional scaling,       via metaMDS. \"tSNE\" t-distributed stochastic neighbor embedding,       via tsne. weighted Take relative abundances account.  weighted=FALSE, presence/absence considered.  Ignored biom distance matrix. Multiple values   allowed. (Default: TRUE) tree phylo object representing phylogenetic relationships taxa biom. taken tree embedded biom object explicitly specified. required computing UniFrac distance matrices.  Ignored  biom distance matrix. md Include metadata output data frame? Ignored  biom distance matrix. Options : NULL include metadata. (Default) TRUE Include metadata. character vector Include specified metadata columns. k Number dimensions return. (Default: 2) safe TRUE, autogenerated columns names  converted lowercase prefixed . avoid  conflicting metadata column names. (Default: TRUE) split.Name(s) metadata columns data split prior calculating distance matrices, ordinations, statistics. stat., seed, perms Passthrough parameters bdiv_distmat()  computing adonis statistics. (Default: stat.=NULL, seed=0,  perms=1000) rank [Biplot] rank taxa display (e.g. \"Phylum\"),  NULL biplot. Run taxa_ranks() see options  given BIOM object. (Default: NULL) taxa [Biplot] taxa display. integer value return  top n abundant taxa. value 0 <= n < 1 return taxa  mean abundance greater (e.g. 0.1). character vector taxon names show taxa. (Default: 5) p.adj [Biplot] Method use multiple comparisons adjustment  p-values. Run p.adjust.methods list available options. (Default: fdr) p.top [Biplot] returns taxa significant  differences abundance. p.top >= 1,  p.top significant taxa displayed. p.top  less one, taxa adjusted p-value <= p.top  displayed. Recommended used combination  taxa parameter set lower bound mean abundance  considered taxa. (Default: Inf) ... Additional arguments pass pcoa,  metaMDS, tsne.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_ord_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reduce a distance matrix to two or three dimensions — bdiv_ord_table","text":"data.frame columns Axis.1, Axis.2, ..., Axis.k well          columns given md, split., stat..          Sample IDs column 'Sample' metric used          column 'Metric'. column names lowercase          prefixed . safe=TRUE. pcoa ordinations,  attr(, 'eig') contain eigenvalues useful          construction \"..  attr(, 'stats_raw') attr(,'stats_tbl') contain          raw tabular adonis statistics stat.set.          Distance matrices attr(, 'dm'). rank         non-NULL, taxa list taxon names, data.frame         biplot coordinates given attr(,'biplot').","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_ord_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reduce a distance matrix to two or three dimensions — bdiv_ord_table","text":"","code":"library(rbiom)          ord <- bdiv_ord_table(hmp50, \"bray-curtis\", \"pcoa\")     head(ord) #>      .axis.1      .axis.2 .sample  .weight       .dist .ord #> 1 -0.3575401  0.002362419   HMP01 Weighted Bray-Curtis PCoA #> 2 -0.4203019  0.010404374   HMP02 Weighted Bray-Curtis PCoA #> 3 -0.3819160  0.013483401   HMP03 Weighted Bray-Curtis PCoA #> 4 -0.3876548  0.004854090   HMP04 Weighted Bray-Curtis PCoA #> 5 -0.4154969 -0.011498409   HMP05 Weighted Bray-Curtis PCoA #> 6 -0.4135847 -0.007029588   HMP06 Weighted Bray-Curtis PCoA"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a data.frame of distances between samples. — bdiv_table","title":"Make a data.frame of distances between samples. — bdiv_table","text":"Make data.frame distances samples.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a data.frame of distances between samples. — bdiv_table","text":"","code":"bdiv_table(   biom,   method = \"bray-curtis\",   weighted = TRUE,   tree = NULL,   md = FALSE,   safe = FALSE,   stat.by = NULL,   seed = 0,   perms = 999 )"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a data.frame of distances between samples. — bdiv_table","text":"biom matrix, simple_triplet_matrix, BIOM  object, returned read_biom. matrices, rows  columns assumed taxa samples, respectively. method distance algorithm use. Options : \"bray-curtis\", \"manhattan\", \"euclidean\",  \"jaccard\", \"unifrac\". Non-ambiguous abbreviations  method names also accepted. phylogenetic tree must  present biom explicitly provided via tree= use UniFrac methods. (Default: \"bray-curtis\") weighted Take relative abundances account.  weighted=FALSE, presence/absence considered.  (Default: TRUE) tree phylo object representing phylogenetic relationships taxa biom. taken tree embedded biom object explicitly specified. required computing UniFrac distance matrices.  (Default: NULL) md Include metadata output data frame? Options : FALSE include metadata. (Default) TRUE Include metadata. character vector Include specified metadata    columns. Column names can prefixed == !=    indicate within groupings, respectively,    kept. See examples . safe autogenerated columns prefixed \".\" avoid  conflicting metadata column names? (Default: FALSE) stat.Specify categorical metadata column name compute adonis  statistics return results attributes named 'stats_raw'  'stats_tbl'. (Default: NULL) seed Random seed adonis permutations. (Default: 0) perms Number random permutations use adonis calcuation. (Default: 999)","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a data.frame of distances between samples. — bdiv_table","text":"data.frame.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a data.frame of distances between samples. — bdiv_table","text":"","code":"library(rbiom)          # Return in long format with metadata     biom <- select(hmp50, 18:21)     bdiv_table(biom, 'unifrac', md = c(\"Body Site\", \"Sex\")) #>    Sample1 Sample2  Distance       Body Site            Sex #> 5    HMP18   HMP19 0.6651627 Saliva vs Stool Female vs Male #> 9    HMP18   HMP20 0.6810017 Saliva vs Stool Female vs Male #> 10   HMP19   HMP20 0.4183059           Stool         Female #> 13   HMP18   HMP21 0.7170374 Saliva vs Stool           Male #> 14   HMP19   HMP21 0.3896741           Stool Female vs Male #> 15   HMP20   HMP21 0.1490926           Stool Female vs Male          # Only look at distances among the stool sample     bdiv_table(biom, 'unifrac', md = c(\"==Body Site\", \"Sex\")) #>    Sample1 Sample2  Distance Body Site            Sex #> 10   HMP19   HMP20 0.4183059     Stool         Female #> 14   HMP19   HMP21 0.3896741     Stool Female vs Male #> 15   HMP20   HMP21 0.1490926     Stool Female vs Male          # Or between males and females     bdiv_table(biom, 'unifrac', md = c(\"Body Site\", \"!=Sex\")) #>    Sample1 Sample2  Distance       Body Site            Sex #> 5    HMP18   HMP19 0.6651627 Saliva vs Stool Female vs Male #> 9    HMP18   HMP20 0.6810017 Saliva vs Stool Female vs Male #> 14   HMP19   HMP21 0.3896741           Stool Female vs Male #> 15   HMP20   HMP21 0.1490926           Stool Female vs Male"},{"path":"https://cmmr.github.io/rbiom/reference/bdply.html","id":null,"dir":"Reference","previous_headings":"","what":"Split BIOM by metadata, apply function, and return results in a data frame. — bdply","title":"Split BIOM by metadata, apply function, and return results in a data frame. — bdply","text":"Calls plyr::ddply internally.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split BIOM by metadata, apply function, and return results in a data frame. — bdply","text":"","code":"bdply(biom, vars, FUN, ..., fast = TRUE)"},{"path":"https://cmmr.github.io/rbiom/reference/bdply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split BIOM by metadata, apply function, and return results in a data frame. — bdply","text":"biom BIOM object, returned read_biom. vars character vector metadata fields. unique combination values columns used create subsetted BIOM object pass FUN. NULL, biom passed FUN unaltered. Unambiguous abbreviations metadata fields also accepted. FUN function execute BIOM subset. FUN return data.frame, rbind-ed together returned bdply. ... Additional arguments pass FUN. fast TRUE (default), subsetted BIOM objects still contain full taxa table phylogenetic tree. Set  fast = FALSE run slow steps subsetting  elements well.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split BIOM by metadata, apply function, and return results in a data frame. — bdply","text":"data.frame comprising merged outputs FUN, along         columns specified vars.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split BIOM by metadata, apply function, and return results in a data frame. — bdply","text":"","code":"library(rbiom)          bdply(hmp50, \"Sex\", nsamples) #>      Sex V1 #> 1 Female 30 #> 2   Male 20          bdply(hmp50, c(\"Body Site\", \"Sex\"), function (b) {       ad <- adiv_table(b)[,c(\"Shannon\", \"Simpson\")]       apply(ad, 2L, mean)     }) #>      Sex      Body Site   Shannon   Simpson #> 1 Female Anterior nares 1.4318071 0.6814534 #> 2 Female  Buccal mucosa 1.1739844 0.4080621 #> 3 Female     Mid vagina 0.4070774 0.1670592 #> 4 Female         Saliva 2.9304968 0.8934531 #> 5 Female          Stool 2.4288307 0.8496172 #> 6   Male Anterior nares 1.5053133 0.6650060 #> 7   Male  Buccal mucosa 1.7128815 0.6016869 #> 8   Male         Saliva 3.1718522 0.9132980 #> 9   Male          Stool 2.5126148 0.8347696          bdply(hmp50, \"Body Site\", function (b) {       r <- range(bdiv_distmat(b, \"bray\"))       data.frame(bray.min = r[[1]], bray.max = r[[2]])     }) #>        Body Site   bray.min  bray.max #> 1 Anterior nares 0.21357850 0.8957952 #> 2  Buccal mucosa 0.11132016 0.7878359 #> 3     Mid vagina 0.04589041 1.0000000 #> 4         Saliva 0.37105391 0.6975318 #> 5          Stool 0.40223744 0.9739696"},{"path":"https://cmmr.github.io/rbiom/reference/blply.html","id":null,"dir":"Reference","previous_headings":"","what":"Split BIOM by metadata, apply function, and return results in a list. — blply","title":"Split BIOM by metadata, apply function, and return results in a list. — blply","text":"Calls plyr::dlply internally.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/blply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split BIOM by metadata, apply function, and return results in a list. — blply","text":"","code":"blply(biom, vars, FUN, ..., fast = TRUE)"},{"path":"https://cmmr.github.io/rbiom/reference/blply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split BIOM by metadata, apply function, and return results in a list. — blply","text":"biom BIOM object, returned read_biom. vars character vector metadata fields. unique combination values columns used create subsetted BIOM object pass FUN. Unambiguous abbreviations metadata fields also accepted. FUN function execute BIOM subset. FUN may return object, returned named list. ... Additional arguments pass FUN. fast TRUE (default), subsetted BIOM objects still contain full taxa table phylogenetic tree. Set  fast = FALSE run slow steps subsetting  elements well.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/blply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split BIOM by metadata, apply function, and return results in a list. — blply","text":"list function outputs.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/blply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split BIOM by metadata, apply function, and return results in a list. — blply","text":"","code":"library(rbiom)          blply(hmp50, \"Sex\", nsamples) #> $Female #> [1] 30 #>  #> $Male #> [1] 20 #>  #> attr(,\"split_type\") #> [1] \"data.frame\" #> attr(,\"split_labels\") #>      Sex #> 1 Female #> 2   Male          blply(hmp50, c(\"Body Site\", \"Sex\"), function (b) {       ad <- adiv_table(b)[,c(\"Shannon\", \"Simpson\")]       apply(ad, 2L, mean)     }) #> $`Female.Anterior nares` #>   Shannon   Simpson  #> 1.4318071 0.6814534  #>  #> $`Female.Buccal mucosa` #>   Shannon   Simpson  #> 1.1739844 0.4080621  #>  #> $`Female.Mid vagina` #>   Shannon   Simpson  #> 0.4070774 0.1670592  #>  #> $Female.Saliva #>   Shannon   Simpson  #> 2.9304968 0.8934531  #>  #> $Female.Stool #>   Shannon   Simpson  #> 2.4288307 0.8496172  #>  #> $`Male.Anterior nares` #>  Shannon  Simpson  #> 1.505313 0.665006  #>  #> $`Male.Buccal mucosa` #>   Shannon   Simpson  #> 1.7128815 0.6016869  #>  #> $Male.Saliva #>  Shannon  Simpson  #> 3.171852 0.913298  #>  #> $Male.Stool #>   Shannon   Simpson  #> 2.5126148 0.8347696  #>  #> attr(,\"split_type\") #> [1] \"data.frame\" #> attr(,\"split_labels\") #>      Sex      Body Site #> 1 Female Anterior nares #> 2 Female  Buccal mucosa #> 3 Female     Mid vagina #> 4 Female         Saliva #> 5 Female          Stool #> 6   Male Anterior nares #> 7   Male  Buccal mucosa #> 8   Male         Saliva #> 9   Male          Stool          blply(hmp50, \"Body Site\", function (b) {       r <- range(bdiv_distmat(b, \"bray\"))       data.frame(bray.min = r[[1]], bray.max = r[[2]])     }) #> $`Anterior nares` #>    bray.min  bray.max #> 1 0.2135785 0.8957952 #>  #> $`Buccal mucosa` #>    bray.min  bray.max #> 1 0.1113202 0.7878359 #>  #> $`Mid vagina` #>     bray.min bray.max #> 1 0.04589041        1 #>  #> $Saliva #>    bray.min  bray.max #> 1 0.3710539 0.6975318 #>  #> $Stool #>    bray.min  bray.max #> 1 0.4022374 0.9739696 #>  #> attr(,\"split_type\") #> [1] \"data.frame\" #> attr(,\"split_labels\") #>        Body Site #> 1 Anterior nares #> 2  Buccal mucosa #> 3     Mid vagina #> 4         Saliva #> 5          Stool"},{"path":"https://cmmr.github.io/rbiom/reference/comments-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a BIOM object's comment. — comments<-","title":"Set a BIOM object's comment. — comments<-","text":"BIOM specification includes id comment fields free-form text.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/comments-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a BIOM object's comment. — comments<-","text":"","code":"comments(x) <- value"},{"path":"https://cmmr.github.io/rbiom/reference/comments-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a BIOM object's comment. — comments<-","text":"x BIOM object, returned read_biom. value identifier add (character vector length 1).","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/comments-set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set a BIOM object's comment. — comments<-","text":"","code":"library(rbiom)     biom <- hmp50          comments(biom) <- \"A description of this study\"     comments(biom) #> [1] \"A description of this study\""},{"path":"https://cmmr.github.io/rbiom/reference/comments.html","id":null,"dir":"Reference","previous_headings":"","what":"Get BIOM object's comments. — comments","title":"Get BIOM object's comments. — comments","text":"Note function named comments (plural), internal property names comment (singular) match biom specification. plural form taken avoid conflicting existing base::comment function.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/comments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get BIOM object's comments. — comments","text":"","code":"comments(x)"},{"path":"https://cmmr.github.io/rbiom/reference/comments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get BIOM object's comments. — comments","text":"biom BIOM object, returned read_biom.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/comments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get BIOM object's comments. — comments","text":"length 1 character vector.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/comments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get BIOM object's comments. — comments","text":"","code":"library(rbiom)     comments(hmp50) #> [1] \"\""},{"path":"https://cmmr.github.io/rbiom/reference/counts-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the abundance counts. — counts<-","title":"Set the abundance counts. — counts<-","text":"Set abundance counts.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/counts-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the abundance counts. — counts<-","text":"","code":"counts(x) <- value"},{"path":"https://cmmr.github.io/rbiom/reference/counts-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the abundance counts. — counts<-","text":"x BIOM object, returned read_biom. value numeric matrix. Rownames colnames must identical current counts() value.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/counts-set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the abundance counts. — counts<-","text":"","code":"library(rbiom)          biom <- hmp50     taxa <- c('Unc53100', 'Unc00c7g', 'Unc25731')          counts(biom)[taxa,1:5] #>          HMP01 HMP02 HMP03 HMP04 HMP05 #> Unc53100  1083   543   301   223  2672 #> Unc00c7g     0   152   239   162    89 #> Unc25731     3   126   171    31    54          biom <- rarefy(biom, 100)     counts(biom)[taxa,1:5] #>          HMP01 HMP02 HMP03 HMP04 HMP05 #> Unc53100    72    42    18     8    74 #> Unc00c7g     0    12    20    12     2 #> Unc25731     0     9    12     0     2          counts(biom) <- counts(biom) / 100 #> Error in `counts<-`(`*tmp*`, value = structure(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.72, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.05, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0.03, 0, 0, 0, 0, 0, 0.01, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.03, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0.01, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.42, 0, 0.01, 0, 0.12, 0, 0, 0, 0.09, 0, 0.01, 0, 0, 0, 0, 0, 0, 0.03, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0.01, 0.01, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.04, 0, 0, 0, 0, 0, 0, 0, 0, 0.03, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.07, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0.01, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0.01, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0.18, 0, 0, 0, 0.2, 0, 0, 0, 0.12, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0.07, 0.01, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.03, 0, 0.04, 0, 0, 0, 0.05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.03, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0.01, 0, 0.02, 0, 0, 0.06, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.08, 0, 0.02, 0, 0.12, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0.04, 0, 0, 0.01, 0.01, 0, 0.12, 0, 0.01, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.05, 0.03, 0, 0, 0, 0, 0.01, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0.02, 0, 0.12, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.03, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.08, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0.01, 0.01, 0, 0.01, 0.03, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.05, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.74, 0, 0, 0, 0.02, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.08, 0, 0, 0, 0, 0, 0, 0, 0.05, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0.01, 0, 0.22, 0, 0.05, 0, 0.07, 0, 0.01, 0, 0.06, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0.12, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0.02, 0.04, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0.17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0.05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.72, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, 0, 0, 0, 0, 0, 0, 0, 0.01, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0.03, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0.01, 0, 0, 0, 0.18, 0, 0, 0, 0.12, 0, 0, 0, 0.07, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0.3, 0.02, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0.05, 0, 0.03, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.03, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.03, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0.03, 0, 0.03, 0, 0.13, 0, 0.03, 0, 0.04, 0, 0, 0, 0, 0, 0, 0, 0.01, 0.01, 0, 0, 0, 0.06, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0.01, 0, 0, 0, 0.02, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0.12, 0.08, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.07, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0.07, 0.01, 0.02, 0.01, 0.01, 0.01, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.03, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0.03, 0, 0, 0, 0, 0, 0, 0, 0, 0.03, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2, 0, 0, 0, 0, 0, 0.13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.76, 0, 0.02, 0, 0.01, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.04, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0.04, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0.01, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.33, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.08, 0, 0.01, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0.09, 0.02, 0, 0, 0, 0, 0, 0.03, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.11, 0, 0.05, 0, 0, 0, 0, 0.03, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.85, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.03, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.26, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.03, 0, 0.02, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.14, 0, 0, 0, 0, 0, 0, 0, 0.32, 0.02, 0, 0, 0, 0, 0.03, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0.03, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.03, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0.27, 0, 0, 0, 0, 0, 0.38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.03, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0.27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.03, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.04, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.05, 0, 0.01, 0, 0.09, 0.01, 0, 0, 0.04, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0.01, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0.05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.36, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0.01, 0, 0, 0.01, 0, 0, 0, 0, 0, 0.02, 0, 0.02, 0, 0.01, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.03, 0, 0.02, 0, 0, 0.02, 0, 0, 0, 0, 0, 0.01, 0, 0.04, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0.03, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.03, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0.03, 0, 0, 0, 0, 0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.05, 0.02, 0, 0, 0, 0, 0, 0, 0.12, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0.03, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0.28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.09, 0, 0, 0, 0.21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0.04, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.17, 0, 0, 0, 0.04, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0.18, 0, 0, 0, 0.36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0.03, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.07, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.03, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.04, 0, 0, 0, 0.03, 0, 0, 0.01, 0.02, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.14, 0, 0, 0, 0.12, 0, 0, 0, 0, 0, 0, 0.07, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.03, 0, 0.21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.04, 0, 0.03, 0, 0, 0, 0, 0, 0, 0, 0.1, 0, 0, 0, 0.03, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.17, 0, 0, 0, 0, 0.01, 0.01, 0, 0, 0, 0, 0, 0, 0.04, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.05, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0.06, 0, 0, 0, 0.09, 0, 0.01, 0, 0.04, 0, 0, 0, 0.01, 0, 0.07, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.14, 0, 0, 0, 0.18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.04, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.03, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.44, 0, 0, 0, 0.09, 0.01, 0, 0, 0.02, 0, 0, 0, 0, 0.09, 0.05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0.02, 0, 0.01, 0, 0, 0, 0, 0.01, 0, 0, 0.03, 0, 0, 0, 0.04, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.43, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.25, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, 0.11, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.36, 0, 0.01, 0, 0.05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.19, 0, 0, 0, 0, 0, 0, 0, 0.05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0.02, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0.01, 0.01, 0, 0, 0, 0, 0, 0, 0, 0.01, 0.01, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0.03, 0, 0, 0, 0.07, 0, 0.02, 0, 0.19, 0, 0, 0, 0.07, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.05, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.16, 0, 0.01, 0.01, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.06, 0, 0.02, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0.02, 0, 0, 0, 0, 0, 0.07, 0, 0, 0, 0, 0.02, 0, 0.01, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.08, 0, 0.01, 0, 0.18, 0.01, 0.01, 0, 0.09, 0, 0, 0, 0, 0, 0, 0.07, 0.01, 0, 0, 0, 0, 0.03, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0.08, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0.11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0.06, 0.01, 0, 0, 0.01, 0, 0, 0, 0.01, 0, 0, 0, 0, 0.01, 0.04, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0.01, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.06, 0, 0.01, 0, 0.12, 0.01, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0.05, 0, 0.01, 0, 0, 0, 0.04, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.23, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.04, 0, 0, 0, 0, 0, 0, 0, 0.03, 0.08, 0, 0, 0, 0, 0.01, 0, 0.01, 0, 0, 0.01, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.04, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0.01, 0.02, 0, 0, 0.01, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0.03, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0.06, 0, 0, 0, 0.28, 0, 0, 0, 0.08, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.03, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0.05, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.09, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.09, 0, 0.07, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0.05, 0, 0, 0, 0, 0, 0.03, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0.31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.03, 0, 0.01, 0.01, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.07, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0.48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0.15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0.01, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.39, 0, 0, 0, 0.03, 0, 0, 0.05, 0, 0, 0, 0, 0, 0, 0.01, 0, 0.2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.08, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.03, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.82, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.06, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.04, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.03, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0.18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0.21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0.07, 0, 0, 0, 0.17, 0, 0, 0, 0, 0, 0.01, 0, 0, 0.01, 0, 0, 0, 0.01, 0, 0, 0, 0.03, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0.01, 0.01, 0, 0, 0, 0.09, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.09, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0.03, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.48, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0.03, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0.01, 0.16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0.01, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2, 0, 0, 0.04, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.04, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.05, 0, 0, 0.03, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0.02, 0.51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.04, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0.04, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.07, 0, 0, 0, 0, 0, 0, 0, 0.31, 0, 0, 0, 0.12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0.04, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.08, 0, 0, 0, 0, 0.03, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.06, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.44, 0.01, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.07, 0, 0, 0, 0.04, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.03, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.09, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.95, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0.97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), dim = c(226L, 50L), dimnames = list(c(\"UncO2713\", \"UncO4101\", \"AnmMass2\", \"PreBivi6\", \"CprSpeci\", \"Unc02k4w\", \"BroSpec6\", \"Unc14349\", \"Unc049jg\", \"UncPrev6\", \"Unc24994\", \"Unc0449c\", \"Unc00a7r\", \"Unc02qsf\", \"JYLSpeci\", \"Unc00jjs\", \"AntBa370\", \"Unc0140e\", \"Unc02zoe\", \"Unc044kg\", \"LtbAci52\", \"EschC738\", \"Unc27556\", \"StrAng61\", \"Unc00gj0\", \"UncPre83\", \"TreDent5\", \"Unc20509\", \"Unc53100\", \"Unc03hvn\", \"PreNanc2\", \"Unc02i7j\", \"Unc00c7g\", \"EubYuri5\", \"Unc00244\", \"Unc02t0n\", \"Unc25731\", \"BurCen35\", \"Unc03j6o\", \"Unc04czb\", \"Unc03exf\", \"Unc81585\", \"PreAura2\", \"Unc90972\", \"Unc013qp\", \"Unc96314\", \"PpmSpe18\", \"AnmGrae2\", \"Unc030pw\", \"Unc0378a\", \"GcbBacte\", \"Unc01qyb\", \"ScaWigg2\", \"Unc01b8e\", \"Unc00vtb\", \"Unc59881\", \"LhnGenom\", \"CnbKrop8\", \"UncB9956\", \"Unid1194\", \"Unc00q8d\", \"Unc03tng\", \"AtiVagi3\", \"Unc037l3\", \"Unc03wru\", \"Unc02yft\", \"Unc02022\", \"Unc24537\", \"Unc86692\", \"Unc00blx\", \"Unc20019\", \"Unc26805\", \"Unc03kop\", \"AprTanne\", \"UncO2012\", \"Unc02zq3\", \"Unc03bqm\", \"Unc0434x\", \"Unc037df\", \"Unc03r7s\", \"Unc035ka\", \"Unc59275\", \"Unc02ncq\", \"CnbMatr3\", \"Unc01yd4\", \"Unc041t0\", \"Unc01ymh\", \"Unc01t6g\", \"Unc038wg\", \"Unc61523\", \"Unc63090\", \"Unc00rqr\", \"Unc19789\", \"Unc26984\", \"Unc23438\", \"Unc96171\", \"Unc26999\", \"Unc98931\", \"Unc00jjv\", \"Unc95449\", \"SppSpe15\", \"Unc00sdw\", \"OdoSpla2\", \"Unc02bjm\", \"UncPrev7\", \"Unc0397y\", \"Unc39115\", \"UncPs138\", \"Unc24171\", \"Unc036tb\", \"Unc02cxe\", \"Unid1588\", \"Unc0205l\", \"UncO5084\", \"Unc53485\", \"Unc024w0\", \"Unc00q1g\", \"UncO8555\", \"Unc01yki\", \"Unc19639\", \"Unc045wn\", \"Unc14501\", \"PreMica2\", \"Unc042zk\", \"UncO5146\", \"UncCl508\", \"Unc00c8r\", \"Unid1216\", \"PpbAcne6\", \"FlnPlaut\", \"Unc91188\", \"Unc0389t\", \"Hu4Lup30\", \"EubSpe39\", \"HunGut98\", \"Unc042pa\", \"Unc02gz3\", \"Unc039sp\", \"Unc034yt\", \"NssBaci4\", \"Unc03f2i\", \"UncTr385\", \"PreSpe72\", \"Unc00pjf\", \"Unc61746\", \"Unc00ans\", \"Unc02gn8\", \"Unc00sdl\", \"FinMag10\", \"Unc91175\", \"Unc03x4u\", \"Unc037e7\", \"Unc003zn\", \"Unc01xi5\", \"Unc041qb\", \"Unc92490\", \"Unc014ap\", \"Unc01tuf\", \"AnmOdon9\", \"Unc19536\", \"NssSpe42\", \"Unc03hzh\", \"PreFusc3\", \"Unc044bj\", \"Unc28979\", \"Unc91543\", \"BglSpec4\", \"PpmCato2\", \"Unid1005\", \"Unc0295v\", \"UncTr601\", \"Unc90783\", \"Unc00c70\", \"UncPre78\", \"Unc01b0s\", \"UncR1809\", \"Unc00p38\", \"ApaPro62\", \"Unc00lvf\", \"LprSpec8\", \"SneSang2\", \"Unc01r5u\", \"Unc00757\", \"TanSpec2\", \"Unc02pjp\", \"Unc95362\", \"Unc03j1x\", \"Unc72831\", \"ElzMeni7\", \"Unc03e45\", \"Unc25531\", \"Unc0135m\", \"Unc18105\", \"CnbTube3\", \"Unc0266w\", \"Unc02ynf\", \"Unid1505\", \"PpnDuerd\", \"LhnBac28\", \"Unc006sm\", \"Unc04cxl\", \"Unc032pq\", \"Unc25719\", \"Unc03nrw\", \"Unc006vd\", \"Unc02zkr\", \"Unc03ca8\", \"MgsMicr2\", \"AltIndis\", \"Unc03vuq\", \"PeuS1830\", \"Unc90828\", \"Unc012xp\", \"Unc02f7w\", \"Unc02rqg\", \"PpsStoma\", \"Unc00aji\", \"UncVei12\", \"PreSpe52\", \"Unc01n7p\", \"Unc00jgz\", \"CmpUreo7\", \"Unc03ztc\", \"Unc042lx\", \"Unc00wls\", \"Unc89065\"), cis.character(value) is not TRUE     counts(biom)[taxa,1:5] #>          HMP01 HMP02 HMP03 HMP04 HMP05 #> Unc53100    72    42    18     8    74 #> Unc00c7g     0    12    20    12     2 #> Unc25731     0     9    12     0     2"},{"path":"https://cmmr.github.io/rbiom/reference/counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the abundance counts. — counts","title":"Get the abundance counts. — counts","text":"Get abundance counts.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the abundance counts. — counts","text":"","code":"counts(biom)"},{"path":"https://cmmr.github.io/rbiom/reference/counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the abundance counts. — counts","text":"biom BIOM object, returned read_biom.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the abundance counts. — counts","text":"numeric matrix sample abundance counts biom.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the abundance counts. — counts","text":"","code":"library(rbiom)          counts(hmp50)[1:4,1:5] #>          HMP01 HMP02 HMP03 HMP04 HMP05 #> UncO2713     0     0     0     0     0 #> UncO4101     1     5     6    18     5 #> AnmMass2     0     0     0     0     0 #> PreBivi6     0     0     0     0     0"},{"path":"https://cmmr.github.io/rbiom/reference/default_rarefaction_depth.html","id":null,"dir":"Reference","previous_headings":"","what":"Pick a 'good' rarefaction depth. — default_rarefaction_depth","title":"Pick a 'good' rarefaction depth. — default_rarefaction_depth","text":"Pick 'good' rarefaction depth.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/default_rarefaction_depth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pick a 'good' rarefaction depth. — default_rarefaction_depth","text":"","code":"default_rarefaction_depth(biom)"},{"path":"https://cmmr.github.io/rbiom/reference/default_rarefaction_depth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pick a 'good' rarefaction depth. — default_rarefaction_depth","text":"biom matrix, simple_triplet_matrix, BIOM  object, returned read_biom. matrices, rows columns assumed taxa samples, respectively.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/default_rarefaction_depth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pick a 'good' rarefaction depth. — default_rarefaction_depth","text":"integer.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/depth.html","id":null,"dir":"Reference","previous_headings":"","what":"The rarefaction depth of a BIOM object. — depth","title":"The rarefaction depth of a BIOM object. — depth","text":"returned values reflect changes made subset() commands.  get rarefaction level immediately read_biom() rarefy() use attr(biom, 'rarefaction') instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/depth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The rarefaction depth of a BIOM object. — depth","text":"","code":"depth(biom)"},{"path":"https://cmmr.github.io/rbiom/reference/depth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The rarefaction depth of a BIOM object. — depth","text":"biom BIOM object, returned read_biom.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/depth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The rarefaction depth of a BIOM object. — depth","text":"rarefaction depth. BIOM object rarefied,          sorted vector unique depths.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/depth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The rarefaction depth of a BIOM object. — depth","text":"","code":"library(rbiom)          depth(hmp50) %>% head() #> [1]  182 1183 1353 1371 1489 1579     rarefy(hmp50) %>% depth() #> [1] 1183"},{"path":"https://cmmr.github.io/rbiom/reference/depths_barplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize the number of observations per sample. — depths_barplot","title":"Visualize the number of observations per sample. — depths_barplot","text":"Visualize number observations per sample.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/depths_barplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize the number of observations per sample. — depths_barplot","text":"","code":"depths_barplot(   biom,   rline = TRUE,   counts = TRUE,   labels = TRUE,   trans = \"log10\",   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/depths_barplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize the number of observations per sample. — depths_barplot","text":"biom matrix, simple_triplet_matrix, BIOM object, returned read_biom. matrices, rows columns assumed taxa samples, respectively. rline draw horizontal line plot, intended show particular rarefaction depth. Set TRUE show  auto-selected rarefaction depth NULL show line. Default: TRUE. counts Display number samples reads remaining rarefying rline reads per sample. Default: TRUE. labels Show sample names bar. Default: TRUE. trans Y-axis transformation. Options \"log10\"  NULL.  Default: \"log10\". ... Additional parameters pass along ggplot2  functions. Prefix parameter name either p.,  r./h., s. ensure gets passed ()  geom_point, hline,  geom_smooth, respectively. instance,  p.size = 2 ensures points size set  2.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/depths_barplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize the number of observations per sample. — depths_barplot","text":"ggplot2 plot. computed data points attached  attr(p, 'data').","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/depths_barplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize the number of observations per sample. — depths_barplot","text":"","code":"library(rbiom)          depths_barplot(hmp50, rline=TRUE)"},{"path":"https://cmmr.github.io/rbiom/reference/distill.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to a data.frame with metadata and diversity/abundance values. — distill","title":"Convert to a data.frame with metadata and diversity/abundance values. — distill","text":"Convert data.frame metadata diversity/abundance values.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/distill.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to a data.frame with metadata and diversity/abundance values. — distill","text":"","code":"distill(   biom,   metric,   weighted = TRUE,   rarefy = FALSE,   long = TRUE,   md = TRUE,   safe = FALSE )"},{"path":"https://cmmr.github.io/rbiom/reference/distill.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to a data.frame with metadata and diversity/abundance values. — distill","text":"biom BIOM object, returned read_biom. metric diversity/abundance values interest. Options : Alpha Diversity Metrics OTUs, Shannon, Chao1, Simpson,        /InvSimpson. Beta Diversity Metrics manhattan, euclidean, bray-curtis,        jaccard, unifrac. Use combination        weighted parameter. Metadata column names can        prefixed == != limit distance       calculations within , respectively,        categories. See examples . Taxa Abundances Kingdom, Phylum, Class, Order,        Family, Genus, Species, Strain,        OTU. Supported ranks vary biom. Run       taxa_ranks(biom) see available options. weighted metric beta diversity metric,  run weighted mode? (Default: TRUE) rarefy dataset rarefied first? metric  alpha diversity metric, 'rarefy' parameter passed  directly adiv_table(). (Default: FALSE) long Pivot returned data long format? FALSE metric column. TRUE \"Sample\", \"Metric\" \"Diversity\"                         columns returned. Rows added attain                         combinations samples x metrics. (Default) md Include metadata output data frame? Options : FALSE include metadata. (Default) TRUE Include metadata. character vector Include specified metadata                                    columns. safe autogenerated columns prefixed \".\" avoid  conflicting metadata column names? (Default: FALSE)","code":""},{"path":"https://cmmr.github.io/rbiom/reference/distill.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to a data.frame with metadata and diversity/abundance values. — distill","text":"data.frame object. first column named  Sample, possible, rownames hold sample          name well. beta diversity metrics first two columns          named Sample1 Sample2. remaining columns          largely dependent metric, long,  md. See examples .","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/distill.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to a data.frame with metadata and diversity/abundance values. — distill","text":"","code":"library(rbiom)          distill(hmp50, \"UniFrac\", md=c(\"==Body Site\", \"!=Sex\")) %>% head() #>     Sample1 Sample2  Distance     Body Site            Sex #> 51    HMP01   HMP02 0.1950253 Buccal mucosa Female vs Male #> 202   HMP02   HMP05 0.2509451 Buccal mucosa Female vs Male #> 301   HMP01   HMP07 0.1395698 Buccal mucosa Female vs Male #> 305   HMP05   HMP07 0.1057077 Buccal mucosa Female vs Male #> 353   HMP03   HMP08 0.3257210        Saliva Female vs Male #> 354   HMP04   HMP08 0.2328171        Saliva Female vs Male          distill(hmp50, c(\"Shannon\", \"OTUs\"), md=c(\"BMI\", \"Sex\")) %>% head() #>   Sample Depth  Metric Diversity BMI    Sex #> 1  HMP01  1660 Shannon  1.741153  20 Female #> 2  HMP02  1371 Shannon  2.587403  23   Male #> 3  HMP03  1353 Shannon  2.950982  26   Male #> 4  HMP04  1895 Shannon  3.255785  23   Male #> 5  HMP05  3939 Shannon  1.462651  24 Female #> 6  HMP06  4150 Shannon  3.087615  25   Male          distill(hmp50, \"Phylum\", long=FALSE, md=FALSE)[1:4,1:4] #>       Actinobacteria Bacteroidetes Cyanobacteria Deinococcus Thermus #> HMP01             18           276             0                   0 #> HMP02             60           221             0                   0 #> HMP03            126           313             0                   0 #> HMP04            120           218             0                   0          distill(hmp50, \"Phylum\", long=FALSE, md=c(\"Age\", \"Body Site\"))[1:4,1:6] #>       Sample Age     Body Site Actinobacteria Bacteroidetes Cyanobacteria #> HMP01  HMP01  22 Buccal mucosa             18           276             0 #> HMP02  HMP02  24 Buccal mucosa             60           221             0 #> HMP03  HMP03  28        Saliva            126           313             0 #> HMP04  HMP04  25        Saliva            120           218             0"},{"path":"https://cmmr.github.io/rbiom/reference/embed_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Wraps R code with Markdown syntax highlighting. — embed_code","title":"Wraps R code with Markdown syntax highlighting. — embed_code","text":"Wraps R code Markdown syntax highlighting.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/embed_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wraps R code with Markdown syntax highlighting. — embed_code","text":"","code":"embed_code(x)"},{"path":"https://cmmr.github.io/rbiom/reference/embed_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wraps R code with Markdown syntax highlighting. — embed_code","text":"x R code.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/embed_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wraps R code with Markdown syntax highlighting. — embed_code","text":"Markdown-compatible syntax highlighted code block.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/embed_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wraps R code with Markdown syntax highlighting. — embed_code","text":"","code":"library(rbiom)     p <- plot(hmp50, Bray ~ Sex, \"b\") #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' and 'y' lengths differ     attr(p, 'cmd') %>% embed_code() %>% cat(\"\\n\\n\") #> Error in paste0(\"~~~~ {.R}\\n\", x, \"\\n~~~~\\n\\n\"): object 'p' not found"},{"path":"https://cmmr.github.io/rbiom/reference/embed_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts a data.frame to a download link. — embed_csv","title":"Converts a data.frame to a download link. — embed_csv","text":"Converts data.frame download link.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/embed_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts a data.frame to a download link. — embed_csv","text":"","code":"embed_csv(x, label = \"Download Data (CSV)\", filename = \"data.csv\", ...)"},{"path":"https://cmmr.github.io/rbiom/reference/embed_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts a data.frame to a download link. — embed_csv","text":"x object coercable data.frame. filename Default filename download . Default: \"data.csv\". ... Additional arguments pass write.csv(). title Text/HTML label link. Default: \"Download Data (CSV)\".","code":""},{"path":"https://cmmr.github.io/rbiom/reference/embed_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts a data.frame to a download link. — embed_csv","text":"HTML string object encoded base64.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/embed_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts a data.frame to a download link. — embed_csv","text":"","code":"library(rbiom)     p <- plot(hmp50, Bray ~ Sex) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' and 'y' lengths differ     attr(p, 'stats') %>% embed_csv(row.names=FALSE) %>% cat(\"\\n\\n\") #> Error in as.data.frame(x): object 'p' not found"},{"path":"https://cmmr.github.io/rbiom/reference/has_phylogeny.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if a phylogenetic tree is present. — has_phylogeny","title":"Checks if a phylogenetic tree is present. — has_phylogeny","text":"Checks phylogenetic tree present.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/has_phylogeny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if a phylogenetic tree is present. — has_phylogeny","text":"","code":"has_phylogeny(biom)"},{"path":"https://cmmr.github.io/rbiom/reference/has_phylogeny.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if a phylogenetic tree is present. — has_phylogeny","text":"biom BIOM object, returned read_biom.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/has_phylogeny.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if a phylogenetic tree is present. — has_phylogeny","text":"TRUE phylogenetic tree present, FALSE otherwise.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/has_phylogeny.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks if a phylogenetic tree is present. — has_phylogeny","text":"","code":"library(rbiom)          has_phylogeny(hmp50) #> [1] TRUE"},{"path":"https://cmmr.github.io/rbiom/reference/has_sequences.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if DNA sequences are present. — has_sequences","title":"Checks if DNA sequences are present. — has_sequences","text":"Checks DNA sequences present.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/has_sequences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if DNA sequences are present. — has_sequences","text":"","code":"has_sequences(biom)"},{"path":"https://cmmr.github.io/rbiom/reference/has_sequences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if DNA sequences are present. — has_sequences","text":"biom BIOM object, returned read_biom.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/has_sequences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if DNA sequences are present. — has_sequences","text":"TRUE DNA sequences present, FALSE otherwise.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/has_sequences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks if DNA sequences are present. — has_sequences","text":"","code":"library(rbiom)     has_sequences(hmp50) #> [1] TRUE"},{"path":"https://cmmr.github.io/rbiom/reference/hmp50.html","id":null,"dir":"Reference","previous_headings":"","what":"Human Microbiome Project - 50 sample demo dataset. — hmp50","title":"Human Microbiome Project - 50 sample demo dataset. — hmp50","text":"Human Microbiome Project - 50 sample demo dataset.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/hmp50.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Human Microbiome Project - 50 sample demo dataset. — hmp50","text":"","code":"hmp50"},{"path":"https://cmmr.github.io/rbiom/reference/hmp50.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Human Microbiome Project - 50 sample demo dataset. — hmp50","text":"BIOM object 50 samples.          Includes metadata, taxonomy, phylogeny, sequences. Sex Male Female Body Site Buccal mucosa, Saliva, Anterior nares, Stool, Mid vagina Age 21 - 40 BMI 19 - 32","code":""},{"path":"https://cmmr.github.io/rbiom/reference/hmp50.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Human Microbiome Project - 50 sample demo dataset. — hmp50","text":"https://portal.hmpdacc.org","code":""},{"path":"https://cmmr.github.io/rbiom/reference/id-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a BIOM object's id. — id<-","title":"Set a BIOM object's id. — id<-","text":"BIOM specification includes id comment fields free-form text.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/id-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a BIOM object's id. — id<-","text":"","code":"id(x) <- value"},{"path":"https://cmmr.github.io/rbiom/reference/id-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a BIOM object's id. — id<-","text":"x BIOM object, returned read_biom. value identifier add (character vector length 1).","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/id-set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set a BIOM object's id. — id<-","text":"","code":"library(rbiom)     biom <- hmp50          info(biom)$id #> [1] \"Human Microbiome Project - 50 Sample Demo\"          id(biom) <- \"My new title/id\"     info(biom)$id #> [1] \"My new title/id\""},{"path":"https://cmmr.github.io/rbiom/reference/id.html","id":null,"dir":"Reference","previous_headings":"","what":"Get BIOM object's identifier / title. — id","title":"Get BIOM object's identifier / title. — id","text":"Get BIOM object's identifier / title.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get BIOM object's identifier / title. — id","text":"","code":"id(biom)"},{"path":"https://cmmr.github.io/rbiom/reference/id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get BIOM object's identifier / title. — id","text":"biom BIOM object, returned read_biom.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get BIOM object's identifier / title. — id","text":"length 1 character vector.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get BIOM object's identifier / title. — id","text":"","code":"library(rbiom)     id(hmp50) #> [1] \"Human Microbiome Project - 50 Sample Demo\""},{"path":"https://cmmr.github.io/rbiom/reference/info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get BIOM object's miscellaneous information. — info","title":"Get BIOM object's miscellaneous information. — info","text":"Get BIOM object's miscellaneous information.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get BIOM object's miscellaneous information. — info","text":"","code":"info(biom)"},{"path":"https://cmmr.github.io/rbiom/reference/info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get BIOM object's miscellaneous information. — info","text":"biom BIOM object, returned read_biom.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get BIOM object's miscellaneous information. — info","text":"list top-level metadata biom.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get BIOM object's miscellaneous information. — info","text":"","code":"library(rbiom)     info(hmp50) #> $id #> [1] \"Human Microbiome Project - 50 Sample Demo\" #>  #> $type #> [1] \"OTU table\" #>  #> $format #> [1] \"1.0.0\" #>  #> $format_url #> [1] \"http://biom-format.org\" #>  #> $generated_by #> [1] \"rbiom 1.0.2.9026\" #>  #> $date #> [1] \"2021-07-01T18:48:45Z\" #>  #> $matrix_type #> [1] \"sparse\" #>  #> $matrix_element_type #> [1] \"int\" #>  #> $shape #> [1] 490  50 #>  #> $comment #> [1] \"\" #>"},{"path":"https://cmmr.github.io/rbiom/reference/init_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize caching for expensive biom operations. — init_cache","title":"Initialize caching for expensive biom operations. — init_cache","text":"Speeds repetitive computations storing results functions calls.  cache initialization function can called . Subsequent calls  return warning.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/init_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize caching for expensive biom operations. — init_cache","text":"","code":"init_cache(cm = 50 * 1024^2, ...)"},{"path":"https://cmmr.github.io/rbiom/reference/init_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize caching for expensive biom operations. — init_cache","text":"cm memoise-compatible cache object.  E.g. cachem::cache_mem(), cachem::cache_disk(),  cachem::cache_layered(). cm numeric, used define maximum cache size (bytes) -memory  cache. Default: 50 * 1024^2 (50 MB) ... arguments passed cachem::cache_mem.  example: max_size = 512 * 1024^2,  max_age = Inf, max_n = Inf, etc.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/init_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize caching for expensive biom operations. — init_cache","text":"cache object, invisibly.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/init_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize caching for expensive biom operations. — init_cache","text":"","code":"library(rbiom)          init_cache()     system.time(x <- adiv_table(hmp50, \"multi\")) #>    user  system elapsed  #>    0.07    0.00    0.08      system.time(y <- adiv_table(hmp50, \"multi\")) #>    user  system elapsed  #>    0.01    0.00    0.02      identical(x, y) #> [1] TRUE"},{"path":"https://cmmr.github.io/rbiom/reference/is_rarefied.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if a BIOM object is rarefied. — is_rarefied","title":"Checks if a BIOM object is rarefied. — is_rarefied","text":"Checks BIOM object rarefied.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/is_rarefied.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if a BIOM object is rarefied. — is_rarefied","text":"","code":"is_rarefied(biom)"},{"path":"https://cmmr.github.io/rbiom/reference/is_rarefied.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if a BIOM object is rarefied. — is_rarefied","text":"biom BIOM object, returned read_biom.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/is_rarefied.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if a BIOM object is rarefied. — is_rarefied","text":"TRUE BIOM object rarefied, FALSE otherwise.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/is_rarefied.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks if a BIOM object is rarefied. — is_rarefied","text":"","code":"library(rbiom)          is_rarefied(hmp50) #> [1] FALSE          rarefy(hmp50, 1000) %>% is_rarefied() #> [1] TRUE"},{"path":"https://cmmr.github.io/rbiom/reference/metadata-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the BIOM object's metadata. — metadata<-","title":"Set the BIOM object's metadata. — metadata<-","text":"Set BIOM object's metadata.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/metadata-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the BIOM object's metadata. — metadata<-","text":"","code":"metadata(x) <- value"},{"path":"https://cmmr.github.io/rbiom/reference/metadata-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the BIOM object's metadata. — metadata<-","text":"x BIOM object, returned read_biom. value data.frame metadata. rownames() must  sample_names(biom). fewer rows  data samples, biom object subset.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/metadata-set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the BIOM object's metadata. — metadata<-","text":"","code":"library(rbiom)          md <- metadata(hmp50)     md <- md[,c('Sex', 'Body Site')]     metadata(hmp50) <- md     head(metadata(hmp50)) #>          Sex     Body Site #> HMP01 Female Buccal mucosa #> HMP02   Male Buccal mucosa #> HMP03   Male        Saliva #> HMP04   Male        Saliva #> HMP05 Female Buccal mucosa #> HMP06   Male        Saliva"},{"path":"https://cmmr.github.io/rbiom/reference/metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the sample metadata. — metadata","title":"Get the sample metadata. — metadata","text":"Get sample metadata.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the sample metadata. — metadata","text":"","code":"metadata(biom, field = NULL, id = NULL, cleanup = FALSE)"},{"path":"https://cmmr.github.io/rbiom/reference/metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the sample metadata. — metadata","text":"biom BIOM object, returned read_biom. field name single metadata column retrieve. provided, named vector returned instead data.frame. (Default: NULL) id Copy sample names (rownames) column.  (Default: NULL) cleanup Change character columns factor dates. Date formats  recognized : \" '.' '_' column names '.' first character order avoid conflicts auto-generated columns. (Default: FALSE)","code":""},{"path":"https://cmmr.github.io/rbiom/reference/metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the sample metadata. — metadata","text":"data frame metadata biom. field    given, return named vector field's values.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the sample metadata. — metadata","text":"","code":"library(rbiom)          metadata(hmp50)[1:4,1:3] #>       Age BMI     Body Site #> HMP01  22  20 Buccal mucosa #> HMP02  24  23 Buccal mucosa #> HMP03  28  26        Saliva #> HMP04  25  23        Saliva          head(metadata(hmp50, \"Body Site\")) #>           HMP01           HMP02           HMP03           HMP04           HMP05  #> \"Buccal mucosa\" \"Buccal mucosa\"        \"Saliva\"        \"Saliva\" \"Buccal mucosa\"  #>           HMP06  #>        \"Saliva\"           head(metadata(hmp50, \"Body Site\", cleanup=TRUE)) #>         HMP01         HMP02         HMP03         HMP04         HMP05  #> Buccal mucosa Buccal mucosa        Saliva        Saliva Buccal mucosa  #>         HMP06  #>        Saliva  #> Levels: Anterior nares Buccal mucosa Mid vagina Saliva Stool"},{"path":"https://cmmr.github.io/rbiom/reference/metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"List all the options for each type of metric. — metrics","title":"List all the options for each type of metric. — metrics","text":"List options type metric.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all the options for each type of metric. — metrics","text":"","code":"metrics(biom, mode = \"all\", tree = NULL)"},{"path":"https://cmmr.github.io/rbiom/reference/metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all the options for each type of metric. — metrics","text":"biom BIOM object, returned read_biom. mode One following options: ord -  Ordination adiv -  Alpha Diversity dist -  Distance (Beta Diversity) clust -  Clustering rank -  Taxonomic Rank taxon -  Taxa Names meta -  Metadata Fields -  ","code":""},{"path":"https://cmmr.github.io/rbiom/reference/metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all the options for each type of metric. — metrics","text":"character vector supported values.          mode = \"\", named list() character vectors.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List all the options for each type of metric. — metrics","text":"","code":"library(rbiom)          metrics(hmp50, 'adiv') #> [1] \"OTUs\"       \"Shannon\"    \"Chao1\"      \"Simpson\"    \"InvSimpson\"     metrics(hmp50, 'dist') #> [1] \"euclidean\" \"maximum\"   \"manhattan\" \"canberra\"  \"binary\"    \"minkowski\""},{"path":"https://cmmr.github.io/rbiom/reference/nsamples.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of samples in a BIOM. — nsamples","title":"Number of samples in a BIOM. — nsamples","text":"Number samples BIOM.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/nsamples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of samples in a BIOM. — nsamples","text":"","code":"nsamples(biom)"},{"path":"https://cmmr.github.io/rbiom/reference/nsamples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of samples in a BIOM. — nsamples","text":"biom BIOM object, returned read_biom.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/nsamples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of samples in a BIOM. — nsamples","text":"number samples present.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/nsamples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of samples in a BIOM. — nsamples","text":"","code":"library(rbiom)     nsamples(hmp50) #> [1] 50"},{"path":"https://cmmr.github.io/rbiom/reference/ntaxa.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of taxa in a BIOM. — ntaxa","title":"Number of taxa in a BIOM. — ntaxa","text":"Number taxa BIOM.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/ntaxa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of taxa in a BIOM. — ntaxa","text":"","code":"ntaxa(biom)"},{"path":"https://cmmr.github.io/rbiom/reference/ntaxa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of taxa in a BIOM. — ntaxa","text":"biom BIOM object, returned read_biom.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/ntaxa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of taxa in a BIOM. — ntaxa","text":"number taxa present.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/ntaxa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of taxa in a BIOM. — ntaxa","text":"","code":"library(rbiom)     ntaxa(hmp50) #> [1] 490"},{"path":"https://cmmr.github.io/rbiom/reference/phylogeny-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the phylogenetic tree. — phylogeny<-","title":"Set the phylogenetic tree. — phylogeny<-","text":"Set phylogenetic tree.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/phylogeny-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the phylogenetic tree. — phylogeny<-","text":"","code":"phylogeny(x) <- value"},{"path":"https://cmmr.github.io/rbiom/reference/phylogeny-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the phylogenetic tree. — phylogeny<-","text":"x BIOM object, returned read_biom. value phylo class object tip.labels matching  taxa_names(x). tip.labels taxa names, tree subset.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/phylogeny-set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the phylogenetic tree. — phylogeny<-","text":"","code":"if (FALSE) {     library(rbiom)          biom <- hmp50     phylogeny(biom) <- read_tree('path/to/newick.tre') }"},{"path":"https://cmmr.github.io/rbiom/reference/phylogeny.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the phylogenetic tree. — phylogeny","title":"Get the phylogenetic tree. — phylogeny","text":"Get phylogenetic tree.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/phylogeny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the phylogenetic tree. — phylogeny","text":"","code":"phylogeny(biom)"},{"path":"https://cmmr.github.io/rbiom/reference/phylogeny.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the phylogenetic tree. — phylogeny","text":"biom BIOM object, returned read_biom.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/phylogeny.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the phylogenetic tree. — phylogeny","text":"phylo class object tree biom.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/phylogeny.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the phylogenetic tree. — phylogeny","text":"","code":"library(rbiom)          summary(phylogeny(hmp50)) #>  #> Phylogenetic tree: phylogeny(hmp50)  #>  #>   Number of tips: 490  #>   Number of nodes: 489  #>   Branch lengths: #>     mean: 0.03276135  #>     variance: 0.001457162  #>     distribution summary: #>      Min.   1st Qu.    Median   3rd Qu.      Max.  #> 0.0000000 0.0099025 0.0224000 0.0439025 0.4581700  #>   No root edge. #>   First ten tip labels: EschC738  #>                         Unc92490 #>                         Unc02pjp #>                         Unc26984 #>                         Unc41900 #>                         AntBa370 #>                         AntSp625 #>                         MxlSpe11 #>                         FuoMancu #>                         PeuS1830 #>   No node labels."},{"path":"https://cmmr.github.io/rbiom/reference/plot_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a heatmap with tracks and dendrograms from any matrix. — plot_heatmap","title":"Create a heatmap with tracks and dendrograms from any matrix. — plot_heatmap","text":"Create heatmap tracks dendrograms matrix.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/plot_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a heatmap with tracks and dendrograms from any matrix. — plot_heatmap","text":"","code":"plot_heatmap(   mtx,   grid = list(label = \"Grid Value\", colors = \"imola\"),   tracks = NULL,   label = TRUE,   label_size = NULL,   rescale = \"none\",   trees = TRUE,   clust = \"complete\",   dist = \"euclidean\",   tree_height = NULL,   track_height = NULL,   ratio = 1,   legend = \"right\",   xlab.angle = \"auto\",   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/plot_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a heatmap with tracks and dendrograms from any matrix. — plot_heatmap","text":"mtx numeric matrix named rows columns. grid Color palette name, list entries label,  colors, range, bins, na.color, / guide. See Track Definitions section details. Default: list(label = \"Grid Value\", colors = \"imola\"). tracks List track definitions. See details . Default: NULL. label Label matrix rows columns. can supply list logical vector length two control row labels column  labels separately, example  label = c(rows = TRUE, cols = FALSE), simply  label = c(T, F). valid options \"rows\", \"cols\", \"\", \"bottom\", \"right\", \"none\". Default: TRUE. label_size font size use row column labels.  can supply numeric vector length two control row label sizes  column label sizes separately, example  c(rows = 20, cols = 8), simply c(20, 8). Default: NULL, computes:  pmax(8, pmin(20, 100 / dim(mtx))). rescale Rescale rows columns common min/max. Options: \"none\", \"rows\", \"cols\". Default: \"none\". trees Draw dendrogram rows (left) columns (top). can  supply list logical vector length two control row tree  column tree separately, example  trees = c(rows = T, cols = F), simply trees = c(T, F).  valid options \"rows\", \"cols\", \"\",  \"left\", \"top\", \"none\". Default: TRUE. clust Clustering algorithm reordering rows columns  similarity. can supply list character vector length two  control row column clustering separately, example  clust = c(rows = \"complete\", cols = NA), simply  clust = c(\"complete\", NA). Default: \"complete\". Options : FALSE NA -  Disable reordering. hclust object method name -  \"ward.D\",      \"ward.D2\", \"single\", \"complete\",      \"average\", \"mcquitty\", \"median\",      \"centroid\". dist Distance algorithm use reordering rows columns  similarity. can supply list character vector length two control row column clustering separately, example  dist = c(rows = \"euclidean\", cols = \"maximum\"), simply  dist = c(\"euclidean\", \"maximum\"). Default: \"euclidean\". Options : dist object method name -  \"euclidean\",      \"maximum\", \"manhattan\", \"canberra\",      \"binary\", \"minkowski\". tree_height, track_height height dendrogram annotation tracks multiples (fractions) smaller dimension grid cell size. Use numeric vector length two assign c(left, top) independently.  Default: NULL, computes: tree_height = sqrt(min(dim(mtx))), track_height = tree_height / 4. ratio Height/width ratio entire grid.  Default: 1 (square). legend place legend. Options : \"right\" \"bottom\". Default: \"right\". xlab.angle Angle labels bottom plot.  Options \"auto\", 0, 30, 90.  Default: \"auto\". ... Additional arguments pass ggplot2::theme(). example, labs.title = \"Plot Title\".","code":""},{"path":"https://cmmr.github.io/rbiom/reference/plot_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a heatmap with tracks and dendrograms from any matrix. — plot_heatmap","text":"ggplot2 plot. constructed ggplot command         attached attr(,'cmd'), underlying computed data         $data.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/plot_heatmap.html","id":"track-definitions","dir":"Reference","previous_headings":"","what":"Track Definitions","title":"Create a heatmap with tracks and dendrograms from any matrix. — plot_heatmap","text":"One colored tracks can placed left /top  heatmap grid visualize associated metadata values. following entries track definitions understood: values -  metadata values. unnamed, order must match matrix. range -  c(min,max) use scale values. label -  Label track. Defaults name list element. side -  Options \"top\" (default) \"left\". colors -  pre-defined palette name custom set colors map . na.color -  color use NA values. bins -  Bin gradient many bins/steps. guide -  list arguments guide_colorbar() guide_legend(). built-color palettes colorblind-friendly. Categorical palette names: \"okabe\", \"carto\", \"r4\",  \"polychrome\", \"tol\", \"bright\", \"light\",  \"muted\", \"vibrant\", \"tableau\", \"classic\",  \"alphabet\", \"tableau20\", \"kelly\", \"fishy\". Numeric palette names: \"reds\", \"oranges\", \"greens\",  \"purples\", \"grays\", \"acton\", \"bamako\",  \"batlow\", \"bilbao\", \"buda\", \"davos\",  \"devon\", \"grayC\", \"hawaii\", \"imola\",  \"lajolla\", \"lapaz\", \"nuuk\", \"oslo\",  \"tokyo\", \"turku\", \"bam\", \"berlin\",  \"broc\", \"cork\", \"lisbon\", \"roma\",  \"tofino\", \"vanimo\", \"vik\".","code":"## Categorical ---------------------------- cat_vals = sample(c(\"Male\", \"Female\"), 10, replace = TRUE) tracks   = list('Sex' = cat_vals) tracks   = list('Sex' = list('values' = cat_vals, 'colors' = \"bright\")) tracks   = list('Sex' = list(   'values' = cat_vals,    'colors' = c('Male' = \"blue\", 'Female' = \"red\")) )  ## Numeric -------------------------------- num_vals = sample(25:40, 10, replace = TRUE) tracks   = list('Age' = num_vals) tracks   = list('Age' = list('values' = num_vals, 'colors' = \"greens\")) tracks   = list('Age' = list('values' = num_vals, 'range' = c(0,50))) tracks   = list('Age' = list(   'label'  = \"Age (Years)\",   'values' = num_vals,    'colors' = c(\"azure\", \"darkblue\", \"darkorchid\") ))  ## Multiple Tracks ------------------------ tracks = list('Sex' = cat_vals, 'Age' = num_vals) tracks = list(   list('label' = \"Sex\", values' = cat_vals, 'colors' = \"bright\"),   list('label' = \"Age\", values' = num_vals, 'colors' = \"greens\") )    plot_heatmap(matrix(sample(1:50), ncol=10), tracks = tracks)"},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/plot_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a heatmap with tracks and dendrograms from any matrix. — plot_heatmap","text":"","code":"library(rbiom)          set.seed(123)     mtx <- matrix(runif(5*8), nrow = 5, dimnames = list(LETTERS[1:5], letters[1:8]))          plot_heatmap(mtx)      plot_heatmap(mtx, grid=\"oranges\")      plot_heatmap(mtx, grid=list(colors = \"oranges\", label = \"Some %\", bins = 5))           tracks <- list(       'Number' = sample(1:ncol(mtx)),       'Person' = list(         values = factor(sample(c(\"Alice\", \"Bob\"), ncol(mtx), TRUE)),         colors = c('Alice' = \"purple\", 'Bob' = \"darkcyan\") ),       'State' = list(         side   = \"left\",         values = sample(c(\"TX\", \"OR\", \"WA\"), nrow(mtx), TRUE),         colors = \"bright\" )     )          plot_heatmap(mtx, tracks=tracks)"},{"path":"https://cmmr.github.io/rbiom/reference/print.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize the contents of a BIOM object — print","title":"Summarize the contents of a BIOM object — print","text":"Summarize contents BIOM object","code":""},{"path":"https://cmmr.github.io/rbiom/reference/print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize the contents of a BIOM object — print","text":"","code":"# S3 method for BIOM print(x, ...)"},{"path":"https://cmmr.github.io/rbiom/reference/print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize the contents of a BIOM object — print","text":"x BIOM object, returned read_biom. ... used.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize the contents of a BIOM object — print","text":"NULL (invisibly)","code":""},{"path":"https://cmmr.github.io/rbiom/reference/print.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize the contents of a BIOM object — print","text":"","code":"library(rbiom)          print(hmp50) #> Human Microbiome Project - 50 Sample Demo (2021-07-01) #>      50 Samples:  (HMP01, HMP02, HMP03, HMP04, HMP05, HM...) #>     490 Taxa:     (UncO2713, UncO4101, AnmMass2, PreBivi...) #>       6 Ranks:    (Kingdom, Phylum, Class, Order, Family...) #>       6 Metadata: (Age, BMI, Body Site, Experiment Cente...) #>         Tree:     Present #>"},{"path":"https://cmmr.github.io/rbiom/reference/rarefy.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset counts so that all samples have the same number of observations. — rarefy","title":"Subset counts so that all samples have the same number of observations. — rarefy","text":"Subset counts samples number observations.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rarefy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset counts so that all samples have the same number of observations. — rarefy","text":"","code":"rarefy(biom, depth = NULL, seed = 0)"},{"path":"https://cmmr.github.io/rbiom/reference/rarefy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset counts so that all samples have the same number of observations. — rarefy","text":"biom matrix, simple_triplet_matrix, BIOM  object, returned read_biom. matrices, rows columns assumed taxa samples, respectively. depth number observations keep, per sample. set NULL, depth automatically selected. Samples  fewer number observations dropped.  called data non-integer abundances, values re-scaled  integers 1 depth sum  depth. seed integer use seeding random number generator. need create different random rarefactions  BIOM object, set seed value different number  time.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rarefy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset counts so that all samples have the same number of observations. — rarefy","text":"matrix, simple_triplet_matrix, BIOM object, depending input object type. type object          provided type returned. retained          observations randomly selected, based seed value derived          BIOM object. Therefore, rarefying biom          depth always produce resultant rarefaction.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rarefy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset counts so that all samples have the same number of observations. — rarefy","text":"","code":"library(rbiom)      range(slam::col_sums(hmp50$counts)) #> [1]   182 22117      biom <- rarefy(hmp50, depth=1000)     range(slam::col_sums(biom$counts)) #> [1] 1000 1000"},{"path":"https://cmmr.github.io/rbiom/reference/rare_corrplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize rarefaction curves with scatterplots and trendlines. — rare_corrplot","title":"Visualize rarefaction curves with scatterplots and trendlines. — rare_corrplot","text":"Visualize rarefaction curves scatterplots trendlines.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rare_corrplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize rarefaction curves with scatterplots and trendlines. — rare_corrplot","text":"","code":"rare_corrplot(   biom,   metric = \"OTUs\",   depths = NULL,   points = FALSE,   color.by = NULL,   facet.by = NULL,   limit.by = NULL,   ci = 95,   rline = NULL,   caption = TRUE,   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/rare_corrplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize rarefaction curves with scatterplots and trendlines. — rare_corrplot","text":"biom BIOM object, returned read_biom. metric Alpha diversity metric(s) use. Options :  \"OTUs\", \"Shannon\", \"Chao1\", \"Simpson\",  /\"InvSimpson\". Default: \"OTUs\". depths Rarefaction depths show plot. Passed adiv_table. default, \"multi_even\", uses heuristic pick 10 evenly spaced depths. points Overlay scatter plot. Default: FALSE. color., facet., limit.Metadata columns use aesthetics  partitioning. See details. Default: NULL ci confidence interval display around fitted curve. Set FALSE hide confidence interval. Default: 95. rline draw horizontal line plot, intended show particular rarefaction depth. Set TRUE show  auto-selected rarefaction depth NULL show line. Default: NULL. caption Display information method used trendline fitting beneath plot. Default: TRUE. ... Additional parameters pass along ggplot2  functions. Prefix parameter name either p.,  r./v., s. ensure gets passed ()  geom_point, vline,  geom_smooth, respectively. instance,  p.size = 2 ensures points size set  2.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rare_corrplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize rarefaction curves with scatterplots and trendlines. — rare_corrplot","text":"ggplot2 plot. computed data points statistics          attached attr(p, 'data') attr(p, 'stats'),          respectively.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rare_corrplot.html","id":"aesthetics-and-partitions","dir":"Reference","previous_headings":"","what":"Aesthetics and Partitions","title":"Visualize rarefaction curves with scatterplots and trendlines. — rare_corrplot","text":"Metadata can used flexibly subset, partition, apply aesthetics  creating plot. Common use cases provided . thorough  documentation available https://cmmr.github.io/rbiom. color.- metadata column. (Max 1) facet.- categorical metadata column(s). limit.- metadata column(s). built-color palettes colorblind-friendly. available categorical palette names : \"okabe\", \"carto\",  \"r4\", \"polychrome\", \"tol\", \"bright\",  \"light\", \"muted\", \"vibrant\", \"tableau\",  \"classic\", \"alphabet\", \"tableau20\", \"kelly\",  \"fishy\". available numeric palette names : \"reds\", \"oranges\",  \"greens\", \"purples\", \"grays\", \"acton\",  \"bamako\", \"batlow\", \"bilbao\", \"buda\",  \"davos\", \"devon\", \"grayC\", \"hawaii\",  \"imola\", \"lajolla\", \"lapaz\", \"nuuk\",  \"oslo\", \"tokyo\", \"turku\", \"bam\",  \"berlin\", \"broc\", \"cork\", \"lisbon\",  \"roma\", \"tofino\", \"vanimo\", \"vik\"","code":"## Colors ----------------------------   color.by = \"Body Site\"   color.by = list('Body Site' = \"bright\")   color.by = list('Body Site' = c(\"Stool\", \"Saliva\"))   color.by = list('Body Site' = list('values' = c(\"Stool\", \"Saliva\"), 'palette' = \"bright\"))   color.by = list('Body Site' = c('Stool' = \"blue\", 'Saliva' = \"green\"))      ## Facets ----------------------------   facet.by = \"Body Site\"   facet.by = c(\"Body Site\", \"Sex\")   facet.by = list('Body Site' = c(\"Stool\", \"Saliva\"), \"Sex\")      ## Limits ----------------------------   limit.by = list('Sex' = \"Male\", 'Age' = c(20,40))   limit.by = list('Body Site' = c(\"Saliva\", \"Anterior nares\"), 'Age' = c(NA,35))"},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/rare_corrplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize rarefaction curves with scatterplots and trendlines. — rare_corrplot","text":"","code":"library(rbiom)          rare_corrplot(hmp50, color.by=\"Body Site\", metric=c(\"shannon\", \"otus\"), facet.by=\"Sex\")"},{"path":"https://cmmr.github.io/rbiom/reference/rare_multiplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Combines rare_corrplot and depths_barplot into a single figure. — rare_multiplot","title":"Combines rare_corrplot and depths_barplot into a single figure. — rare_multiplot","text":"Combines rare_corrplot depths_barplot single figure.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rare_multiplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combines rare_corrplot and depths_barplot into a single figure. — rare_multiplot","text":"","code":"rare_multiplot(   biom,   rline = TRUE,   metric = \"OTUs\",   depths = NULL,   points = FALSE,   color.by = NULL,   facet.by = NULL,   limit.by = NULL,   ci = 95,   caption = FALSE,   labels = FALSE,   trans = \"log10\",   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/rare_multiplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combines rare_corrplot and depths_barplot into a single figure. — rare_multiplot","text":"biom BIOM object, returned read_biom. rline draw vertical line plot, intended show particular rarefaction depth. Default: TRUE (line). metric Alpha diversity metric(s) use. Options :  \"OTUs\", \"Shannon\", \"Chao1\", \"Simpson\",  /\"InvSimpson\". Default: \"OTUs\". depths Rarefaction depths show plot. Passed adiv_table. default, NULL, uses heuristic pick optimal depths. points Overlay scatter plot. Default: FALSE. color., facet., limit.Metadata columns use data  partitioning. Default: NULL ci confidence interval display around fitted curve. Set FALSE hide confidence interval. Default: 95. caption Display information method used trendline fitting beneath plot. Default: FALSE. labels Show sample names bar. Default: FALSE. trans Y-axis transformation. Options \"log10\"  NULL.  Default: \"log10\". ... Additional parameters pass along ggplot2  functions. Prefix parameter name either p.,  r./v., s. ensure gets passed ()  geom_point, vline,  geom_smooth, respectively. instance,  p.size = 2 ensures points size set  2.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rare_multiplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combines rare_corrplot and depths_barplot into a single figure. — rare_multiplot","text":"ggplot2 plot. computed data points statistics          attached attr(p, 'data') attr(p, 'stats'),          respectively.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/rare_multiplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combines rare_corrplot and depths_barplot into a single figure. — rare_multiplot","text":"","code":"library(rbiom)          rare_multiplot(hmp50, color.by=\"Body Site\")"},{"path":"https://cmmr.github.io/rbiom/reference/rbiom.html","id":null,"dir":"Reference","previous_headings":"","what":"rbiom: Read/Write, Transform, and Summarize BIOM Data — rbiom","title":"rbiom: Read/Write, Transform, and Summarize BIOM Data — rbiom","text":"toolkit working Biological Observation Matrix (BIOM) files. Features include reading/writing BIOM formats, rarefaction, alpha diversity, beta diversity (including UniFrac), summarizing counts  taxonomic level, sample subsetting. Standalone functions  reading, writing, subsetting phylogenetic trees also provided.  CPU intensive operations encoded C multi-thread support.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom.html","id":"multithreading","dir":"Reference","previous_headings":"","what":"Multithreading","title":"rbiom: Read/Write, Transform, and Summarize BIOM Data — rbiom","text":"Many rbiom functions support multithreading: default behavior function run many cores available local compute environment. wish limit number simultaneous threads, set RcppParallel's numThreads option. instance:","code":"RcppParallel::setThreadOptions(numThreads = 4)"},{"path":"https://cmmr.github.io/rbiom/reference/read_biom.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts counts, metadata, taxonomy, and phylogeny from a biom file. — read_biom","title":"Extracts counts, metadata, taxonomy, and phylogeny from a biom file. — read_biom","text":"Extracts counts, metadata, taxonomy, phylogeny biom file.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/read_biom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts counts, metadata, taxonomy, and phylogeny from a biom file. — read_biom","text":"","code":"read_biom(src, tree = \"auto\", prune = cleanup, cleanup = FALSE)"},{"path":"https://cmmr.github.io/rbiom/reference/read_biom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts counts, metadata, taxonomy, and phylogeny from a biom file. — read_biom","text":"src Input data either file path, URL, JSON string. read_biom can read BIOM files formatted according version 1.0 (JSON) 2.1 (HDF5) specifications well classical tabular format. URLs must begin http://, https://, ftp://, ftps://. JSON files must { first non-whitespace character. Compressed (gzip bzip2) BIOM files also supported. NOTE: read HDF5 formatted BIOM files, BioConductor R package rhdf5 must  installed. tree default value auto read tree  BIOM file specified src, present. value TRUE  , generate error message tree  present. Setting tree=FALSE return BIOM object  without tree data. may also provide file path, URL, Newick string load tree data final BIOM  object. prune samples taxa zero observations discarded? (Default: cleanup) cleanup Renames ambiguous taxons removes leading underscores.  Also converts character metadata factors dates based  heuristics. (Default: FALSE)","code":""},{"path":"https://cmmr.github.io/rbiom/reference/read_biom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts counts, metadata, taxonomy, and phylogeny from a biom file. — read_biom","text":"BIOM class object containing parsed data. object     can treated list following named elements:  counts numeric slam sparse matrix observation         counts. Taxa (OTUs) rows samples columns. metadata data frame containing embedded metadata.         Row names sample IDs. taxonomy Character matrix taxonomic names, given.         Row names taxa (OTU) IDs. Column rows named Kingdom,         Phylum, Class, Order, Family, Genus, Species, Strain,         TaxLvl.1, TaxLvl.2, ... , TaxLvl.N 8 levels         taxonomy encoded biom file. phylogeny object class phylo defining         phylogenetic relationships taxa. Although         official specification BIOM includes phylogenetic trees         BIOM version 2.1, BIOM version 1.0 file includes         phylogeny entry newick data, loaded         well. ape package additional functions         working phylo objects. sequences named character vector, names         taxonomic identifiers values sequences         represent. values part official BIOM         specification, read written defined. info list attributes defined BIOM file,         id, type, format, format_url,         generated_by, date, matrix_type,         matrix_element_type, Comment, shape  metadata, taxonomy, phylogeny optional     components BIOM file specification therefore empty     returned object provided BIOM file.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/read_biom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts counts, metadata, taxonomy, and phylogeny from a biom file. — read_biom","text":"","code":"library(rbiom)      infile <- system.file(\"extdata\", \"hmp50.bz2\", package = \"rbiom\")     biom <- read_biom(infile)      summary(biom) #>           Length Class                 Mode      #> counts       6   simple_triplet_matrix list      #> metadata     6   data.frame            list      #> taxonomy  2940   -none-                character #> phylogeny    4   phylo                 list      #> sequences  490   -none-                character #> info         9   -none-                list           # Taxa Abundances     as.matrix(biom$counts[1:4,1:4]) #>          HMP01 HMP02 HMP03 HMP04 #> UncO2713     0     0     0     0 #> UncO4101     1     5     6    18 #> AnmMass2     0     0     0     0 #> PreBivi6     0     0     0     0      top5 <- names(head(rev(sort(slam::row_sums(biom$counts))), 5))     biom$taxonomy[top5,c('Family', 'Genus')] #>          Family               Genus               #> Unc01yki \"Lactobacillaceae\"   \"Lactobacillus\"     #> Unc53100 \"Streptococcaceae\"   \"Streptococcus\"     #> LtbAci52 \"Lactobacillaceae\"   \"Lactobacillus\"     #> CnbTube3 \"Corynebacteriaceae\" \"Corynebacterium 1\" #> Unc02qsf \"Staphylococcaceae\"  \"Staphylococcus\"        as.matrix(biom$counts[top5, 1:6]) #>          HMP01 HMP02 HMP03 HMP04 HMP05 HMP06 #> Unc01yki     0     0     0     0     0     0 #> Unc53100  1083   543   301   223  2672   748 #> LtbAci52     0     0     0     0     0     0 #> CnbTube3     0     0     0     0     0     0 #> Unc02qsf     0     0     0     0     0     0      # Metadata     table(biom$metadata$Sex, biom$metadata$`Body Site`) #>          #>          Anterior nares Buccal mucosa Mid vagina Saliva Stool #>   Female              5             5         10      5     5 #>   Male                5             5          0      5     5     sprintf(\"Mean age: %.1f\", mean(biom$metadata$Age)) #> [1] \"Mean age: 27.8\"      # Phylogenetic tree     tree <- biom$phylogeny     top5.tree <- rbiom::subtree(tree, top5)     ape::plot.phylo(top5.tree)"},{"path":"https://cmmr.github.io/rbiom/reference/read_fasta.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a fasta file into a named character vector. — read_fasta","title":"Parse a fasta file into a named character vector. — read_fasta","text":"Parse fasta file named character vector.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/read_fasta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a fasta file into a named character vector. — read_fasta","text":"","code":"read_fasta(file, ids = NULL)"},{"path":"https://cmmr.github.io/rbiom/reference/read_fasta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a fasta file into a named character vector. — read_fasta","text":"file file fasta-formatted sequences. Can optionally compressed gzip, bzip2, xz, lzma. ids Character vector IDs retrieve. default, NULL, retrieve everything.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/read_fasta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a fasta file into a named character vector. — read_fasta","text":"named character vector names fasta headers values sequences.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/read_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a newick formatted phylogenetic tree. — read_tree","title":"Read a newick formatted phylogenetic tree. — read_tree","text":"phylogenetic tree required computing UniFrac distance matrices. can load tree either file providing tree string directly. tree must Newick format, also known parenthetic format New Hampshire format.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/read_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a newick formatted phylogenetic tree. — read_tree","text":"","code":"read_tree(src)"},{"path":"https://cmmr.github.io/rbiom/reference/read_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a newick formatted phylogenetic tree. — read_tree","text":"src Input data either file path, URL, Newick string. URLs  must begin http://, https://, ftp://,  ftps://. Newick strings must ( first  non-whitespace character. Compressed (gzip bzip2) Newick files  also supported.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/read_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a newick formatted phylogenetic tree. — read_tree","text":"phylo class object representing tree.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/read_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a newick formatted phylogenetic tree. — read_tree","text":"","code":"library(rbiom)          infile <- system.file(\"extdata\", \"newick.tre\", package = \"rbiom\")     tree <- read_tree(infile)          tree <- read_tree(\"         (t9:0.99,((t5:0.87,t2:0.89):0.51,(((t10:0.16,(t7:0.83,t4:0.96)         :0.94):0.69,(t6:0.92,(t3:0.62,t1:0.85):0.54):0.23):0.74,t8:0.1         2):0.43):0.67);\")"},{"path":"https://cmmr.github.io/rbiom/reference/repair.html","id":null,"dir":"Reference","previous_headings":"","what":"Run after manually editing a BIOM object's content. — repair","title":"Run after manually editing a BIOM object's content. — repair","text":"Run manually editing BIOM object's content.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/repair.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run after manually editing a BIOM object's content. — repair","text":"","code":"repair(biom, prune = TRUE, fast = FALSE)"},{"path":"https://cmmr.github.io/rbiom/reference/repair.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run after manually editing a BIOM object's content. — repair","text":"biom BIOM object repair. prune Remove taxa samples zero observations. (Default: TRUE) fast subsetting phylogenetic tree sequences  skipped? slow steps often necessary. (Default: FALSE)","code":""},{"path":"https://cmmr.github.io/rbiom/reference/repair.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run after manually editing a BIOM object's content. — repair","text":"BIOM object.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/sample_names-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the sample names. — sample_names<-","title":"Set the sample names. — sample_names<-","text":"Set sample names.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/sample_names-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the sample names. — sample_names<-","text":"","code":"sample_names(x) <- value"},{"path":"https://cmmr.github.io/rbiom/reference/sample_names-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the sample names. — sample_names<-","text":"x BIOM object, returned read_biom. value character vector. named character vector can used change sample names.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/sample_names-set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the sample names. — sample_names<-","text":"","code":"library(rbiom)          biom <- hmp50          head(sample_names(biom)) #> [1] \"HMP01\" \"HMP02\" \"HMP03\" \"HMP04\" \"HMP05\" \"HMP06\"          sample_names(biom) <- sub('HMP', 'Sample_', sample_names(biom))     head(sample_names(biom)) #> [1] \"Sample_01\" \"Sample_02\" \"Sample_03\" \"Sample_04\" \"Sample_05\" \"Sample_06\"          sample_names(biom) <- c('Sample_02' = 'One', 'Sample_03' = 'Two') #> Error in `.rowNamesDF<-`(x, value = value): invalid 'row.names' length     head(sample_names(biom)) #> [1] \"Sample_01\" \"Sample_02\" \"Sample_03\" \"Sample_04\" \"Sample_05\" \"Sample_06\""},{"path":"https://cmmr.github.io/rbiom/reference/sample_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the sample names. — sample_names","title":"Get the sample names. — sample_names","text":"Get sample names.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/sample_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the sample names. — sample_names","text":"","code":"sample_names(biom)"},{"path":"https://cmmr.github.io/rbiom/reference/sample_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the sample names. — sample_names","text":"biom BIOM object, returned read_biom.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/sample_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the sample names. — sample_names","text":"character vector sample IDs / names biom.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/sample_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the sample names. — sample_names","text":"","code":"library(rbiom)          sample_names(hmp},{"path":"https://cmmr.github.io/rbiom/reference/sample_sums.html","id":null,"dir":"Reference","previous_headings":"","what":"Sum the observations in each sample. — sample_sums","title":"Sum the observations in each sample. — sample_sums","text":"Sum observations sample.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/sample_sums.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sum the observations in each sample. — sample_sums","text":"","code":"sample_sums(biom, long = FALSE, md = FALSE)"},{"path":"https://cmmr.github.io/rbiom/reference/sample_sums.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sum the observations in each sample. — sample_sums","text":"biom BIOM object, returned read_biom.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/sample_sums.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sum the observations in each sample. — sample_sums","text":"named numeric vector number observations          sample. names sample IDs.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/sample_sums.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sum the observations in each sample. — sample_sums","text":"","code":"library(rbiom)          sample_sums(hmp50) %>% sort() %>% head() #> HMP36 HMP24 HMP03 HMP02 HMP42 HMP17  #>   182  1183  1353  1371  1489  1579           hist(sample_sums(hmp50))"},{"path":"https://cmmr.github.io/rbiom/reference/select.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduce samples to a specific list — select","title":"Reduce samples to a specific list — select","text":"Reduce samples specific list","code":""},{"path":"https://cmmr.github.io/rbiom/reference/select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduce samples to a specific list — select","text":"","code":"select(   biom,   samples = NULL,   nTop = NULL,   nRandom = NULL,   seed = 0,   fast = FALSE )"},{"path":"https://cmmr.github.io/rbiom/reference/select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reduce samples to a specific list — select","text":"biom BIOM object, returned read_biom. Objects class matrix simple_triplet_matrix also accepted. samples Sample names, indices, logical vector identifying samples keep. latter two based order sample names given colnames(biom$counts). nTop Selects number samples, taking sample observations first, sample second-observations, etc. Ties randomly ordered. nTop higher  number samples dataset, entire dataset returned.  See note. nRandom Randomly selects number samples. higher number samples dataset, entire dataset returned. See note. seed Random seed, used selecting nRandom samples. fast subsetting phylogenetic tree sequences         skipped? slow steps often necessary. (Default: FALSE) Note: Generally, specify one filters: samples, nTop, nRandom. However, specifying multiple filters allowed; applied order listed .","code":""},{"path":"https://cmmr.github.io/rbiom/reference/select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reduce samples to a specific list — select","text":"object class biom, subsetted requested.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reduce samples to a specific list — select","text":"","code":"library(rbiom)          ex1 <- select(hmp50, c('HMP14', 'HMP22', 'HMP03'))     ex2 <- select(hmp50, c(32, 11, 28, 16, 46, 5))     ex3 <- select(hmp50, 1:50 %% 6 == 0)     ex4 <- select(hmp50, nRandom = 10)     ex5 <- select(hmp50, nTop = 5)     ex6 <- select(hmp50, samples = 10:40, nTop = 20, nRandom = 10)"},{"path":"https://cmmr.github.io/rbiom/reference/sequences-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set nucleotide sequences associated with each taxonomic identifier. — sequences<-","title":"Set nucleotide sequences associated with each taxonomic identifier. — sequences<-","text":"Set nucleotide sequences associated taxonomic identifier.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/sequences-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set nucleotide sequences associated with each taxonomic identifier. — sequences<-","text":"","code":"sequences(x) <- value"},{"path":"https://cmmr.github.io/rbiom/reference/sequences-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set nucleotide sequences associated with each taxonomic identifier. — sequences<-","text":"x BIOM object, returned read_biom. value named character vector. Names must match taxa_names(x).","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/sequences-set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set nucleotide sequences associated with each taxonomic identifier. — sequences<-","text":"","code":"if (FALSE) {     library(rbiom)          sequences(biom) <- read_fasta('path/to/sequences.fa')     sequences(biom) <- c(OTU1 = 'ATCGGGTA', OTU2 = 'GGCATTAGC') }"},{"path":"https://cmmr.github.io/rbiom/reference/sequences.html","id":null,"dir":"Reference","previous_headings":"","what":"Nucleotide sequences associated with each taxonomic identifier. — sequences","title":"Nucleotide sequences associated with each taxonomic identifier. — sequences","text":"Nucleotide sequences associated taxonomic identifier.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/sequences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nucleotide sequences associated with each taxonomic identifier. — sequences","text":"","code":"sequences(biom)"},{"path":"https://cmmr.github.io/rbiom/reference/sequences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nucleotide sequences associated with each taxonomic identifier. — sequences","text":"biom BIOM object, returned read_biom.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/sequences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nucleotide sequences associated with each taxonomic identifier. — sequences","text":"named character vector sequences biom. data           present, returns NULL.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/sequences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nucleotide sequences associated with each taxonomic identifier. — sequences","text":"","code":"library(rbiom)          sequences(hmpncO2713  #>           \"TGAGGAATATTGGTCAATGGACGCAAGTCTGAACCAGCCATGCCGCGTGCAGGAAGACGGCTCTATGAGTTGTAAACTGCTTTTGTACGAGGGTAAACTCACCTACGTGTAGGTGACTGAAAGTATCGTACGAATAAGGATCGGCTAACTCCGTGCCAGCAGCCGCGGTAATACGGAGGATTCAAGCGTTATCCGGATTTATTGGGTTTAAAGGGTGCGTAGGCGGTTTGATAAGTTAGAGGTGAAATCCCGGGGCTTAACTCCGGAACTGCCTCTAATACTGTTAGACTAGAGAGTAGTTGCGGTAGGCGGAATGTATGGTGTAGCGGTGAAATGCTTAGAGATCATACAGAACACCGATTGCGAAGGCAGCTTACCAAACTATATCTGACGTTGAGGCACGAAAGCGTGGGGAGCAAACAGGATTAGATACCCTGGTAGTCCACGCAGTAAACGATGATAACTCGTTGTCGGCGATACACAGTCGGTGACTAAGCGAAAGCGATAAGTTATCCACCTGGGGAGTACGTTCGCAAGAATGAA\"  #>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    UncO4101  #>                           \"TGGGGAATATTGGACAATGGGGGAAACCCTGATCCAGCGACGCCGCGTGAGTGAAGAAGTATTTCGGTATGTAAAGCTCTATCAGCAGGGAAGAAAATGACGGTACCTGACTAAGAAGCCCCGGCTAACTACGTGCCAGCAGCCGCGGTAATACGTAGGGGGCAAGCGTTATCCGGATTTACTGGGTGTAAAGGGAGCGCAGACGGCGAAGCAAGTCTGAAGTGAAATGCATGGGCTCAACCCATGAATTGCTTTGGAAACTGTTTGGCTTGAGTGTCGGAGGGGTAAGCGGAATTCCTAGTGTAGCGGTGAAATGCGTAGATATTAGGAGGAACACCGGAGGCGAAGGCGGCTTACTGGACGACAACTGACGTTGAGGCTCGAAGGCGTGGGGAGCAAACAGGATTAGATACCCTGGTAGTCCACGCAGTAAACGATGAATACTTGGTGTCGGGGAGGTAAACTCTTCGGTGCCGCAAGCAAACGCATTAAGTATTCCACCTGGGGAGTACGTTCGCAAGAATGAA\"  #>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    AnmMass2  #> \"TGGGGAATATTGCACAATGGGCGCAAGCCTGATGCAGCGACGCCGCGTGAGGGATGGAGGCCTTCGGGTTGTGAACCTCTTTCGCCAGTGAAGAAGGTCCTGCTCTTTGTGGTGGGGTTGACGGTAGCTGGGTTAATGAAGCGCCGGCTAACTACGTGCCAGCAGCCGCGGTAATACGTAGGGCGCGAGCGTTGTCCGGAATTATTGGGCGTAAAGGGCTTGTAGGCGGCTGGTCGCGTCTGCCGTGAAATCCTCTGGCTCAGCTGGGGGCGTGCGGTGGGTACGGGCTGGCTTGAGTGCGGTAGGGGAGACTGGAACTCCTGGTGTAGCGGTGGAATGCGCAGATATCAGGAGGAACACCGGTGGCGAAGGCGGGTCTCTGGGCCGTTACTGACGCTGAGGAGCGAAAGCGTGGGGAGCGAACAGGATTAGATACCCTGGTAGTCCACGCTGTAAACGTTGGGCACTAGGTGTGGGGGGCCTTTTCCGGGTTTTCCGCGCCGTAGCTAACGCATTAAGTGCCCCGCCTGGGGAGTACGGCCGCAAGGCTAAA\"  #>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    PreBivi6  #>            \"TGAGGAATATTGGTCAATGGACGCAAGTCTGAACCAGCCAAGTAGCGTGCAGGATGACGGCCCTATGGGTTGTAAACTGCTTTTATATGGGGATAAAGTGGGGAACGTGTTCCCTTTTGCAGGTACCATATGAATAAGGACCGGCTAATTCCGTGCCAGCAGCCGCGGTAATACGGAAGGTTCGGGCGTTATCCGGATTTATTGGGTTTAAAGGGAGCGTAGGCCGTTTGGTAAGCGTGTTGTGAAATGTAGGAGCTCAACTTCTAGATTGCAGCGCGAACTGTCAGACTTGAGTGCGCACAACGTAGGCGGAATTCATGGTGTAGCGGTGAAATGCTTAGATATCATGAAGAACTCCGATTGCGAAGGCAGCTTACGGGAGCGCAACTGACGCTGAAGCTCGAAGGTGCGGGTATCGAACAGGATTAGATACCCTGGTAGTCCGCACAGTAAACGATGGATGCCCGCTGTTAGCACCTAGTGTTAGCGGCTAAGCGAAAGCATTAAGCATCCCACCTGGGGAGTACGCCGGCAACGGTGAA\"           # Write to a compressed fasta file in the temporary directory:     seqs <- sequences(hmp50)     conn <- bzfile(file.path(tempdir(), \"Sequences.fa.bz2\"), \"w\")     cat(sprintf(\">%s\\n%s\", names(seqs), seqs), file=conn, sep=\"\\n\")     close(conn)          # You can also use the write_fasta function for this task:     write_fasta(hmp50, file.path(tempdir(), \"Sequences.fa.gz\"))"},{"path":"https://cmmr.github.io/rbiom/reference/stats_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute p-values for data vs metadata. — stats_table","title":"Compute p-values for data vs metadata. — stats_table","text":"Compute p-values data vs metadata.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/stats_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute p-values for data vs metadata. — stats_table","text":"","code":"stats_table(   biom,   x,   y,   by = NULL,   adj = \"fdr\",   pairwise = FALSE,   weighted = TRUE,   digits = 3,   y.pos = NULL,   y.pos.facet = \"Metric\",   adj.n = NULL )"},{"path":"https://cmmr.github.io/rbiom/reference/stats_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute p-values for data vs metadata. — stats_table","text":"biom BIOM object, returned read_biom.  Alternatively, data.frame column names expected x,  y, . x metadata column name category use comparisons. y character vector values one following  sets: Alpha Diversity Metrics (one ) OTUs, Shannon, Chao1, Simpson,        /InvSimpson. may also set        y = \"Diversity\" get five metrics. Beta Diversity Metrics (one ) manhattan, euclidean, bray-curtis,        jaccard, unifrac. Use combination       weighted parameter. Metadata column names can        prefixed == != limit distance       calculations within , respectively,        categories. See examples . Setting        y = \"Distance\" use unifrac        phylogenetic tree present, bray-curtis otherwise. Taxa Abundances (one ) Kingdom, Phylum, Class, Order,        Family, Genus, Species, Strain,        OTU. Supported ranks vary biom. Run       taxa_ranks(biom) see available options.        Specifying y = \"Taxa\" default precise        rank possible. Additional metadata columns group (e.g. facets plot). adj Adjustment use multiple comparisons. See  stats::p.adjust.methods available options.  Default: fdr. pairwise FALSE (default), one p-value generated  group, 1 p-value = NULL.  TRUE, unique values x compared pairwise  . weighted TRUE(default), run beta diversity metrics  weighted mode. Set FALSE use unweighted mode. digits Round p-values many significant figures (default 3).  Set NULL disable rounding. y.pos Add extra column results indicate upper  value group. Added ggpubr::geom_bracket(). Options  NULL y.pos column (default), max  maximum value, box box plot's whisker upper bound,  violin highest point violin plot. adj.n Manually set number comparisons correct . set know ! Default: NULL","code":""},{"path":"https://cmmr.github.io/rbiom/reference/stats_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute p-values for data vs metadata. — stats_table","text":"data.frame columns .p.val, .adj.p,  adj.sig, well columns tracking x, y,          categories.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/stats_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute p-values for data vs metadata. — stats_table","text":"","code":"library(rbiom)          biom <- rarefy(hmp50)     biom <- subset(biom, `Body Site` %in% c('Saliva', 'Stool', 'Buccal mucosa'))                 # Overall, do the three body sites different have different Shannon     #  diversity indices (alpha diversity)? - YES     stats_table(biom, x = \"Body Site\", y = \"Shannon\") #>    n           Test   .p.val   .adj.p #> 1 29 Kruskal-Wallis 4.68e-05 4.68e-05          # Which body sites have the most different Shannon diversity     #  indices? - Buccal mucosa vs. Saliva     stats_table(biom, x = \"Body Site\", y = \"Shannon\", pairwise = TRUE) #>    n         Test Group1        Group2   .p.val   .adj.p #> 1 20 Mann-Whitney Saliva Buccal mucosa 2.17e-05 0.000065 #> 2 19 Mann-Whitney  Stool Buccal mucosa 1.45e-03 0.002180 #> 3 19 Mann-Whitney Saliva         Stool 2.99e-03 0.002990          # Do males or females have more alpha diversity variation among      #  body sites? - Females     stats_table(biom, x = \"Body Site\", y = \"Shannon\", by = \"Sex\") #>      Sex  n           Test  .p.val  .adj.p #> 1 Female 15 Kruskal-Wallis 0.00374 0.00747 #> 2   Male 14 Kruskal-Wallis 0.00821 0.00821          # Which phylum is most different overall between males and females?     #  - Saccharibacteria     stats_table(biom, x = \"Sex\", y = \"Phylum\") %>% head() #>     n         Test .p.val .adj.p #> 1 348 Mann-Whitney  0.242  0.242          # Which phyla is the most differentially abundant between males and      #  females on a particular body site? - Tenericutes in Saliva     stats_table(biom, x = \"Sex\", y = \"Phylum\", by = \"Body Site\") %>% head() #>       Body Site   n         Test .p.val .adj.p #> 1        Saliva 120 Mann-Whitney  0.232  0.695 #> 2 Buccal mucosa 120 Mann-Whitney  0.819  0.909 #> 3         Stool 108 Mann-Whitney  0.909  0.909          # Overall, are males and females characterized by their OTU      #  abundances? - NO     stats_table(biom, x = \"Sex\", y = \"unifrac\") #>     n           Test .p.val .adj.p #> 1 406 Kruskal-Wallis   0.49   0.49          # What about on a particular body site? - Yes, Buccal mucosa.     stats_table(biom, x = \"==Sex\", y = \"unifrac\", by = \"==Body Site\") #> Error in FUN(X[[i]], ...): object '==Body Site' not found          # Recall that for distance metrics such as unifrac, the value of     #  interest (the distance) is calculated from a pair of samples.     #  Sometimes both samples will be from males, sometimes both from     #  females, and sometimes one from each.     # The '==' prefix on '==Sex' and '==Body Site' indicates that only     #  pairs from the same sex and same body site should be considered.     # Using the '!=' prefix does the opposite - considering only sample     #  pairs from different sexes and body sites.          # Removing the '==' prefix generates the complete set of      #  comparisons. Note how the test changes from Mann-Whitney to     #  Kruskal-Wallis. This is because instead of a two group comparison     #  ('Male', 'Female') we are now comparing three groups      #  ('Male', 'Female', 'Female vs Male').     stats_table(biom, x = \"Sex\", y = \"unifrac\", by = \"Body Site\") #>                 Body Site   n           Test  .p.val .adj.p #> 1           Buccal mucosa  45 Kruskal-Wallis 0.00319 0.0191 #> 2         Saliva vs Stool  90 Kruskal-Wallis 0.15100 0.3260 #> 3 Buccal mucosa vs Saliva 100 Kruskal-Wallis 0.16300 0.3260 #> 4  Buccal mucosa vs Stool  90 Kruskal-Wallis 0.79700 0.9580 #> 5                  Saliva  45 Kruskal-Wallis 0.80700 0.9580 #> 6                   Stool  36 Kruskal-Wallis 0.95800 0.9580"},{"path":"https://cmmr.github.io/rbiom/reference/subset.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset samples using the BIOM's metadata or taxonomy. — subset","title":"Subset samples using the BIOM's metadata or taxonomy. — subset","text":"Subset samples using BIOM's metadata taxonomy.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset samples using the BIOM's metadata or taxonomy. — subset","text":"","code":"# S3 method for BIOM subset(   x,   expr,   env = parent.frame(),   drop.na = TRUE,   refactor = TRUE,   fast = FALSE )"},{"path":"https://cmmr.github.io/rbiom/reference/subset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset samples using the BIOM's metadata or taxonomy. — subset","text":"x BIOM object, returned read_biom. expr Logical expression run metadata taxonomy () identify samples taxa retain. env environment search variables used expr. (Default: parent.frame()) drop.na expr e.g. Age > 30, !.na(Age) automatically applied ? refactor expr e.g. `Body Site` %% c(\"Stool\", \"Saliva\"), `Body Site` redefined factor(`Body Site`, levels=c('Stool', 'Saliva'))? Applies non-numeric metadata . fast subsetting phylogenetic tree sequences skipped? slow steps often necessary. (Default: FALSE)","code":""},{"path":"https://cmmr.github.io/rbiom/reference/subset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset samples using the BIOM's metadata or taxonomy. — subset","text":"BIOM object.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/subset.html","id":"taxonomic-abundance-filtering","dir":"Reference","previous_headings":"","what":"Taxonomic abundance filtering","title":"Subset samples using the BIOM's metadata or taxonomy. — subset","text":"taxonomic subsetting, several functions added overridden behave expected within subsetting expression. : mean(), median(), min(), max(), n(), count(), percent(), rank(), apply(). Therefore can write subset(hmp50, mean(Genus) >= 0.1) returned BIOM object contain genera average least 10% relative abundance across samples. want orders present three samples, can : subset(hmp50, count(Order) >= 3). require presence 25% samples, use: subset(hmp50, percent(Order) >= 0.25). count() percent() default arguments gt=0, le=1, ge=NULL, lt=NULL, can overridden find, e.g., genera comprise least 2% community 10% samples: subset(hmp50, percent(Genus, ge=0.02) >= 0.10). gt = greater , ge = greater equal . lt/le similarly 'less '. keep top 5 abundant genera (based mean), run: subset(hmp50, rank(Genus) <= 5). apply() allows run function per-taxon basis. example, filter genera root mean square relative abundances: rms <- function(x) sqrt(mean(x^2)); subset(hmp50, apply(Genus, rms) >= 0.1). prefer work raw values (e.g. read counts) instead relative abundances, set apply(..., raw = TRUE). instance: subset(hmp50, apply(Genus, mean, raw=TRUE) >= 100).","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/subset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset samples using the BIOM's metadata or taxonomy. — subset","text":"","code":"if (FALSE) {     library(rbiom)          subset(hmp50, `Body Site` %in% c(\"Saliva\", \"Stool\"))     subset(hmp50, Age < 25 & BMI > 22)     subset(hmp50, Phylum %in% c(\"Firmicutes\", \"Actinobacteria\"))     subset(hmp50, mean(Genus) > 0.1)     subset(hmp50, rank(Genus) <= 5)     subset(hmp50, a == b, list(a = as.name(\"Body Site\"), b =\"Saliva\"))  }"},{"path":"https://cmmr.github.io/rbiom/reference/subtree.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a subtree by specifying tips to keep. — subtree","title":"Create a subtree by specifying tips to keep. — subtree","text":"Create subtree specifying tips keep.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/subtree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a subtree by specifying tips to keep. — subtree","text":"","code":"subtree(tree, tips)"},{"path":"https://cmmr.github.io/rbiom/reference/subtree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a subtree by specifying tips to keep. — subtree","text":"tree phylo object, returned read_tree. tips character, numeric, logical vector tips keep.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/subtree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a subtree by specifying tips to keep. — subtree","text":"phylo object subtree.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/subtree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a subtree by specifying tips to keep. — subtree","text":"","code":"library(rbiom)          infile <- system.file(\"extdata\", \"newick.tre\", package = \"rbiom\")     tree <- read_tree(infile)          leafs   <- tips(tree)     subtree <- subtree(tree, head(leafs))"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize BIOM data with boxplots. — taxa_boxplot","title":"Visualize BIOM data with boxplots. — taxa_boxplot","text":"Visualize BIOM data boxplots.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize BIOM data with boxplots. — taxa_boxplot","text":"","code":"taxa_boxplot(   biom,   x = NULL,   rank = NULL,   taxa = 5,   layers = \"lsb\",   color.by = NULL,   pattern.by = NULL,   shape.by = NULL,   facet.by = NULL,   limit.by = NULL,   flip = TRUE,   stripe = flip,   p.top = Inf,   p.adj = \"fdr\",   p.label = TRUE,   ci = 95,   xlab.angle = \"auto\",   y.trans = \"sqrt\",   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize BIOM data with boxplots. — taxa_boxplot","text":"biom BIOM object, returned read_biom. x categorical metadata column name use x-axis.  default, NULL puts taxa along x-axis. rank rank(s) taxa display. E.g. \"Phylum\", \"Genus\", etc.  Run taxa_ranks() see options given BIOM object.  default, NULL, selects lowest level. taxa taxa display. integer value show top n abundant taxa. value 0 <= n < 1 show taxa  mean abundance greater (e.g. 0.1). character vector taxon names show taxa. Default: 5. layers \"box\" (\"x\"), \"bar\", \"violin\",  \"dot\", \"strip\", \"crossbar\", \"errorbar\",  \"linerange\", \"pointrange\". Single letter  abbreviations also accepted. instance, c(\"box\", \"dot\")  equivalent c(\"x\", \"d\") \"xd\". See vignette(\"boxplots\") examples . Default: \"lsb\". color., pattern., shape., facet., limit.Metadata columns  use aesthetics partitioning. See details. Default: NULL flip Transpose axes, taxa present rows instead columns. Default: TRUE stripe Shade every x position. Default: flip p.top display taxa significant differences  abundance. p.top >= 1, p.top  significant taxa displayed. p.top less one,  taxa adjusted p-value <= p.top displayed.  Recommended used combination taxa parameter  set lower bound mean abundance considered taxa.  Default: Inf p.adj Method use multiple comparisons adjustment p-values. Run p.adjust.methods list available options. (Default: fdr) p.label Minimum adjusted p-value display plot  bracket. p.label = 0.05 -  Use specific value. p.label = TRUE -  equivalent p.label = 0.05 p.label = FALSE -  show stats plot p.label = Inf -  display p-values p.label = NULL -  calculate stats numeric vector one value  provided, used breaks asterisk notation. Default: TRUE ci calculate min/max crossbar,  errorbar, linerange, pointrange layers. Provide number 75 100 define confidence interval's confidence level, commonly 95 97.5. options :  range,  sd (standard deviation),  se (standard error),  mad (median absolute deviation).  center mark crossbar pointrange represents mean, except mad case represents median. Trendlines require confidence interval value.  Set NULL disable. Default: 95 xlab.angle rotate tick labels x-axis.  'auto' (default), automatically selects rotation value.  0, 30, 90 sets angle horizontal,  angled, vertical, respectively. y.trans transformation apply y-axis. Visualizing  differences high- low-abundance taxa best done non-linear axis. Options : \"sqrt\" -  square-root transformation \"log1p\" -  log(y + 1) transformation anything else -  transformation methods allow visualization high- low-abundance taxa simultaneously, without complaint 'zero' count observations. Default: \"sqrt\" ... Parameters matched formal arguments ggplot2 functions. Prefixing parameter names layer name ensures particular parameter passed , , layer. instance, dot.size = 2 d.size = 2 ensures  dotplot layer size set 2.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize BIOM data with boxplots. — taxa_boxplot","text":"ggplot2 plot. computed data points statistics          attached attr(p, 'data') attr(p, 'stats'),          respectively.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_boxplot.html","id":"aesthetics-and-partitions","dir":"Reference","previous_headings":"","what":"Aesthetics and Partitions","title":"Visualize BIOM data with boxplots. — taxa_boxplot","text":"Metadata can used flexibly subset, partition, apply aesthetics  creating plot. Common use cases provided . thorough  documentation available https://cmmr.github.io/rbiom. color.- categorical metadata column. (Max 1) pattern.- categorical metadata column. (Max 1) shape.- categorical metadata column. (Max 1) facet.- Categorical metadata column(s) . limit.- metadata column(s). built-color palettes colorblind-friendly. available  categorical palette names : \"okabe\", \"carto\", \"r4\",  \"polychrome\", \"tol\", \"bright\", \"light\",  \"muted\", \"vibrant\", \"tableau\", \"classic\",  \"alphabet\", \"tableau20\", \"kelly\", \"fishy\". Patterns sourced magick R package. Pattern names :  \"bricks\", \"hexagons\", \"horizontalsaw\",  \"hs_fdiagonal\", \"fishscales\", \"verticalsaw\",  \"checkerboard\", \"octagons\", \"right45\",  \"hs_cross\", \"hs_bdiagonal\", \"hs_diagcross\",  \"hs_horizontal\", \"hs_vertical\", \"left45\",  \"leftshingle\", \"rightshingle\", \"verticalbricks\",  \"verticalleftshingle\", \"verticalrightshingle\". Shapes can given per base R - numbers 0 17 various shapes, decimal value ascii character, e.g. -z = 65:90; -Z = 97:122 use  letters instead shapes plot. Character strings may used well.","code":"## Colors ----------------------------   color.by = \"Body Site\"   color.by = list('Body Site' = \"bright\")   color.by = list('Body Site' = c(\"Stool\", \"Saliva\"))   color.by = list('Body Site' = list('values' = c(\"Stool\", \"Saliva\"), 'palette' = \"bright\"))   color.by = list('Body Site' = c('Stool' = \"blue\", 'Saliva' = \"green\"))      ## Patterns --------------------------   pattern.by = \"Body Site\"   pattern.by = list('Body Site' = c(\"Stool\", \"Saliva\"))   pattern.by = list('Body Site' = c('Stool' = \"left45\", 'Saliva' = \"hs_cross\"))      ## Shapes ----------------------------   shape.by = \"Body Site\"   shape.by = list('Body Site' = c(\"Stool\", \"Saliva\"))   shape.by = list('Body Site' = c('Stool' = 7, 'Saliva' = 8))      ## Facets ----------------------------   facet.by = \"Body Site\"   facet.by = c(\"Body Site\", \"Sex\")   facet.by = list('Body Site' = c(\"Stool\", \"Saliva\"), \"Sex\")      ## Limits ----------------------------   limit.by = list('Sex' = \"Male\", 'Age' = c(20,40))   limit.by = list('Body Site' = c(\"Saliva\", \"Anterior nares\"), 'Age' = c(NA,35))"},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/taxa_boxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize BIOM data with boxplots. — taxa_boxplot","text":"","code":"library(rbiom)          biom <- rarefy(hmp50)      taxa_boxplot(biom, rank = c(\"Phylum\", \"Genus\"))      taxa_boxplot(biom, rank = \"Genus\", taxa = 3, layers = \"ps\", color.by = list(\"Body Site\" = c('Saliva' = \"blue\", 'Stool' = \"red\")), flip = FALSE)"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_corrplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize taxa abundance with scatterplots and trendlines. — taxa_corrplot","title":"Visualize taxa abundance with scatterplots and trendlines. — taxa_corrplot","text":"Visualize taxa abundance scatterplots trendlines.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_corrplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize taxa abundance with scatterplots and trendlines. — taxa_corrplot","text":"","code":"taxa_corrplot(   biom,   x,   rank = NULL,   taxa = 6,   points = FALSE,   color.by = NULL,   facet.by = NULL,   limit.by = NULL,   model = \"linear\",   ci = 95,   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_corrplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize taxa abundance with scatterplots and trendlines. — taxa_corrplot","text":"biom BIOM object, returned read_biom. x numeric metadata column name use x-axis. Required. rank rank taxa display. E.g. \"Phylum\", \"Genus\", etc.  Run taxa_ranks() see options given BIOM object.  default, NULL, selects lowest level. taxa taxa display. integer value show top n abundant taxa. value 0 <= n < 1 show taxa  mean abundance greater (e.g. 0.1). character vector taxon names show taxa. Default: 6. points Overlay scatter plot. Default: FALSE. color., facet., limit.Metadata columns use aesthetics  partitioning. See details. Default: NULL model type trendline fit data. Options :  \"linear\", \"logarithmic\", \"local\". can alternatively provide method /formula arguments override preset options  stat_smooth. Default: \"linear\". ci confidence interval display around fitted curve. Set FALSE hide confidence interval. Default: 95. ... Additional parameters pass along ggplot2 functions. Prefix parameter name either p. s. ensure gets passed ()  geom_point  geom_smooth, respectively. instance,  p.size = 2 ensures points size set  2.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_corrplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize taxa abundance with scatterplots and trendlines. — taxa_corrplot","text":"ggplot2 plot. computed data points statistics          attached attr(p, 'data') attr(p, 'stats'),          respectively.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_corrplot.html","id":"aesthetics-and-partitions","dir":"Reference","previous_headings":"","what":"Aesthetics and Partitions","title":"Visualize taxa abundance with scatterplots and trendlines. — taxa_corrplot","text":"Metadata can used flexibly subset, partition, apply aesthetics  creating plot. Common use cases provided . thorough  documentation available https://cmmr.github.io/rbiom. color.- metadata column. (Max 1) facet.- categorical metadata column(s). limit.- metadata column(s). built-color palettes colorblind-friendly. available categorical palette names : \"okabe\", \"carto\",  \"r4\", \"polychrome\", \"tol\", \"bright\",  \"light\", \"muted\", \"vibrant\", \"tableau\",  \"classic\", \"alphabet\", \"tableau20\", \"kelly\",  \"fishy\". available numeric palette names : \"reds\", \"oranges\",  \"greens\", \"purples\", \"grays\", \"acton\",  \"bamako\", \"batlow\", \"bilbao\", \"buda\",  \"davos\", \"devon\", \"grayC\", \"hawaii\",  \"imola\", \"lajolla\", \"lapaz\", \"nuuk\",  \"oslo\", \"tokyo\", \"turku\", \"bam\",  \"berlin\", \"broc\", \"cork\", \"lisbon\",  \"roma\", \"tofino\", \"vanimo\", \"vik\"","code":"## Colors ----------------------------   color.by = \"Body Site\"   color.by = list('Body Site' = \"bright\")   color.by = list('Body Site' = c(\"Stool\", \"Saliva\"))   color.by = list('Body Site' = list('values' = c(\"Stool\", \"Saliva\"), 'palette' = \"bright\"))   color.by = list('Body Site' = c('Stool' = \"blue\", 'Saliva' = \"green\"))      ## Facets ----------------------------   facet.by = \"Body Site\"   facet.by = c(\"Body Site\", \"Sex\")   facet.by = list('Body Site' = c(\"Stool\", \"Saliva\"), \"Sex\")      ## Limits ----------------------------   limit.by = list('Sex' = \"Male\", 'Age' = c(20,40))   limit.by = list('Body Site' = c(\"Saliva\", \"Anterior nares\"), 'Age' = c(NA,35))"},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/taxa_corrplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize taxa abundance with scatterplots and trendlines. — taxa_corrplot","text":"","code":"library(rbiom)          taxa_corrplot(rarefy(hmp50), \"BMI\", color.by=\"Body Site\")"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Display taxa abundances as a heatmap. — taxa_heatmap","title":"Display taxa abundances as a heatmap. — taxa_heatmap","text":"Display taxa abundances heatmap.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display taxa abundances as a heatmap. — taxa_heatmap","text":"","code":"taxa_heatmap(   biom,   rank = NULL,   taxa = 6,   grid = list(label = \"{rank} Abundance\", colors = \"bilbao\"),   color.by = NULL,   order.by = NULL,   limit.by = NULL,   label = TRUE,   label_size = NULL,   rescale = \"none\",   trees = TRUE,   clust = \"complete\",   dist = \"euclidean\",   tree_height = NULL,   track_height = NULL,   ratio = 1,   legend = \"right\",   xlab.angle = \"auto\",   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display taxa abundances as a heatmap. — taxa_heatmap","text":"biom BIOM object, returned read_biom. rank rank(s) taxa display, example \"Phylum\"  \"Genus\". Run taxa_ranks() see options  given BIOM object. default, NULL, selects lowest level. taxa taxa give separate rows. integer value show top n abundant taxa. value 0 <= n < 1 show taxa  mean abundance greater (e.g. 0.1). character vector taxon names show taxa. Default: 6. grid Color palette name, list entries label,  colors, range, bins, na.color, / guide. See Track Definitions section details. Default: list(label = \"{rank} Abundance\", colors = \"bilbao\"). color.Add annotation tracks metadata column(s).  See \"Annotation Tracks\" section details. Default: NULL order.metadata column(s) use ordering samples  across x y axes. Overrides clust argument. See \"Ordering Limiting\" section details. Default: NULL limit.Metadata definition(s) use sample subsetting prior calculations.  See \"Ordering Limiting\" section details. Default: NULL label Label matrix rows columns. can supply list logical vector length two control row labels column  labels separately, example  label = c(rows = TRUE, cols = FALSE), simply  label = c(T, F). valid options \"rows\", \"cols\", \"\", \"bottom\", \"right\", \"none\". Default: TRUE. label_size font size use row column labels.  can supply numeric vector length two control row label sizes  column label sizes separately, example  c(rows = 20, cols = 8), simply c(20, 8). Default: NULL, computes:  pmax(8, pmin(20, 100 / dim(mtx))). rescale Rescale rows columns common min/max. Options: \"none\", \"rows\", \"cols\". Default: \"none\". trees Draw dendrogram rows (left) columns (top). can  supply list logical vector length two control row tree  column tree separately, example  trees = c(rows = T, cols = F), simply trees = c(T, F).  valid options \"rows\", \"cols\", \"\",  \"left\", \"top\", \"none\". Default: TRUE. clust Clustering algorithm reordering rows columns  similarity. can supply list character vector length two  control row column clustering separately, example  clust = c(rows = \"complete\", cols = NA), simply  clust = c(\"complete\", NA). Default: \"complete\". Options : FALSE NA -  Disable reordering. hclust object method name -  \"ward.D\",      \"ward.D2\", \"single\", \"complete\",      \"average\", \"mcquitty\", \"median\",      \"centroid\". dist Distance algorithm use reordering rows columns  similarity. can supply list character vector length two control row column clustering separately, example  dist = c(rows = \"euclidean\", cols = \"maximum\"), simply  dist = c(\"euclidean\", \"maximum\"). Default: \"euclidean\". Options : dist object method name -  \"euclidean\",      \"maximum\", \"manhattan\", \"canberra\",      \"binary\", \"minkowski\". tree_height, track_height height dendrogram annotation tracks multiples (fractions) smaller dimension grid cell size. Use numeric vector length two assign c(left, top) independently.  Default: NULL, computes: tree_height = sqrt(min(dim(mtx))), track_height = tree_height / 4. ratio Height/width ratio entire grid.  Default: 1 (square). legend place legend. Options : \"right\" \"bottom\". Default: \"right\". xlab.angle Angle labels bottom plot.  Options \"auto\", 0, 30, 90.  Default: \"auto\". ... Additional arguments pass ggplot2::theme(). example, labs.title = \"Plot Title\".","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display taxa abundances as a heatmap. — taxa_heatmap","text":"ggplot2 plot. computed data points attached  attr(, 'data').","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_heatmap.html","id":"annotation-tracks","dir":"Reference","previous_headings":"","what":"Annotation Tracks","title":"Display taxa abundances as a heatmap. — taxa_heatmap","text":"Metadata can displayed colored tracks heatmap. Common use  cases provided , thorough documentation available  https://cmmr.github.io/rbiom . following entries track definitions understood: colors -  pre-defined palette name custom set colors map . range -  c(min,max) use scale values. label -  Label track. Defaults name list element. side -  Options \"top\" (default) \"left\". na.color -  color use NA values. bins -  Bin gradient many bins/steps. guide -  list arguments guide_colorbar() guide_legend(). built-color palettes colorblind-friendly. Categorical palette names: \"okabe\", \"carto\", \"r4\",  \"polychrome\", \"tol\", \"bright\", \"light\",  \"muted\", \"vibrant\", \"tableau\", \"classic\",  \"alphabet\", \"tableau20\", \"kelly\", \"fishy\". Numeric palette names: \"reds\", \"oranges\", \"greens\",  \"purples\", \"grays\", \"acton\", \"bamako\",  \"batlow\", \"bilbao\", \"buda\", \"davos\",  \"devon\", \"grayC\", \"hawaii\", \"imola\",  \"lajolla\", \"lapaz\", \"nuuk\", \"oslo\",  \"tokyo\", \"turku\", \"bam\", \"berlin\",  \"broc\", \"cork\", \"lisbon\", \"roma\",  \"tofino\", \"vanimo\", \"vik\".","code":"## Categorical ---------------------------- color.by = \"Body Site\" color.by = list('Body Site' = \"bright\") color.by = list('Body Site' = c(\"Stool\", \"Saliva\"), 'colors' = \"bright\") color.by = list('Body Site' = c('Stool' = \"blue\", 'Saliva' = \"green\"))  ## Numeric -------------------------------- color.by = \"Age\" color.by = list('Age' = \"reds\") color.by = list('Age' = c(20,NA), 'colors' = \"reds\") # at least 20 years old color.by = list('Age' = c(20,40)) # between 20 and 40 years old (inclusive)  ## Multiple Tracks ------------------------ color.by = c(\"Body Site\", \"Age\") color.by = list('Body Site' = \"bright\", 'Age' = \"reds\") color.by = list(   'Body Site' = c('Stool' = \"blue\", 'Saliva' = \"green\"),   'Age'       = list(range = c(20,40), 'colors' = \"reds\") )"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_heatmap.html","id":"ordering-and-limiting","dir":"Reference","previous_headings":"","what":"Ordering and Limiting","title":"Display taxa abundances as a heatmap. — taxa_heatmap","text":"order.controls metadata column(s) used arrange samples plot. also enables subsetting particular set  range values. Prefix column name - arrange values  descending order rather ascending. limit.used specify subset samples without side-effects aesthetics. especially useful limiting data single categorical metadata value. Unlike *.parameters, limit.must always named list().","code":"## Categorical ---------------------------- order.by = \"Body Site\" order.by = list('Body Site' = c(\"Stool\", \"Saliva\"))  ## Numeric -------------------------------- order.by = \"-Age\" order.by = list('Age'  = c(20,NA)) # at least 20 years old order.by = list('-Age' = c(20,40)) # between 20 and 40 years old (inclusive)  ## Multiple / Mixed ----------------------- order.by = c(\"-Body Site\", \"Age\") order.by = list(\"Body Site\", '-Age' = c(20,40)) ## Categorical ---------------------------- limit.by = list('Sex' = \"Male\")  ## Numeric -------------------------------- limit.by = list('Age' = c(20,NA)) # at least 20 years old limit.by = list('Age' = c(20,40)) # between 20 and 40 years old (inclusive)  ## Multiple / Mixed ----------------------- limit.by = list(   'Sex'       = \"Male\",    'Body Site' = c(\"Stool\", \"Saliva\")   'Age'       = c(20,40) )"},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/taxa_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display taxa abundances as a heatmap. — taxa_heatmap","text":"","code":"library(rbiom)          biom <- hmp50 %>% rarefy() %>% select(1:10)     taxa_heatmap(biom, rank=\"Phylum\", color.by=\"Body Site\")"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a matrix of samples by taxa, at the specified taxonomic rank. — taxa_matrix","title":"Generate a matrix of samples by taxa, at the specified taxonomic rank. — taxa_matrix","text":"Generate matrix samples taxa, specified taxonomic rank.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a matrix of samples by taxa, at the specified taxonomic rank. — taxa_matrix","text":"","code":"taxa_matrix(   biom,   rank = \"OTU\",   taxa = NULL,   map = NULL,   lineage = FALSE,   sparse = FALSE )"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a matrix of samples by taxa, at the specified taxonomic rank. — taxa_matrix","text":"biom matrix, simple_triplet_matrix, BIOM  object, returned read_biom. matrices, rows  columns assumed taxa samples, respectively. rank taxonomic rank. E.g. rank = \"OTU\",  rank = \"Phylum\", etc. May also given numerically: 0 OTU, 1 highest level (.e. Kingdom), extending number taxonomic ranks encoded original biom file. Run  taxa_ranks(biom) fetch names available ranks. taxa Limit number taxa returned matrix. Depending  value type, different filter applied. NULL Retain taxa. (default.) Integer >= 1 N abundant taxa retained. Example:     taxa_matrix(biom, 'Genus', 5) returned five     abundant genera. Numeric 0 1 Taxa retained abundance      greater equal N. Example:      taxa_matrix(biom, 'Phylum', 0.1) returns phyla     relative abundance least 10 %. Character vector taxa names retained. Example:      taxa_matrix(biom, 'Phylum', c(\"Firmicutes\", \"Bacteroidetes\"))     retain two phyla. map character matrix defining value taxa IDs assigned taxonomic rank. map=NULL biom BIOM class object, map automatically loaded  biom$taxonomy. map must null biom matrix simple_triplet_matrix. See example example map's structure. lineage Include ranks name taxa. instance, setting TRUE produce  Bacteria; Actinobacteria; Coriobacteriia; Coriobacteriales.  Whereas setting FALSE (default) return simply Coriobacteriales. want set TRUE genus names (Incertae_Sedis) map multiple higher level ranks. sparse true, returns sparse matrix described  slam::simple_triplet_matrix, otherwise returns normal R matrix object. Sparse matrices likely considerably memory efficient scenario.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a matrix of samples by taxa, at the specified taxonomic rank. — taxa_matrix","text":"numeric matrix samples column names, taxonomic         identifiers row names.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a matrix of samples by taxa, at the specified taxonomic rank. — taxa_matrix","text":"","code":"library(rbiom)          taxa_ranks(hmp50) #> [1] \"Kingdom\" \"Phylum\"  \"Class\"   \"Order\"   \"Family\"  \"Genus\"            phyla <- taxa_matrix(hmp50, 'Phylum')     phyla[1:4,1:6] #>       Actinobacteria Bacteroidetes Cyanobacteria Deinococcus Thermus Firmicutes #> HMP01             18           276             0                   0       1208 #> HMP02             60           221             0                   0        931 #> HMP03            126           313             0                   0        787 #> HMP04            120           218             0                   0        865 #>       Fusobacteria #> HMP01           41 #> HMP02           44 #> HMP03            6 #> HMP04          276          # Custom matrices should be formatted like so:     counts <- counts(hmp50)     map    <- taxonomy(hmp50)          counts[1:3,1:6] #>          HMP01 HMP02 HMP03 HMP04 HMP05 HMP06 #> UncO2713     0     0     0     0     0     0 #> UncO4101     1     5     6    18     5    15 #> AnmMass2     0     0     0     0     0     0     map[1:3,1:4] #>          Kingdom    Phylum           Class            Order             #> UncO2713 \"Bacteria\" \"Bacteroidetes\"  \"Bacteroidia\"    \"Bacteroidales\"   #> UncO4101 \"Bacteria\" \"Firmicutes\"     \"Clostridia\"     \"Clostridiales\"   #> AnmMass2 \"Bacteria\" \"Actinobacteria\" \"Actinobacteria\" \"Actinomycetales\"          phyla <- taxa_matrix(counts, 'Phylum', map=map)     phyla[1:3,1:6] #>       Actinobacteria Bacteroidetes Cyanobacteria Deinococcus Thermus Firmicutes #> HMP01             18           276             0                   0       1208 #> HMP02             60           221             0                   0        931 #> HMP03            126           313             0                   0        787 #>       Fusobacteria #> HMP01           41 #> HMP02           44 #> HMP03            6"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_means.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the taxa abundances. — taxa_means","title":"Get the taxa abundances. — taxa_means","text":"Get taxa abundances.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_means.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the taxa abundances. — taxa_means","text":"","code":"taxa_means(biom, rank = NULL)"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_means.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the taxa abundances. — taxa_means","text":"biom BIOM object, returned read_biom. rank taxonomic rank return means . default,  NULL, return OTU means order appear  counts. NULL, returned means ordered abundance least abundant.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_means.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the taxa abundances. — taxa_means","text":"numeric vector, named taxa names.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_means.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the taxa abundances. — taxa_means","text":"","code":"library(rbiom)          taxa_means(hmp50, 'Genus') %>% head(10) #>     Lactobacillus     Streptococcus Corynebacterium 1       Bacteroides  #>            803.74            491.52            328.66            323.22  #>    Staphylococcus Propionibacterium        uncultured       Haemophilus  #>            275.50            251.70            126.54            115.72  #>       Veillonella         Neisseria  #>             78.40             50.22"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_names-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the taxa names. — taxa_names<-","title":"Set the taxa names. — taxa_names<-","text":"Set taxa names.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_names-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the taxa names. — taxa_names<-","text":"","code":"taxa_names(x) <- value"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_names-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the taxa names. — taxa_names<-","text":"x BIOM object, returned read_biom. value character vector. named character vector can used change taxa names.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/taxa_names-set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the taxa names. — taxa_names<-","text":"","code":"library(rbiom)          biom <- hmp50          head(taxa_names(biom)) #> [1] \"UncO2713\" \"UncO4101\" \"AnmMass2\" \"PreBivi6\" \"CprSpeci\" \"Unc96922\"          taxa_names(biom) <- sub('Unc', 'Uncultured_', taxa_names(biom))     head(taxa_names(biom)) #> [1] \"Uncultured_O2713\" \"Uncultured_O4101\" \"AnmMass2\"         \"PreBivi6\"         #> [5] \"CprSpeci\"         \"Uncultured_96922\"          taxa_names(biom) <- c('AnmMass2' = 'One', 'PreBivi6' = 'Two') #> Warning: number of items to replace is not a multiple of replacement length #> Error in names(x[[\"sequences\"]]) <- new_ids: 'names' attribute [492] must be the same length as the vector [490]     head(taxa_names(biom)) #> [1] \"Uncultured_O2713\" \"Uncultured_O4101\" \"AnmMass2\"         \"PreBivi6\"         #> [5] \"CprSpeci\"         \"Uncultured_96922\""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the taxa names. — taxa_names","title":"Get the taxa names. — taxa_names","text":"Get taxa names.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the taxa names. — taxa_names","text":"","code":"taxa_names(biom)"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the taxa names. — taxa_names","text":"biom BIOM object, returned read_biom.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the taxa names. — taxa_names","text":"character vector taxa IDs / names biom.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/taxa_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the taxa names. — taxa_names","text":"","code":"library(rbiom)          taxa_names(hmp50) %>% head() #> [1] \"UncO2713\" \"UncO4101\" \"AnmMass2\" \"PreBivi6\" \"CprSpeci\" \"Unc96922\""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_ranks-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the taxa rank names. — taxa_ranks<-","title":"Set the taxa rank names. — taxa_ranks<-","text":"Set taxa rank names.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_ranks-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the taxa rank names. — taxa_ranks<-","text":"","code":"taxa_ranks(x) <- value"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_ranks-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the taxa rank names. — taxa_ranks<-","text":"x BIOM object, returned read_biom. value character vector. named character vector can used change taxa rank names.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/taxa_ranks-set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the taxa rank names. — taxa_ranks<-","text":"","code":"library(rbiom)          biom <- hmp50          taxa_ranks(biom) #> [1] \"Kingdom\" \"Phylum\"  \"Class\"   \"Order\"   \"Family\"  \"Genus\"            taxa_ranks(biom) <- c(\"OTU\" = \"ASV\") #> Error in `taxa_ranks<-`(`*tmp*`, value = c(OTU = \"ASV\")): all(names(value) %in% taxa_ranks(x)) is not TRUE     taxa_ranks(biom) #> [1] \"Kingdom\" \"Phylum\"  \"Class\"   \"Order\"   \"Family\"  \"Genus\"            taxa_ranks(biom) <- paste0(\"Level\", 1:7) #> Error in dimnames(x) <- dn: length of 'dimnames' [2] not equal to array extent     taxa_ranks(biom) #> [1] \"Kingdom\" \"Phylum\"  \"Class\"   \"Order\"   \"Family\"  \"Genus\""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_ranks.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the taxa ranks. — taxa_ranks","title":"Get the taxa ranks. — taxa_ranks","text":"Get taxa ranks.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_ranks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the taxa ranks. — taxa_ranks","text":"","code":"taxa_ranks(biom)"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_ranks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the taxa ranks. — taxa_ranks","text":"biom BIOM object, returned read_biom.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_ranks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the taxa ranks. — taxa_ranks","text":"character vector taxa ranks biom.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/taxa_ranks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the taxa ranks. — taxa_ranks","text":"","code":"library(rbiom)          taxa_ranks(hmp50) #> [1] \"Kingdom\" \"Phylum\"  \"Class\"   \"Order\"   \"Family\"  \"Genus\""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_stacked.html","id":null,"dir":"Reference","previous_headings":"","what":"Display taxa abundances as a stacked bar graph. — taxa_stacked","title":"Display taxa abundances as a stacked bar graph. — taxa_stacked","text":"Display taxa abundances stacked bar graph.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_stacked.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display taxa abundances as a stacked bar graph. — taxa_stacked","text":"","code":"taxa_stacked(   biom,   rank = NULL,   taxa = 6,   colors = TRUE,   patterns = FALSE,   label.by = NULL,   order.by = NULL,   facet.by = NULL,   limit.by = NULL,   dist = \"euclidean\",   clust = \"complete\",   other = TRUE,   xlab.angle = 90,   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_stacked.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display taxa abundances as a stacked bar graph. — taxa_stacked","text":"biom BIOM object, returned read_biom. rank rank(s) taxa display, example \"Phylum\"  \"Genus\". Run taxa_ranks() see options  given BIOM object. default, NULL, selects lowest level. taxa taxa give separate colors. integer value show top n abundant taxa. value 0 <= n < 1 show taxa  mean abundance greater (e.g. 0.1). character vector taxon names show taxa. Default: 6. colors, patterns character vector colors patterns use graph. named character vector can used map taxon names  specific colors patterns. Set TRUE auto-select colors patterns, FALSE disable per-taxa colors patterns. Default: colors=TRUE, patterns=FALSE. label., order.metadata column use labeling /sorting samples across x-axis. order.=NULL, samples arranged based dist clust, . Default: NULL. facet., limit.Metadata columns  use data partitioning. Default: NULL dist, clust Distance (dist) clustering (hclust) methods use automatically arranging samples along x-axis.  Group samples similar composition near one another. Default: dist=\"euclidean\", clust=\"complete\". Add '' taxa ensures bars sum 100 Default: TRUE. xlab.angle rotate tick labels x-axis. Options 90 (default) 30. ... Parameters underlying functions. Prefixing parameter names  layer name ensures particular parameter passed ,  , layer.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_stacked.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display taxa abundances as a stacked bar graph. — taxa_stacked","text":"ggplot2 plot. computed data points attached  attr(, 'data').","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/taxa_stacked.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display taxa abundances as a stacked bar graph. — taxa_stacked","text":"","code":"library(rbiom)          biom <- rarefy(hmp50)     taxa_stacked(biom, rank=\"Phylum\")"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_sums.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the taxa abundances. — taxa_sums","title":"Get the taxa abundances. — taxa_sums","text":"Get taxa abundances.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_sums.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the taxa abundances. — taxa_sums","text":"","code":"taxa_sums(biom, rank = NULL)"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_sums.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the taxa abundances. — taxa_sums","text":"biom BIOM object, returned read_biom. rank taxonomic rank return sums . default,  NULL, return OTU sums order appear  counts. NULL, returned sums ordered abundance least abundant.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_sums.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the taxa abundances. — taxa_sums","text":"numeric vector, named taxa names.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_sums.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the taxa abundances. — taxa_sums","text":"","code":"library(rbiom)          taxa_sums(hmp50, 'Genus') %>% head(10) #>     Lactobacillus     Streptococcus Corynebacterium 1       Bacteroides  #>             40187             24576             16433             16161  #>    Staphylococcus Propionibacterium        uncultured       Haemophilus  #>             13775             12585              6327              5786  #>       Veillonella         Neisseria  #>              3920              2511"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a data.frame of taxa abundance for each sample at the specified taxonomic rank. — taxa_table","title":"Generate a data.frame of taxa abundance for each sample at the specified taxonomic rank. — taxa_table","text":"Generate data.frame taxa abundance sample specified taxonomic rank.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a data.frame of taxa abundance for each sample at the specified taxonomic rank. — taxa_table","text":"","code":"taxa_table(   biom,   rank = \"OTU\",   taxa = NULL,   map = NULL,   lineage = FALSE,   md = FALSE,   safe = FALSE )"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a data.frame of taxa abundance for each sample at the specified taxonomic rank. — taxa_table","text":"biom matrix, simple_triplet_matrix, BIOM  object, returned read_biom. matrices, rows  columns assumed taxa samples, respectively. rank taxonomic rank. E.g. rank = \"OTU\",  rank = \"Phylum\", etc. May also given numerically: 0 OTU, 1 highest level (.e. Kingdom), extending number taxonomic ranks encoded original biom file. Run  taxa_ranks(biom) fetch names available ranks. taxa Limit number taxa returned matrix. Depending  value type, different filter applied. NULL Retain taxa. (default.) Integer >= 1 N abundant taxa retained. Example:     taxa_table(biom, 'Genus', 5) returned five     abundant genera. Numeric 0 1 Taxa retained abundance      greater equal N. Example:      taxa_table(biom, 'Phylum', 0.1) returns phyla     relative abundance least 10 %. Character vector taxa names retained. Example:      taxa_table(biom, 'Phylum', c(\"Firmicutes\", \"Bacteroidetes\"))     retain two phyla. map character matrix defining value taxa IDs assigned taxonomic rank. map=NULL biom BIOM class object, map automatically loaded  biom$taxonomy. map must null biom matrix simple_triplet_matrix. See example example map's structure. lineage Include ranks name taxa. instance, setting TRUE produce  Bacteria; Actinobacteria; Coriobacteriia; Coriobacteriales.  Whereas setting FALSE (default) return simply Coriobacteriales. want set TRUE genus names (Incertae_Sedis) map multiple higher level ranks. md Include metadata output data frame? Options : FALSE include metadata. (Default) TRUE Include metadata. character vector Include specified metadata columns. safe autogenerated columns prefixed \".\" avoid conflicting metadata column names? (Default: FALSE) safe=NA can used long=FALSE omit 'Sample' column entirely, leaving sample names row names.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a data.frame of taxa abundance for each sample at the specified taxonomic rank. — taxa_table","text":"numeric matrix samples column names, taxonomic         identifiers row names. data.frame metadata requested          md.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a data.frame of taxa abundance for each sample at the specified taxonomic rank. — taxa_table","text":"","code":"library(rbiom)          taxa_ranks(hmp50) #> [1] \"Kingdom\" \"Phylum\"  \"Class\"   \"Order\"   \"Family\"  \"Genus\"            phyla <- taxa_table(hmp50, 'Phylum')     phyla[1:4,1:6] #> Error in `[.data.frame`(phyla, 1:4, 1:6): undefined columns selected          # Custom matrices should be formatted like so:     counts <- counts(hmp50)     map    <- taxonomy(hmp50)          counts[1:3,1:6] #>          HMP01 HMP02 HMP03 HMP04 HMP05 HMP06 #> UncO2713     0     0     0     0     0     0 #> UncO4101     1     5     6    18     5    15 #> AnmMass2     0     0     0     0     0     0     map[1:3,1:4] #>          Kingdom    Phylum           Class            Order             #> UncO2713 \"Bacteria\" \"Bacteroidetes\"  \"Bacteroidia\"    \"Bacteroidales\"   #> UncO4101 \"Bacteria\" \"Firmicutes\"     \"Clostridia\"     \"Clostridiales\"   #> AnmMass2 \"Bacteria\" \"Actinobacteria\" \"Actinobacteria\" \"Actinomycetales\"          phyla <- taxa_table(counts, 'Phylum', map=map)     phyla[1:3,1:6] #> Error in `[.data.frame`(phyla, 1:3, 1:6): undefined columns selected"},{"path":"https://cmmr.github.io/rbiom/reference/taxonomy-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the taxonomy table. — taxonomy<-","title":"Set the taxonomy table. — taxonomy<-","text":"Set taxonomy table.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxonomy-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the taxonomy table. — taxonomy<-","text":"","code":"taxonomy(x) <- value"},{"path":"https://cmmr.github.io/rbiom/reference/taxonomy-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the taxonomy table. — taxonomy<-","text":"x BIOM object, returned read_biom. value character matrix rownames taxa_names(x). rownames taxa names, matrix subset.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/taxonomy-set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the taxonomy table. — taxonomy<-","text":"","code":"library(rbiom)          taxonomy(hmp50)[1:4,] #>          Kingdom    Phylum           Class            Order             #> UncO2713 \"Bacteria\" \"Bacteroidetes\"  \"Bacteroidia\"    \"Bacteroidales\"   #> UncO4101 \"Bacteria\" \"Firmicutes\"     \"Clostridia\"     \"Clostridiales\"   #> AnmMass2 \"Bacteria\" \"Actinobacteria\" \"Actinobacteria\" \"Actinomycetales\" #> PreBivi6 \"Bacteria\" \"Bacteroidetes\"  \"Bacteroidia\"    \"Bacteroidales\"   #>          Family             Genus                 OTU        #> UncO2713 \"Rikenellaceae\"    \"Alistipes\"           \"UncO2713\" #> UncO4101 \"Lachnospiraceae\"  \"Lachnoanaerobaculum\" \"UncO4101\" #> AnmMass2 \"Actinomycetaceae\" \"Actinomyces\"         \"AnmMass2\" #> PreBivi6 \"Prevotellaceae\"   \"Prevotella\"          \"PreBivi6\"          # Sometimes taxonomic names are incomplete     taxonomy(hmp50)[c(107,170,194), 'Genus', drop=FALSE] #>          Genus            #> GcbBacte \"g\"              #> Unc0434x \"Incertae Sedis\" #> Unc01skg \"uncultured\"              # rbiom can insert more descriptive placeholders     taxonomy(hmp50, fix.names = TRUE)[c(107,170,194), 'Genus', drop=FALSE] #>          Genus                                          #> GcbBacte \"Phylum Gracilibacteria (uncultured)\"          #> Unc0434x \"Family Lachnospiraceae (Incertae Sedis)\"      #> Unc01skg \"Order Clostridiales (Family XIII uncultured)\""},{"path":"https://cmmr.github.io/rbiom/reference/taxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the taxonomy table. — taxonomy","title":"Get the taxonomy table. — taxonomy","text":"Get taxonomy table.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the taxonomy table. — taxonomy","text":"","code":"taxonomy(biom, rank = NULL, fix.names = FALSE)"},{"path":"https://cmmr.github.io/rbiom/reference/taxonomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the taxonomy table. — taxonomy","text":"biom BIOM object, returned read_biom. rank Return just named character vector rank. (Default:  NULL) fix.names Clean taxa names. See example . (Default:  FALSE)","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxonomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the taxonomy table. — taxonomy","text":"character matrix named taxonomies biom.         fix.names = TRUE, second matrix attached         attribute called 'fixed' notes taxa names         rewritten.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/taxonomy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the taxonomy table. — taxonomy","text":"","code":"library(rbiom)          taxonomy(hmp50)[1:4,] #>          Kingdom    Phylum           Class            Order             #> UncO2713 \"Bacteria\" \"Bacteroidetes\"  \"Bacteroidia\"    \"Bacteroidales\"   #> UncO4101 \"Bacteria\" \"Firmicutes\"     \"Clostridia\"     \"Clostridiales\"   #> AnmMass2 \"Bacteria\" \"Actinobacteria\" \"Actinobacteria\" \"Actinomycetales\" #> PreBivi6 \"Bacteria\" \"Bacteroidetes\"  \"Bacteroidia\"    \"Bacteroidales\"   #>          Family             Genus                 OTU        #> UncO2713 \"Rikenellaceae\"    \"Alistipes\"           \"UncO2713\" #> UncO4101 \"Lachnospiraceae\"  \"Lachnoanaerobaculum\" \"UncO4101\" #> AnmMass2 \"Actinomycetaceae\" \"Actinomyces\"         \"AnmMass2\" #> PreBivi6 \"Prevotellaceae\"   \"Prevotella\"          \"PreBivi6\"          # Sometimes taxonomic names are incomplete     taxonomy(hmp50)[c(107,170,194), 'Genus', drop=FALSE] #>          Genus            #> GcbBacte \"g\"              #> Unc0434x \"Incertae Sedis\" #> Unc01skg \"uncultured\"              # rbiom can insert more descriptive placeholders     taxonomy(hmp50, fix.names = TRUE)[c(107,170,194), 'Genus', drop=FALSE] #>          Genus                                          #> GcbBacte \"Phylum Gracilibacteria (uncultured)\"          #> Unc0434x \"Family Lachnospiraceae (Incertae Sedis)\"      #> Unc01skg \"Order Clostridiales (Family XIII uncultured)\""},{"path":"https://cmmr.github.io/rbiom/reference/tips.html","id":null,"dir":"Reference","previous_headings":"","what":"Names of a phylogenetic tree's tips/leafs. — tips","title":"Names of a phylogenetic tree's tips/leafs. — tips","text":"Names phylogenetic tree's tips/leafs.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/tips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Names of a phylogenetic tree's tips/leafs. — tips","text":"","code":"tips(x)"},{"path":"https://cmmr.github.io/rbiom/reference/tips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Names of a phylogenetic tree's tips/leafs. — tips","text":"x phylo object, returned read_tree..","code":""},{"path":"https://cmmr.github.io/rbiom/reference/tips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Names of a phylogenetic tree's tips/leafs. — tips","text":"character vector leaf names.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/tips.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Names of a phylogenetic tree's tips/leafs. — tips","text":"","code":"library(rbiom)          infile <- system.file(\"extdata\", \"newick.tre\", package = \"rbiom\")     tree <- read_tree(infile)          leafs   <- tips(tree)     subtree <- subtree(tree, head(leafs))"},{"path":"https://cmmr.github.io/rbiom/reference/top_taxa.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the names of the most abundant taxa. — top_taxa","title":"Get the names of the most abundant taxa. — top_taxa","text":"Get names abundant taxa.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/top_taxa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the names of the most abundant taxa. — top_taxa","text":"","code":"top_taxa(biom, rank = \"OTU\", n = Inf)"},{"path":"https://cmmr.github.io/rbiom/reference/top_taxa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the names of the most abundant taxa. — top_taxa","text":"biom BIOM object, returned read_biom. rank taxonomic rank interest. Default: \"OTU\". n number taxa names return. Default: Inf.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/top_taxa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the names of the most abundant taxa. — top_taxa","text":"character vector names top n abundant taxa,          ordered abundant least abundant.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/top_taxa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the names of the most abundant taxa. — top_taxa","text":"","code":"library(rbiom)          top_taxa(hmp50, 'Genus', 10) #>  [1] \"Lactobacillus\"     \"Streptococcus\"     \"Corynebacterium 1\" #>  [4] \"Bacteroides\"       \"Staphylococcus\"    \"Propionibacterium\" #>  [7] \"uncultured\"        \"Haemophilus\"       \"Veillonella\"       #> [10] \"Neisseria\""},{"path":"https://cmmr.github.io/rbiom/reference/tree_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Provides a 'treedata' S4 object for use in ggtree functions. — tree_data","title":"Provides a 'treedata' S4 object for use in ggtree functions. — tree_data","text":"Provides 'treedata' S4 object use ggtree functions.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/tree_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provides a 'treedata' S4 object for use in ggtree functions. — tree_data","text":"","code":"tree_data(biom, reads = TRUE, clades = TRUE)"},{"path":"https://cmmr.github.io/rbiom/reference/tree_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provides a 'treedata' S4 object for use in ggtree functions. — tree_data","text":"biom BIOM object, returned read_biom. reads Include 'reads' column indicating sum taxa  observations belonging node/leaf. Default: TRUE. clades Notate top-monophyletic nodes. default, TRUE, adds column every rank biom object. character vector ranks can also passed . vector named, names used naming columns returned treedata object. Set NULL return  clade notations.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/tree_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provides a 'treedata' S4 object for use in ggtree functions. — tree_data","text":"","code":"library(rbiom)          tree_data(hmp50) #> 'treedata' S4 object'. #>  #> ...@ phylo: #>  #> Phylogenetic tree with 490 tips and 489 internal nodes. #>  #> Tip labels: #>   EschC738, Unc92490, Unc02pjp, Unc26984, Unc41900, AntBa370, ... #>  #> Rooted; includes branch lengths. #>  #> with the following features available: #>   'reads', 'Kingdom', 'Phylum', 'Class', 'Order', 'Family', 'Genus', 'OTU'. #>  #> # The associated data tibble abstraction: 979 × 11 #> # The 'node', 'label' and 'isTip' are from the phylo tree. #>     node label    isTip reads Kingdom Phylum Class Order      Family Genus OTU   #>    <dbl> <chr>    <lgl> <dbl> <chr>   <chr>  <chr> <chr>      <chr>  <chr> <chr> #>  1     1 EschC738 TRUE    100 NA      NA     NA    Enterobac… Enter… Esch… Esch… #>  2     2 Unc92490 TRUE    746 NA      NA     NA    NA         NA     Haem… Unc9… #>  3     3 Unc02pjp TRUE    242 NA      NA     NA    NA         NA     Acti… Unc0… #>  4     4 Unc26984 TRUE   5040 NA      NA     NA    NA         NA     Haem… Unc2… #>  5     5 Unc41900 TRUE      1 NA      NA     NA    Enterobac… Enter… Prov… Unc4… #>  6     6 AntBa370 TRUE     43 NA      NA     NA    NA         NA     NA    AntB… #>  7     7 AntSp625 TRUE      1 NA      NA     NA    NA         NA     NA    AntS… #>  8     8 MxlSpe11 TRUE      8 NA      NA     NA    NA         NA     NA    MxlS… #>  9     9 FuoMancu TRUE      1 NA      NA     NA    NA         NA     NA    FuoM… #> 10    10 PeuS1830 TRUE     18 NA      NA     NA    Pseudomon… Pseud… Pseu… PeuS… #> # ℹ 969 more rows"},{"path":"https://cmmr.github.io/rbiom/reference/tree_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Display a dendrogram of the phylogenetic tree. — tree_plot","title":"Display a dendrogram of the phylogenetic tree. — tree_plot","text":"Display dendrogram phylogenetic tree.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/tree_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display a dendrogram of the phylogenetic tree. — tree_plot","text":"","code":"tree_plot(   biom,   layout = \"rectangular\",   tiplab = NULL,   color.by = NULL,   label = NULL,   cladelab = NULL,   top = NULL,   right = NULL,   bottom = NULL,   left = NULL,   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/tree_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display a dendrogram of the phylogenetic tree. — tree_plot","text":"biom BIOM object, returned read_biom. layout layout option supported ggtree::ggtree: \"rectangular\", \"dendrogram\", \"slanted\",  \"ellipse\", \"roundrect\", \"fan\",  \"circular\", \"inward_circular\", \"radial\",  \"equal_angle\", \"daylight\" \"ape\". Default: \"rectangular\". tiplab Label tree leafs taxa names. Options NULL (tip labels) taxonomic rank (example tiplab = \"Genus\"). Default: NULL. color.color tree. Currently supports options NULL (coloring) '.reads' (color number taxa  observations). Default: NULL. label, cladelab Label monophyletic clades. can specify different taxonomic ranks internal (label) external  (cladelab) annotations. Default: NULL. top, right, bottom, left Add additional space around tree. Sometimes necessary wide text annotations. Set fraction tree's width/height. instance, right = 1 reserves  right half plotting area non-tree elements. Default: NULL.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/tree_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display a dendrogram of the phylogenetic tree. — tree_plot","text":"","code":"library(rbiom)           tree_plot(hmp50)           hmp1 <- select(hmp50, samples = \"HMP10\")     tree_plot(hmp1, cladelab = \"Phylum\", layout = \"roundrect\")      tree_plot(hmp1, tiplab = \"Genus\", layout = \"fan\", color.by = \".reads\")"},{"path":"https://cmmr.github.io/rbiom/reference/unifrac.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Weighted and Unweighted UniFrac distance matrices. — unifrac","title":"Compute Weighted and Unweighted UniFrac distance matrices. — unifrac","text":"wrapper around bdiv_distmat common use case.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/unifrac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Weighted and Unweighted UniFrac distance matrices. — unifrac","text":"","code":"unifrac(biom, weighted = TRUE, tree = NULL)"},{"path":"https://cmmr.github.io/rbiom/reference/unifrac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Weighted and Unweighted UniFrac distance matrices. — unifrac","text":"biom matrix, simple_triplet_matrix, BIOM  object, returned read_biom. matrices, rows  columns assumed taxa samples, respectively. weighted Use weighted UniFrac, takes abundance account rather simply presence/absence. tree phylo object providing phylogenetic tree taxa names biom. tree=NULL, tree loaded biom, encoded .","code":""},{"path":"https://cmmr.github.io/rbiom/reference/unifrac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Weighted and Unweighted UniFrac distance matrices. — unifrac","text":"distance matrix class dist.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/unifrac.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Weighted and Unweighted UniFrac distance matrices. — unifrac","text":"","code":"library(rbiom)          biom <- select(hmp50, 1:10)          dm <- unifrac(biom)     plot(hclust(dm), cex=.8)      as.matrix(dm)[1:4,1:4] #>           HMP01     HMP02     HMP03     HMP04 #> HMP01 0.0000000 0.1950253 0.3687298 0.4239831 #> HMP02 0.1950253 0.0000000 0.2101679 0.3187533 #> HMP03 0.3687298 0.2101679 0.0000000 0.3040937 #> HMP04 0.4239831 0.3187533 0.3040937 0.0000000          # Using a custom matrix and tree     mtx <- matrix(sample.int(12*20), ncol=20)     dimnames(mtx) <- list(LETTERS[1:12], letters[1:20])     tree <- ape::as.phylo(hclust(dist(mtx)))          dm <- unifrac(mtx, tree=tree)     as.matrix(dm)[1:4,1:4] #>          a        b        c        d #> a   0.0000 148.9849 190.9240 187.6669 #> b 148.9849   0.0000 213.4126 134.2024 #> c 190.9240 213.4126   0.0000 171.8943 #> d 187.6669 134.2024 171.8943   0.0000"},{"path":"https://cmmr.github.io/rbiom/reference/write_biom.html","id":null,"dir":"Reference","previous_headings":"","what":"Write counts, metadata, taxonomy, and phylogeny to a biom file. — write_biom","title":"Write counts, metadata, taxonomy, and phylogeny to a biom file. — write_biom","text":"Write counts, metadata, taxonomy, phylogeny biom file.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_biom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write counts, metadata, taxonomy, and phylogeny to a biom file. — write_biom","text":"","code":"write_biom(biom, file, format = \"json\")"},{"path":"https://cmmr.github.io/rbiom/reference/write_biom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write counts, metadata, taxonomy, and phylogeny to a biom file. — write_biom","text":"biom BIOM object save file. another class object given, coerced matrix output tabular format, provided numeric rownames colnames. file Path output file. file name ends .gz  .bz2, file contents compressed accordingly. format Options tab, json, hdf5,  corresponding classic tabular format, biom format version 1.0  biom version 2.1, respectively. Abbreviations also accepted. See  http://biom-format.org/documentation/ details. NOTE:  write HDF5 formatted BIOM files, BioConductor R package  rhdf5 must installed.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_biom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write counts, metadata, taxonomy, and phylogeny to a biom file. — write_biom","text":"success, returns NULL invisibly.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_fasta.html","id":null,"dir":"Reference","previous_headings":"","what":"Write sequences from a BIOM object to a file in fasta format. — write_fasta","title":"Write sequences from a BIOM object to a file in fasta format. — write_fasta","text":"Write sequences BIOM object file fasta format.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_fasta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write sequences from a BIOM object to a file in fasta format. — write_fasta","text":"","code":"write_fasta(seqs, outfile)"},{"path":"https://cmmr.github.io/rbiom/reference/write_fasta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write sequences from a BIOM object to a file in fasta format. — write_fasta","text":"seqs named character vector names sequence names values sequences. Also accepts BIOM object contains sequences. outfile Path output fasta file. Files ending .gz .bz2 compressed accordingly.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_fasta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write sequences from a BIOM object to a file in fasta format. — write_fasta","text":"success, returns NULL invisibly.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a newick formatted phylogenetic tree. — write_tree","title":"Write a newick formatted phylogenetic tree. — write_tree","text":"Write newick formatted phylogenetic tree.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a newick formatted phylogenetic tree. — write_tree","text":"","code":"write_tree(tree = NULL, file = NULL)"},{"path":"https://cmmr.github.io/rbiom/reference/write_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a newick formatted phylogenetic tree. — write_tree","text":"tree phylo object, returned read_tree. Also  accepts BIOM object phylogentic tree. file Filename connection write newick file (optional).","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a newick formatted phylogenetic tree. — write_tree","text":"file NULL, newick string character vector. Otherwise,         return value writeChar, typically invsible(NULL).","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a newick formatted phylogenetic tree. — write_tree","text":"","code":"library(rbiom)          infile <- system.file(\"extdata\", \"newick.tre\", package = \"rbiom\")     tree   <- read_tree(infile)     newick <- write_tree(tree)"},{"path":"https://cmmr.github.io/rbiom/reference/write_xlsx.html","id":null,"dir":"Reference","previous_headings":"","what":"Write data and summary information to a Microsoft Excel-compatible workbook. — write_xlsx","title":"Write data and summary information to a Microsoft Excel-compatible workbook. — write_xlsx","text":"Write data summary information Microsoft Excel-compatible workbook.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_xlsx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write data and summary information to a Microsoft Excel-compatible workbook. — write_xlsx","text":"","code":"write_xlsx(biom, outfile, depth = NULL, seed = 0)"},{"path":"https://cmmr.github.io/rbiom/reference/write_xlsx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write data and summary information to a Microsoft Excel-compatible workbook. — write_xlsx","text":"biom BIOM object save file. outfile Path output xlsx file. depth Depth rarefy . See rarefy function details. depth = NULL auto-selects rarefaction level. depth = 0 disables rarefaction.   use depth BIOM files type   'OTU table' integer count values. seed Random seed use rarefying. See rarefy function details.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_xlsx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write data and summary information to a Microsoft Excel-compatible workbook. — write_xlsx","text":"success, returns NULL invisibly.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_xlsx.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Write data and summary information to a Microsoft Excel-compatible workbook. — write_xlsx","text":"data frame, matrix, dist attributes  biom included separate worksheets. attribute named  'Reads Per Step' treated specially merged usual 'Reads Per  Sample' tab.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_xlsx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write data and summary information to a Microsoft Excel-compatible workbook. — write_xlsx","text":"","code":"library(rbiom)          biom <- select(hmp50, 1:10) %>% rarefy()          attr(biom, \"Weighted UniFrac\")   <- unifrac(biom)     attr(biom, \"Unweighted Jaccard\") <- bdiv_distmat(biom, 'jaccard', weighted=FALSE)          outfile <- tempfile(fileext = \".xlsx\")     write_xlsx(biom, outfile)"},{"path":"https://cmmr.github.io/rbiom/news/index.html","id":"rbiom-1039040","dir":"Changelog","previous_headings":"","what":"rbiom 1.0.3.9040","title":"rbiom 1.0.3.9040","text":"Can now disable rarefaction write.xlsx(). Support ‘Decontam’ ‘MicrobiomeDB’ generated BIOM files. Rarefy now handles samples taxa zero observations. write.xlsx exports ‘dist’ ‘matrix’ attributes addition ’data.frame’s Optionally change e.g. “Bacteria; Gracilibacteria; c” “Bacteria; Gracilibacteria; Phylum Gracilibacteria (c)” Fixed crash rarefying biom files last taxa dropped first. Easily pull single column metadata metadata(biom, field). Added apcoa function covariate adjusted principal coordinates analysis. Switched rjson jsonlite better handling non-UTF characters. Support writing biom files compressed gzip bzip2. Added init.cache() function memoise functions heavy-lifting. Can now download files odd characters name. Prevent NUL appended read.biom’s text inputs. alpha.div can now return metadata /subset adiv metrics wide long format. Automagically remove NAs update factors using subset(). taxa.rollup can now return metadata wide long format. beta.div can now return metadata long format. Added stats.table function compute p-vals alpha, beta, taxa metrics. Added sample.sums function count number observations per sample. New functions: depth(), .rarefied(), .phylogeny(), .sequences(). Added plot function - provides stat brackets, patterned fills, overlaid geoms . plot() can now create heatmaps. plot() can now create stacked barplots. Fleshed plot()’s ordination abilities. plot() can now graph regressions (continuous x variable). Added bdply() function working piecemeal BIOM object, la plyr R package. Provenance tracking BIOM object’s ‘history’ attribute. ‘hmp50’ dataset now loads rbiom. subset() can now also subset taxa. Added setter functions many BIOM object attributes.","code":""},{"path":"https://cmmr.github.io/rbiom/news/index.html","id":"breaking-changes-1-0-3-9040","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"rbiom 1.0.3.9040","text":"data.frame returned taxa.rollup() used arrange sample names across columns wide format without metadata, sample names across rows otherwise. Now, sample names always rownames wide format.","code":""},{"path":"https://cmmr.github.io/rbiom/news/index.html","id":"rbiom-103","dir":"Changelog","previous_headings":"","what":"rbiom 1.0.3","title":"rbiom 1.0.3","text":"CRAN release: 2021-11-05 Corrects breaking changes ‘rhdf5’ package.","code":""},{"path":"https://cmmr.github.io/rbiom/news/index.html","id":"rbiom-102","dir":"Changelog","previous_headings":"","what":"rbiom 1.0.2","title":"rbiom 1.0.2","text":"CRAN release: 2020-05-29 Improved compatibility Debian Solaris. ‘rhdf5’ package now optional dependency. select() subset() functions now subset sequences .","code":""},{"path":"https://cmmr.github.io/rbiom/news/index.html","id":"rbiom-100","dir":"Changelog","previous_headings":"","what":"rbiom 1.0.0","title":"rbiom 1.0.0","text":"CRAN release: 2020-05-26 Initial Release","code":""}]
