[{"path":"https://cmmr.github.io/rbiom/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel P. Smith. Author, maintainer, copyright holder.","code":""},{"path":"https://cmmr.github.io/rbiom/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Smith D (2023). rbiom: Read/Write, Analyze, Visualize 'BIOM' Data. R package version 2.0.0.9100, https://cmmr.github.io/rbiom/index.html.","code":"@Manual{,   title = {rbiom: Read/Write, Analyze, and Visualize 'BIOM' Data},   author = {Daniel P. Smith},   year = {2023},   note = {R package version 2.0.0.9100},   url = {https://cmmr.github.io/rbiom/index.html}, }"},{"path":"https://cmmr.github.io/rbiom/index.html","id":"rbiom","dir":"","previous_headings":"","what":"Read/Write, Analyze, and Visualize BIOM Data","title":"Read/Write, Analyze, and Visualize BIOM Data","text":"package toolkit working Biological Observation Matrix (BIOM) files. Features include reading/writing BIOM formats, rarefaction, alpha diversity, beta diversity (including UniFrac), summarizing counts taxonomic level, sample subsetting. Standalone functions reading, writing, subsetting phylogenetic trees also provided. CPU intensive operations encoded C multi-thread support. Reference material available online https://cmmr.github.io/rbiom/index.html Source code can found https://github.com/cmmr/rbiom","code":""},{"path":"https://cmmr.github.io/rbiom/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Read/Write, Analyze, and Visualize BIOM Data","text":"latest stable version can installed CRAN. development version available GitHub.","code":"install.packages(\"rbiom\") install.packages(\"remotes\") remotes::install_github(\"cmmr/rbiom\")"},{"path":"https://cmmr.github.io/rbiom/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Read/Write, Analyze, and Visualize BIOM Data","text":"","code":"library(rbiom)  infile <- system.file(\"extdata\", \"hmp50.bz2\", package = \"rbiom\") biom <- read_biom(infile)  # Rarefy to 1000 reads per sample biom <- sample_rarefy(biom, depth=1000)  # Summarize counts by phylum phyla <- taxa_rollup(biom, 'Phylum') phyla[1:4,1:6]  # Work with metadata table(biom$metadata$Sex, biom$metadata$Body.Site) sprintf(\"Mean age: %.1f\", mean(biom$metadata$Age))  # Draw the phylogenetic tree plot(biom$phylogeny)  # Get unifrac distance matrix dm <- bdiv_distmat(biom, 'unifrac')"},{"path":"https://cmmr.github.io/rbiom/index.html","id":"parallel-processing","dir":"","previous_headings":"","what":"Parallel Processing","title":"Read/Write, Analyze, and Visualize BIOM Data","text":"Computation beta diversity metrics (UniFrac, Bray-Curtis, etc) use available CPU cores default. limit number cores used, can set numThreads option:","code":"RcppParallel::setThreadOptions(numThreads = 4)"},{"path":"https://cmmr.github.io/rbiom/index.html","id":"caching","dir":"","previous_headings":"","what":"Caching","title":"Read/Write, Analyze, and Visualize BIOM Data","text":"Caching enabled default. rbiom store maximum 200MB temporary directory given file.path(tempdir(), \"rbiom\", \"cache\"). following commands can used change cache directory, storage limit (given bytes), key hashing function: Setting cache directory \"FALSE\" disable caching. R options override environment variables.","code":"options(rbiom.cache_dir=\"/tmp/rbiom_cache\") options(rbiom.cache_size=5 * 1024 ^ 2) # 5MB options(rbiom.cache_hash=rlang::hash)  Sys.setenv(RBIOM_CACHE_DIR=\"/tmp/rbiom_cache\") Sys.setenv(RBIOM_CACHE_SIZE=1024 ^ 2) # 1GB"},{"path":"https://cmmr.github.io/rbiom/index.html","id":"building-from-source","dir":"","previous_headings":"","what":"Building from source","title":"Read/Write, Analyze, and Visualize BIOM Data","text":"rbiom requires following system libraries can installed operating system’s package manager. deb (Debian, Ubuntu): libudunits2-dev libssl-dev libxml2-dev libcurl4-openssl-dev libgdal-dev rpm (Fedora, CentOS, RHEL): udunits2-devel openssl-devel libxml2-devel libcurl-devel gdal-devel csw (Solaris): libssl_dev openssl@1.1 libxml2_dev gdal_dev brew (OSX): udunits","code":""},{"path":"https://cmmr.github.io/rbiom/paper.html","id":null,"dir":"","previous_headings":"","what":"Summary","title":"Summary","text":"Microbes live around us, us, even inside bodies. influence health disease profound, beginning fully understood. Studying microbial populations becoming easier modern DNA sequencing technology; examining trends across thousands samples today common. bottleneck longer collecting data, rather analyzing interpreting results. rbiom R package working abundance datasets, OTU ASV counts 16S amplicon sequencing. enables importing/exporting BIOM formats, subsetting, rarefying, manipulation metadata/taxonomy/phylogeny, computation alpha beta diversity metrics, summarizing counts per taxonomic rank. Computationally intensive tasks (including UniFrac [@unifrac]) implemented multithreaded C++ greatly reduce calculation time. Visualization key component rbiom. Rarefaction curves, taxa abundances, alpha diversity, beta diversity can plotted variety graphical formats, including correlation, heatmap, ordination, stacked bar, box plots. rbiom, box plots can combination box, bar, violin, dot, strip, /range layers. plot includes provenance modification history attributes, well ggplot2 [@ggplot2] call used render encourage downstream user customization. Correlations sample metadata microbiome structure can identified mapping one metadata variables interest plot’s axes, facets, /aesthetics. mappings can optionally define color/shape/pattern assignments, category ordering, subsetting parameters. metadata associated axis aesthetic, rbiom automatically run appropriate statistical test, correct multiple comparisons, display significant differences plot, captioning brief methodology. Currently, rbiom can perform four types significance testing. correlation plots numeric metadata variable x-axis (e.g., Age, BMI), linear regression computed R’s lm linear model function. plots two categories (e.g. Male vs Female), Mann-Whitney test [@Mann1947] run R’s wilcox.test. three categories compared, Kruskal-Wallis rank sum test [@Kruskal1952] used instead via R’s kruskal.test function. P-values ordinations derived using adonis2 function vegan R package [@vegan], randomly re-categorizes samples 1,000 times estimate significance observed clustering. P-values corrected multiple comparisons using method described @Benjamini1995 via R’s p.adjust function control false discovery rate. QIIME2 [@qiime2], mothur [@mothur], Phyloseq [@phyloseq] offer overlapping functionality rbiom, important distinctions. first two designed command-line interaction, making difficult integrate R projects. Phyloseq staple R bioinformatics decade, frustratingly slow studies thousands samples. package designed users experience levels. Novice R users appreciate couple commands produce publication-ready figures. Advanced R users can use rbiom complement existing pipelines faster flexible functions. rbiom cross-platform compatible available CRAN conda-forge. latest development version GitHub.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/adiv_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize alpha diversity with boxplots. — adiv_boxplot","title":"Visualize alpha diversity with boxplots. — adiv_boxplot","text":"Visualize alpha diversity boxplots.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/adiv_boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize alpha diversity with boxplots. — adiv_boxplot","text":"","code":"adiv_boxplot(   biom,   x = NULL,   adiv = \"Shannon\",   layers = \"bld\",   color.by = NULL,   pattern.by = NULL,   shape.by = NULL,   facet.by = NULL,   limit.by = NULL,   flip = FALSE,   stripe = NULL,   p.adj = \"fdr\",   p.label = 0.05,   ci = \"ci\",   level = 0.95,   outliers = NULL,   xlab.angle = \"auto\",   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/adiv_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize alpha diversity with boxplots. — adiv_boxplot","text":"biom rbiom-class object, data coercible as_rbiom(). x categorical metadata column name use x-axis. default, NULL, groups samples single category. adiv Alpha diversity metric(s) use. Options : \"OTUs\", \"Shannon\", \"Chao1\", \"Simpson\", /\"InvSimpson\". shortcut adiv=\"\" also exists. Default: \"Shannon\"  Multiple values allowed. Non-ambiguous abbreviations allowed. layers \"bar\", \"box\" (\"x\"), \"violin\", \"dot\", \"strip\", \"crossbar\", \"errorbar\", \"linerange\", \"pointrange\". Single letter abbreviations also accepted. instance, c(\"box\", \"dot\") equivalent c(\"x\", \"d\") \"xd\". See vignette(\"boxplots\") examples . Default: \"bld\". color., pattern., shape., facet., limit.Metadata columns use aesthetics partitioning. Default: NULL flip Transpose axes, taxa present rows instead columns. Default: FALSE stripe Shade every x position. Default: flip p.adj Method use multiple comparisons adjustment p-values. Run p.adjust.methods list available options. Default: \"fdr\". p.label Minimum adjusted p-value display plot bracket. p.label = 0.05 -  Show p-values <= 0.05. p.label = 0 -  show p-values plot. p.label = 1 -  Show p-values plot. numeric vector one value provided, used breaks asterisk notation. Default: 0.05 ci calculate min/max crossbar, errorbar, linerange, pointrange layers. Options : \"ci\" (confidence interval), \"range\", \"sd\" (standard deviation), \"se\" (standard error), \"mad\" (median absolute deviation). center mark crossbar pointrange represents mean, except code\"mad\" case represents median. Default: \"ci\" level confidence level calculating confidence interval. Default: 0.95 outliers Show boxplot outliers? TRUE always show. FALSE always hide. NULL hide overlaying dot strip chart.  Default: NULL xlab.angle Angle labels bottom plot. Options \"auto\", '0', '30', '90'. Default: \"auto\". ... Parameters matched formal arguments ggplot2 functions. Prefixing parameter names layer name ensures particular parameter passed , , layer. instance, dot.size = 2 d.size = 2 ensures dotplot layer size set 2. special prefix pt. control dot strip layers.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/adiv_boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize alpha diversity with boxplots. — adiv_boxplot","text":"ggplot2 plot.  computed data points, statistics, ggplot command, object history available $data, $stats, $code, $history, respectively.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/adiv_boxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize alpha diversity with boxplots. — adiv_boxplot","text":"","code":"library(rbiom)          biom <- sample_rarefy(hmp50)          adiv_boxplot(biom, x=\"Sex\", adiv=c(\"otu\", \"shan\"), color.by=\"Body Site\")           adiv_boxplot(biom, x=\"body\", adiv=\"all\", layers=\"p\", color.by=\"sex\", flip=TRUE)           adiv_boxplot(biom, x=\"Body Site\", color.by=\"Body Site\")                # Each plot object includes additional information.     fig <- adiv_boxplot(biom, x=\"Body Site\")          ## Provenance History ---------------------     fig$history #> biom <- sample_rarefy(rbiom::hmp50) #> fig  <- adiv_boxplot(biom, \"Body Site\")          ## Computed Data Points -------------------     fig$data #> # A tibble: 49 × 6 #>    .sample .depth .adiv      .y `Body Site`    .group         #>  * <chr>    <dbl> <fct>   <dbl> <fct>          <chr>          #>  1 HMP01     1183 Shannon  1.76 Buccal mucosa  Buccal mucosa  #>  2 HMP02     1183 Shannon  2.60 Buccal mucosa  Buccal mucosa  #>  3 HMP03     1183 Shannon  2.92 Saliva         Saliva         #>  4 HMP04     1183 Shannon  3.26 Saliva         Saliva         #>  5 HMP05     1183 Shannon  1.40 Buccal mucosa  Buccal mucosa  #>  6 HMP06     1183 Shannon  3.03 Saliva         Saliva         #>  7 HMP07     1183 Shannon  1.24 Buccal mucosa  Buccal mucosa  #>  8 HMP08     1183 Shannon  2.49 Saliva         Saliva         #>  9 HMP09     1183 Shannon  3.56 Saliva         Saliva         #> 10 HMP10     1183 Shannon  1.72 Anterior nares Anterior nares #> # ℹ 39 more rows          ## Statistics Table -----------------------     fig$stats #> # Test:     wilcox.test(.y ~ `Body Site`). #> # A tibble: 10 × 8 #>    `Body Site`                  .n .stat .estimate .lower .upper  .p.val  .adj.p #>    <fct>                     <dbl> <dbl>     <dbl>  <dbl>  <dbl>   <dbl>   <dbl> #>  1 Anterior nares - Saliva      20     0   -1.54   -1.87  -1.31  1.08e-5 4.34e-5 #>  2 Mid vagina - Saliva          20     0   -2.71   -3.04  -2.41  1.08e-5 4.34e-5 #>  3 Anterior nares - Stool       19     0   -1.09   -1.35  -0.783 2.17e-5 4.34e-5 #>  4 Buccal mucosa - Saliva       20     1   -1.68   -2.19  -0.982 2.17e-5 4.34e-5 #>  5 Mid vagina - Stool           19     0   -2.23   -2.52  -1.93  2.17e-5 4.34e-5 #>  6 Buccal mucosa - Stool        19     8   -1.16   -1.7   -0.447 1.45e-3 1.87e-3 #>  7 Anterior nares - Mid vag…    20    90    1.16    0.771  1.56  1.5 e-3 1.87e-3 #>  8 Buccal mucosa - Mid vagi…    20    90    1.07    0.381  1.69  1.5 e-3 1.87e-3 #>  9 Saliva - Stool               19    80    0.526   0.186  0.824 2.99e-3 3.32e-3 #> 10 Anterior nares - Buccal …    20    51    0.0129 -0.515  0.584 9.71e-1 9.71e-1          ## ggplot2 Command ------------------------     fig$code #> ggplot(data) + #>   geom_rect( #>     mapping = aes(xmin = -Inf, xmax = Inf, ymin = 4.52, ymax = Inf),  #>     color   = NA,  #>     fill    = \"white\" ) + #>   geom_bar( #>     mapping = aes(x = `Body Site`, y = .y),  #>     stat    = \"summary\",  #>     alpha   = 0.6,  #>     fun     = \"mean\" ) + #>   ggbeeswarm::geom_beeswarm( #>     mapping = aes(x = `Body Site`, y = .y),  #>     method  = \"center\",  #>     cex     = 0.5,  #>     corral  = \"random\",  #>     alpha   = 0.4,  #>     color   = \"black\",  #>     fill    = \"black\",  #>     size    = 1.14,  #>     stroke  = 0 ) + #>   geom_linerange( #>     mapping = aes(x = `Body Site`, y = .y, ymin = .ymin, ymax = .ymax),  #>     data    = ~attr(., \"vline\") ) + #>   geom_segment( #>     mapping = aes(x = .x, xend = .xend, y = .y, yend = .yend),  #>     data    = ~attr(., \"stat_brackets\") ) + #>   geom_text( #>     mapping = aes(x = .x, y = .y, label = .label),  #>     data    = ~attr(., \"stat_labels\"),  #>     parse   = TRUE,  #>     size    = 3,  #>     vjust   = 0 ) + #>   labs( #>     y        = \"Shannon Diversity\" ) + #>   scale_x_discrete() + #>   scale_y_continuous( #>     breaks = c(0, 1, 2, 3, 4),  #>     expand = c(0.02, 0, 0.08, 0) ) + #>   theme_bw() + #>   theme( #>     text               = element_text(size = 14),  #>     axis.text.x        = element_text(hjust = 0, vjust = 1, angle = -30),  #>     panel.grid.major.x = element_blank(),  #>     plot.subtitle      = element_text(size = 9),  #>     plot.margin        = unit(x = c(0.1, 0.329, 0.1, 0.1), units = \"inches\") )"},{"path":"https://cmmr.github.io/rbiom/reference/adiv_corrplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize alpha diversity with scatterplots and trendlines. — adiv_corrplot","title":"Visualize alpha diversity with scatterplots and trendlines. — adiv_corrplot","text":"Visualize alpha diversity scatterplots trendlines.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/adiv_corrplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize alpha diversity with scatterplots and trendlines. — adiv_corrplot","text":"","code":"adiv_corrplot(   biom,   x,   adiv = \"Shannon\",   layers = \"t\",   color.by = NULL,   facet.by = NULL,   limit.by = NULL,   test = \"trends\",   model = \"lm\",   p.adj = \"fdr\",   level = 0.95,   caption = FALSE,   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/adiv_corrplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize alpha diversity with scatterplots and trendlines. — adiv_corrplot","text":"biom rbiom-class object, data coercible as_rbiom(). x numeric metadata field use x-axis. Required. adiv Alpha diversity metric(s) use. Options : \"OTUs\", \"Shannon\", \"Chao1\", \"Simpson\", /\"InvSimpson\". shortcut adiv=\"\" also exists. Default: \"Shannon\"  Multiple values allowed. Non-ambiguous abbreviations allowed. layers \"trend\", \"scatter\". Single letter abbreviations also accepted. instance, c(\"trend\", \"scatter\") equivalent c(\"t\", \"s\") \"ts\". See vignette(\"corrplots\") examples . Default: \"t\". color., facet., limit.Metadata columns use aesthetics partitioning. See details. Default: NULL test statistic interest. overview options can found \"Statistical Tests\" section . One \"predict\", \"terms\", \"fit\", \"means\", \"trends\", \"es_means\", \"es_trends\", \"pw_means\", \"pw_trends\". Default: \"trends\" model type trend model fit data. Options : \"lm\" (linear), \"log\" (logarithmic), \"gam\" (generalized additive). See \"Model Options\" section additional details. Default: \"lm\" p.adj Method use multiple comparisons adjustment p-values. Run p.adjust.methods list available options. Default: \"fdr\". level confidence level calculating confidence interval. Default: 0.95 caption Display information method used trend line fitting beneath plot. Default: FALSE. ... Additional parameters pass along ggplot2 functions. Prefix parameter name either t. s./pt. ensure gets passed () geom_smooth geom_point, respectively. instance, s.size = 2 ensures scatterplot points size set 2.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/adiv_corrplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize alpha diversity with scatterplots and trendlines. — adiv_corrplot","text":"ggplot2 plot.  computed data points, statistics, ggplot command, object history available $data, $stats, $code, $history, respectively.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/adiv_corrplot.html","id":"statistical-tests","dir":"Reference","previous_headings":"","what":"Statistical Tests","title":"Visualize alpha diversity with scatterplots and trendlines. — adiv_corrplot","text":"\"predict\" -  Augments original data fitted information. See broom::augment.lm(). \"terms\" -  Summary information model's terms, including p-value, r-squared, AIC, BIC, confidence interval level. See broom::tidy.lm(). \"fit\" -  Goodness fit measures, p-values, overall model. See broom::glance.lm(). \"means\" -  estimated marginal mean (EMM) stat.group, along confidence intervals (CI), standard errors (SE), t-ratios, p-values testing mean = zero. See emmeans::emmeans() emmeans::summary.emmGrid(). \"trends\" -  trendline slope stat.group, along CI SE p-value testing slope = zero. See emmeans::emtrends() emmeans::summary.emmGrid(). \"pw_means\" -  Pairwise means. stat.groups compared difference means estimated along SE, t-ratios, p-values testing two means . See emmeans::pairs.emmGrid(). \"pw_trends\" -  Pairwise trends. , comparing trendline slopes instead means. \"es_means\" -  Effect sizes pairwise differences means, including SE CI. See emmeans::eff_size(). \"es_trends\" -  Effect sizes pairwise differences slopes, including SE CI. See emmeans::eff_size().","code":""},{"path":"https://cmmr.github.io/rbiom/reference/adiv_corrplot.html","id":"model-options","dir":"Reference","previous_headings":"","what":"Model Options","title":"Visualize alpha diversity with scatterplots and trendlines. — adiv_corrplot","text":"predefined options : \"lm\" -   Linear model: stats::lm(formula = y ~ x).) \"log\" -  Logarithmic model: stats::lm(formula = y ~ log(x)). \"gam\" -  Generalized additive model: mgcv::gam(formula = y ~ s(x, bs = \"cs\"), method = \"REML\"). can alternatively provide list length two first element character vector length 1 naming function, second element list arguments pass function. One function's arguments must named 'formula'. example, model = list(\"stats::lm\", list(formula = y ~ x)).","code":""},{"path":"https://cmmr.github.io/rbiom/reference/adiv_corrplot.html","id":"aesthetics-and-partitions","dir":"Reference","previous_headings":"","what":"Aesthetics and Partitions","title":"Visualize alpha diversity with scatterplots and trendlines. — adiv_corrplot","text":"Metadata can used flexibly subset, partition, apply aesthetics creating plot. Common use cases provided . thorough documentation available https://cmmr.github.io/rbiom. color.- metadata column. (Max 1) facet.- categorical metadata column(s). limit.- metadata column(s). built-color palettes colorblind-friendly. available categorical palette names : \"okabe\", \"carto\", \"r4\", \"polychrome\", \"tol\", \"bright\", \"light\", \"muted\", \"vibrant\", \"tableau\", \"classic\", \"alphabet\", \"tableau20\", \"kelly\", \"fishy\". available numeric palette names : \"reds\", \"oranges\", \"greens\", \"purples\", \"grays\", \"acton\", \"bamako\", \"batlow\", \"bilbao\", \"buda\", \"davos\", \"devon\", \"grayC\", \"hawaii\", \"imola\", \"lajolla\", \"lapaz\", \"nuuk\", \"oslo\", \"tokyo\", \"turku\", \"bam\", \"berlin\", \"broc\", \"cork\", \"lisbon\", \"roma\", \"tofino\", \"vanimo\", \"vik\"","code":"## Colors ----------------------------   color.by = \"Body Site\"   color.by = list('Body Site' = \"bright\")   color.by = list('Body Site' = c(\"Stool\", \"Saliva\"))   color.by = list('Body Site' = list('values' = c(\"Stool\", \"Saliva\"), 'colors' = \"bright\"))   color.by = list('Body Site' = c('Stool' = \"blue\", 'Saliva' = \"green\"))      ## Facets ----------------------------   facet.by = \"Body Site\"   facet.by = c(\"Body Site\", \"Sex\")   facet.by = list('Body Site' = c(\"Stool\", \"Saliva\"), \"Sex\")      ## Limits ----------------------------   limit.by = list('Sex' = \"Male\", 'Age' = c(20,40))   limit.by = list('Body Site' = c(\"Saliva\", \"Anterior nares\"), 'Age' = c(NA,35))"},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/adiv_corrplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize alpha diversity with scatterplots and trendlines. — adiv_corrplot","text":"","code":"library(rbiom)          biom <- sample_rarefy(hmp50)     adiv_corrplot(biom, \"age\", color.by=\"body\", adiv=c(\"sha\", \"otu\"), facet.by=\"sex\")"},{"path":"https://cmmr.github.io/rbiom/reference/adiv_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a matrix of samples x alpha diversity metrics. — adiv_matrix","title":"Create a matrix of samples x alpha diversity metrics. — adiv_matrix","text":"Create matrix samples x alpha diversity metrics.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/adiv_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a matrix of samples x alpha diversity metrics. — adiv_matrix","text":"","code":"adiv_matrix(biom, rarefy = FALSE)"},{"path":"https://cmmr.github.io/rbiom/reference/adiv_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a matrix of samples x alpha diversity metrics. — adiv_matrix","text":"biom rbiom-class object, data coercible as_rbiom(). rarefy Control /whether rarefactions done prior alpha diversity computations. Options : FALSE -  Use sample's current set observations without applying rarefaction. TRUE -  Automatically select apply single rarefaction. integer -  Rarefy specified depth. Default: FALSE","code":""},{"path":"https://cmmr.github.io/rbiom/reference/adiv_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a matrix of samples x alpha diversity metrics. — adiv_matrix","text":"numeric matrix samples rows columns named Depth, OTUs, Shannon, Chao1, Simpson, InvSimpson.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/adiv_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a matrix of samples x alpha diversity metrics. — adiv_matrix","text":"","code":"library(rbiom)           biom <- sample_select(hmp50, 1:6)     adiv_matrix(biom) #>       Depth OTUs  Shannon     Chao1   Simpson InvSimpson #> HMP01  1660   49 1.741153  59.08333 0.5668414   2.308623 #> HMP02  1371   75 2.587403 104.38889 0.8133914   5.358811 #> HMP03  1353   75 2.950982  90.04167 0.8936622   9.403996 #> HMP04  1895   83 3.255785  93.32143 0.9323645  14.785121 #> HMP05  3939   67 1.462651 127.75000 0.5252255   2.106263 #> HMP06  4150  105 3.087615 131.88889 0.9103916  11.159668 #> attr(,\"history\") #> biom <- sample_select(rbiom::hmp50, c(1, 2, 3, 4, 5, 6)) #> mtx  <- adiv_matrix(biom)"},{"path":"https://cmmr.github.io/rbiom/reference/adiv_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Test alpha diversity differences for significance. — adiv_stats","title":"Test alpha diversity differences for significance. — adiv_stats","text":"Test alpha diversity differences significance.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/adiv_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test alpha diversity differences for significance. — adiv_stats","text":"","code":"adiv_stats(   biom,   stat.by = NULL,   regr = NULL,   adiv = \"Shannon\",   test = ifelse(is.null(regr), \"means\", \"trends\"),   model = \"lm\",   split.by = NULL,   level = 0.95,   p.adj = \"fdr\" )"},{"path":"https://cmmr.github.io/rbiom/reference/adiv_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test alpha diversity differences for significance. — adiv_stats","text":"biom rbiom-class object, data coercible as_rbiom(). stat.categorical metadata field defining statistical groups. Required. regr run regression analysis, set regr numeric metadata field \"x-axis\" values. Leaving regr=NULL generate boxplot-like statistics; non-NULL, corrplot-like statistics returned. Default: NULL adiv Alpha diversity metric(s) use. Options : \"OTUs\", \"Shannon\", \"Chao1\", \"Simpson\", /\"InvSimpson\". shortcut adiv=\"\" also exists. Default: \"Shannon\"  Multiple values allowed. Non-ambiguous abbreviations allowed. test statistic interest. overview options can found \"Statistical Tests\" section . One \"predict\", \"terms\", \"fit\", \"means\", \"trends\", \"es_means\", \"es_trends\", \"pw_means\", \"pw_trends\". Default: ifelse(.null(regr), \"means\", \"trends\") model type trend model fit data. Options : \"lm\" (linear), \"log\" (logarithmic), \"gam\" (generalized additive). See \"Model Options\" section additional details. Default: \"lm\" split.Name(s) metadata columns data split prior calculations. Default: NULL level confidence level calculating confidence interval. Default: 0.95 p.adj Method use multiple comparisons adjustment p-values. Run p.adjust.methods list available options. Default: \"fdr\".","code":""},{"path":"https://cmmr.github.io/rbiom/reference/adiv_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test alpha diversity differences for significance. — adiv_stats","text":"tibble data frame summary statistics. R code generating statistics $code, object history $history.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/adiv_stats.html","id":"statistical-tests","dir":"Reference","previous_headings":"","what":"Statistical Tests","title":"Test alpha diversity differences for significance. — adiv_stats","text":"regr NULL: \"means\" -  Considers groups using Kruskal-Wallis non-parametric test: stats::kruskal.test(). \"pw_means\" -  Pairwise comparison stat.groups using Wilcox rank sum (aka Mann-Whitney) non-parametric test: stats::wilcox.test(). regr NULL: \"predict\" -  Augments original data fitted information. See broom::augment.lm(). \"terms\" -  Summary information model's terms, including p-value, r-squared, AIC, BIC, confidence interval level. See broom::tidy.lm(). \"fit\" -  Goodness fit measures, p-values, overall model. See broom::glance.lm(). \"means\" -  estimated marginal mean (EMM) stat.group, along confidence intervals (CI), standard errors (SE), t-ratios, p-values testing mean = zero. See emmeans::emmeans() emmeans::summary.emmGrid(). \"trends\" -  trendline slope stat.group, along CI SE p-value testing slope = zero. See emmeans::emtrends() emmeans::summary.emmGrid(). \"pw_means\" -  Pairwise means. stat.groups compared difference means estimated along SE, t-ratios, p-values testing two means . See emmeans::pairs.emmGrid(). \"pw_trends\" -  Pairwise trends. , comparing trendline slopes instead means. \"es_means\" -  Effect sizes pairwise differences means, including SE CI. See emmeans::eff_size(). \"es_trends\" -  Effect sizes pairwise differences slopes, including SE CI. See emmeans::eff_size().","code":""},{"path":"https://cmmr.github.io/rbiom/reference/adiv_stats.html","id":"model-options","dir":"Reference","previous_headings":"","what":"Model Options","title":"Test alpha diversity differences for significance. — adiv_stats","text":"predefined options : \"lm\" -   Linear model: stats::lm(formula = y ~ x).) \"log\" -  Logarithmic model: stats::lm(formula = y ~ log(x)). \"gam\" -  Generalized additive model: mgcv::gam(formula = y ~ s(x, bs = \"cs\"), method = \"REML\"). can alternatively provide list length two first element character vector length 1 naming function, second element list arguments pass function. One function's arguments must named 'formula'. example, model = list(\"stats::lm\", list(formula = y ~ x)).","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/adiv_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test alpha diversity differences for significance. — adiv_stats","text":"","code":"library(rbiom)           biom <- sample_rarefy(hmp50)            adiv_stats(biom, stat.by = \"Body Site\") #> # Test:     kruskal.test(.Shannon ~ `Body Site`). #> # A tibble: 1 × 5 #>      .n .stat   .df       .p.val       .adj.p #>   <int> <dbl> <int>        <dbl>        <dbl> #> 1    49  38.7     4 0.0000000804 0.0000000804            adiv_stats(biom, stat.by = \"Sex\", test = \"pw_means\") #> # Test:     wilcox.test(.Shannon ~ Sex). #> # A tibble: 1 × 8 #>   Sex              .n .stat .estimate .lower .upper .p.val .adj.p #>   <fct>         <dbl> <dbl>     <dbl>  <dbl>  <dbl>  <dbl>  <dbl> #> 1 Female - Male    49   167    -0.781  -1.44 -0.183 0.0149 0.0149            adiv_stats(biom, stat.by = \"Body Site\", regr = \"Age\") #> # Test:     Estimated marginal means of linear trends. #> # Model:    stats::lm(.Shannon ~ Age * `Body Site`) #> # A tibble: 5 × 9 #>   `Body Site`    .trend    .se   .df   .lower .upper .t.ratio .p.val .adj.p #>   <fct>           <dbl>  <dbl> <dbl>    <dbl>  <dbl>    <dbl>  <dbl>  <dbl> #> 1 Mid vagina     0.0450 0.0265    39 -0.00858 0.0985    1.70  0.0973  0.487 #> 2 Buccal mucosa  0.0661 0.0554    39 -0.0460  0.178     1.19  0.240   0.601 #> 3 Saliva         0.0228 0.0356    39 -0.0492  0.0948    0.640 0.526   0.737 #> 4 Anterior nares 0.0108 0.0266    39 -0.0430  0.0646    0.406 0.687   0.737 #> 5 Stool          0.0147 0.0434    39 -0.0731  0.103     0.339 0.737   0.737          adiv_stats(biom, stat.by = \"Body Site\", split.by = \"Sex\") #> # Test:     kruskal.test(.Shannon ~ `Body Site`). #> # A tibble: 2 × 6 #>   Sex       .n .stat   .df    .p.val   .adj.p #>   <fct>  <int> <dbl> <int>     <dbl>    <dbl> #> 1 Female    30  24.1     4 0.0000779 0.000156 #> 2 Male      19  13.8     3 0.00325   0.00325"},{"path":"https://cmmr.github.io/rbiom/reference/adiv_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the alpha diversity of each sample. — adiv_table","title":"Calculate the alpha diversity of each sample. — adiv_table","text":"Calculate alpha diversity sample.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/adiv_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the alpha diversity of each sample. — adiv_table","text":"","code":"adiv_table(biom, rarefy = FALSE, adiv = \"Shannon\", md = TRUE)"},{"path":"https://cmmr.github.io/rbiom/reference/adiv_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the alpha diversity of each sample. — adiv_table","text":"biom rbiom-class object, data coercible as_rbiom(). rarefy Control /whether rarefactions done prior alpha diversity computations. Options : FALSE -  Use sample's current set observations without applying rarefaction. TRUE -  Automatically select apply single rarefaction. \"multi\", \"multi_log\", \"multi_even\" -  Automatically select apply multiple rarefactions. \"multi\" provides \"multi_log\" low end \"multi_even\" high end. integer vector -  Rarefy specified depth(s). Default: FALSE adiv Alpha diversity metric(s) use. Options : \"OTUs\", \"Shannon\", \"Chao1\", \"Simpson\", /\"InvSimpson\". shortcut adiv=\"\" also exists. Default: \"Shannon\"  Multiple values allowed. Non-ambiguous abbreviations allowed. md Include metadata output data frame? Options : NULL -  include metadata. TRUE -  Include metadata. character vector -  Include specified metadata columns. Default: TRUE","code":""},{"path":"https://cmmr.github.io/rbiom/reference/adiv_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the alpha diversity of each sample. — adiv_table","text":"data frame alpha diversity values. combination sample/depth/adiv row. Column names .sample, .depth, .adiv, .diversity, followed metadata fields requested md.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/adiv_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the alpha diversity of each sample. — adiv_table","text":"","code":"library(rbiom)           biom <- sample_select(hmp50, 1:6)          adiv_table(biom) #> # A tibble: 6 × 8 #>   .sample .depth .adiv   .diversity   Age   BMI `Body Site`   Sex    #>   <chr>    <dbl> <fct>        <dbl> <dbl> <dbl> <fct>         <fct>  #> 1 HMP01     1660 Shannon       1.74    22    20 Buccal mucosa Female #> 2 HMP02     1371 Shannon       2.59    24    23 Buccal mucosa Male   #> 3 HMP03     1353 Shannon       2.95    28    26 Saliva        Male   #> 4 HMP04     1895 Shannon       3.26    25    23 Saliva        Male   #> 5 HMP05     3939 Shannon       1.46    27    24 Buccal mucosa Female #> 6 HMP06     4150 Shannon       3.09    32    25 Saliva        Male            adiv_table(sample_rarefy(biom), adiv = \"all\", md = FALSE) #> # A tibble: 30 × 4 #>    .sample .depth .adiv   .diversity #>    <fct>    <dbl> <fct>        <dbl> #>  1 HMP01     1353 OTUs         46    #>  2 HMP02     1353 OTUs         75    #>  3 HMP03     1353 OTUs         75    #>  4 HMP04     1353 OTUs         77    #>  5 HMP05     1353 OTUs         40    #>  6 HMP06     1353 OTUs         86    #>  7 HMP01     1353 Shannon       1.74 #>  8 HMP02     1353 Shannon       2.59 #>  9 HMP03     1353 Shannon       2.95 #> 10 HMP04     1353 Shannon       3.25 #> # ℹ 20 more rows"},{"path":"https://cmmr.github.io/rbiom/reference/as_percent.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert absolute counts to relative abundances. — as_percent","title":"Convert absolute counts to relative abundances. — as_percent","text":"Convert absolute counts relative abundances.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/as_percent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert absolute counts to relative abundances. — as_percent","text":"","code":"as_percent(biom)"},{"path":"https://cmmr.github.io/rbiom/reference/as_percent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert absolute counts to relative abundances. — as_percent","text":"biom rbiom-class object, data coercible as_rbiom().","code":""},{"path":"https://cmmr.github.io/rbiom/reference/as_percent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert absolute counts to relative abundances. — as_percent","text":"rbiom object.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/as_percent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert absolute counts to relative abundances. — as_percent","text":"","code":"library(rbiom)          otu_matrix(hmp50)[1:4,1:5] #>          HMP01 HMP02 HMP03 HMP04 HMP05 #> UncO2713     0     0     0     0     0 #> UncO4101     1     5     6    18     5 #> AnmMass2     0     0     0     0     0 #> PreBivi6     0     0     0     0     0          biom <- as_percent(hmp50)     otu_matrix(biom)[1:4,1:5] #>                 HMP01       HMP02      HMP03       HMP04       HMP05 #> UncO2713 0.0000000000 0.000000000 0.00000000 0.000000000 0.000000000 #> UncO4101 0.0006024096 0.003646973 0.00443459 0.009498681 0.001269358 #> AnmMass2 0.0000000000 0.000000000 0.00000000 0.000000000 0.000000000 #> PreBivi6 0.0000000000 0.000000000 0.00000000 0.000000000 0.000000000"},{"path":"https://cmmr.github.io/rbiom/reference/as_rbiom.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert BIOM data to an rbiom object. — as_rbiom","title":"Convert BIOM data to an rbiom object. — as_rbiom","text":"Convert BIOM data rbiom object.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/as_rbiom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert BIOM data to an rbiom object. — as_rbiom","text":"","code":"as_rbiom(biom)"},{"path":"https://cmmr.github.io/rbiom/reference/as_rbiom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert BIOM data to an rbiom object. — as_rbiom","text":"biom Object can coerced rbiom-class object. example: file -  Filepath URL biom file. matrix -  abundance matrix OTUs rows samples columns. phyloseq-class object -  phyloseq Bioconductor R package.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/as_rbiom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert BIOM data to an rbiom object. — as_rbiom","text":"rbiom-class object.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize BIOM data with boxplots. — bdiv_boxplot","title":"Visualize BIOM data with boxplots. — bdiv_boxplot","text":"Visualize BIOM data boxplots.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize BIOM data with boxplots. — bdiv_boxplot","text":"","code":"bdiv_boxplot(   biom,   x = NULL,   bdiv = \"Bray-Curtis\",   weighted = TRUE,   tree = NULL,   layers = \"bld\",   color.by = NULL,   pattern.by = NULL,   shape.by = NULL,   facet.by = NULL,   limit.by = NULL,   within = NULL,   between = NULL,   flip = FALSE,   stripe = NULL,   p.adj = \"fdr\",   p.label = 0.05,   ci = \"ci\",   level = 0.95,   outliers = NULL,   xlab.angle = \"auto\",   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize BIOM data with boxplots. — bdiv_boxplot","text":"biom rbiom-class object, data coercible as_rbiom(). x categorical metadata column name. Prefix column name == != limit comparisons within groups, respectively. default, NULL groups distances single column. bdiv Beta diversity distance algorithm(s) use. Options : \"Bray-Curtis\", \"Manhattan\", \"Euclidean\", \"Jaccard\", \"UniFrac\". \"UniFrac\", phylogenetic tree must present biom explicitly provided via tree=. Default: \"Bray-Curtis\"  Multiple/abbreviated values allowed. weighted Take relative abundances account. weighted=FALSE, presence/absence considered. Default: TRUE  Multiple values allowed. tree phylo object representing phylogenetic relationships taxa biom. required computing UniFrac distances. Default: otu_tree(biom) layers \"bar\", \"box\" (\"x\"), \"violin\", \"dot\", \"strip\", \"crossbar\", \"errorbar\", \"linerange\", \"pointrange\". Single letter abbreviations also accepted. instance, c(\"box\", \"dot\") equivalent c(\"x\", \"d\") \"xd\". See vignette(\"boxplots\") examples . Default: \"bld\". color., pattern., shape., facet., limit.Metadata columns use data partitioning. Prefix column name == != limit comparisons within groups, respectively. Default: NULL within, Metadata field(s) intra- inter- sample comparisons. Default: NULL flip Transpose axes, taxa present rows instead columns. Default: FALSE stripe Shade every x position. Default: flip p.adj Method use multiple comparisons adjustment p-values. Run p.adjust.methods list available options. Default: \"fdr\". p.label Minimum adjusted p-value display plot bracket. p.label = 0.05 -  Show p-values <= 0.05. p.label = 0 -  show p-values plot. p.label = 1 -  Show p-values plot. numeric vector one value provided, used breaks asterisk notation. Default: 0.05 ci calculate min/max crossbar, errorbar, linerange, pointrange layers. Options : \"ci\" (confidence interval), \"range\", \"sd\" (standard deviation), \"se\" (standard error), \"mad\" (median absolute deviation). center mark crossbar pointrange represents mean, except code\"mad\" case represents median. Default: \"ci\" level confidence level calculating confidence interval. Default: 0.95 outliers Show boxplot outliers? TRUE always show. FALSE always hide. NULL hide overlaying dot strip chart.  Default: NULL xlab.angle Angle labels bottom plot. Options \"auto\", '0', '30', '90'. Default: \"auto\". ... Parameters matched formal arguments ggplot2 functions. Prefixing parameter names layer name ensures particular parameter passed , , layer. instance, dot.size = 2 d.size = 2 ensures dotplot layer size set 2. special prefix pt. control dot strip layers.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize BIOM data with boxplots. — bdiv_boxplot","text":"ggplot2 plot.  computed data points, statistics, ggplot command, object history available $data, $stats, $code, $history, respectively.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_boxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize BIOM data with boxplots. — bdiv_boxplot","text":"","code":"library(rbiom)          biom <- sample_rarefy(hmp50)     bdiv_boxplot(biom, x=\"==Body Site\", bdiv=\"UniFrac\", color.by=\"Body Site\")"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_distmat.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a distance matrix of samples vs samples. — bdiv_distmat","title":"Make a distance matrix of samples vs samples. — bdiv_distmat","text":"Make distance matrix samples vs samples.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_distmat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a distance matrix of samples vs samples. — bdiv_distmat","text":"","code":"bdiv_distmat(biom, bdiv = \"Bray-Curtis\", weighted = TRUE, tree = NULL)"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_distmat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a distance matrix of samples vs samples. — bdiv_distmat","text":"biom rbiom-class object, data coercible as_rbiom(). bdiv Beta diversity distance algorithm(s) use. Options : \"Bray-Curtis\", \"Manhattan\", \"Euclidean\", \"Jaccard\", \"UniFrac\". \"UniFrac\", phylogenetic tree must present biom explicitly provided via tree=. Default: \"Bray-Curtis\" weighted Take relative abundances account. weighted=FALSE, presence/absence considered. Default: TRUE tree phylo object representing phylogenetic relationships taxa biom. required computing UniFrac distances. Default: otu_tree(biom)","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_distmat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a distance matrix of samples vs samples. — bdiv_distmat","text":"dist-class distance matrix.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_distmat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a distance matrix of samples vs samples. — bdiv_distmat","text":"","code":"library(rbiom)          biom <- sample_select(hmp50, 1:10)     dm   <- bdiv_distmat(biom, 'unifrac')     as.matrix(dm)[1:4,1:4] #>           HMP01     HMP02     HMP03     HMP04 #> HMP01 0.0000000 0.1950253 0.3687298 0.4239831 #> HMP02 0.1950253 0.0000000 0.2101679 0.3187533 #> HMP03 0.3687298 0.2101679 0.0000000 0.3040937 #> HMP04 0.4239831 0.3187533 0.3040937 0.0000000     plot(hclust(dm))"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Display beta diversities in an all vs all grid. — bdiv_heatmap","title":"Display beta diversities in an all vs all grid. — bdiv_heatmap","text":"Display beta diversities vs grid.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display beta diversities in an all vs all grid. — bdiv_heatmap","text":"","code":"bdiv_heatmap(   biom,   bdiv = \"Bray-Curtis\",   weighted = TRUE,   tree = NULL,   grid = list(label = \"Distance\", colors = \"-bilbao\"),   color.by = NULL,   order.by = NULL,   limit.by = NULL,   label = TRUE,   label_size = NULL,   rescale = \"none\",   ratio = 1,   clust = \"complete\",   trees = TRUE,   tree_height = NULL,   track_height = NULL,   legend = \"right\",   xlab.angle = \"auto\",   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display beta diversities in an all vs all grid. — bdiv_heatmap","text":"biom rbiom-class object, data coercible as_rbiom(). bdiv Beta diversity distance algorithm(s) use. Options : \"Bray-Curtis\", \"Manhattan\", \"Euclidean\", \"Jaccard\", \"UniFrac\". \"UniFrac\", phylogenetic tree must present biom explicitly provided via tree=. Default: \"Bray-Curtis\"  Multiple/abbreviated values allowed. weighted Take relative abundances account. weighted=FALSE, presence/absence considered. Default: TRUE  Multiple values allowed. tree phylo object representing phylogenetic relationships taxa biom. required computing UniFrac distances. Default: otu_tree(biom) grid Color palette name, list entries label, colors, range, bins, na.color, /guide. See Track Definitions section details. Default: list(label = \"Distance\", colors = \"-bilbao\"). color.Add annotation tracks metadata column(s). See \"Annotation Tracks\" section details. Default: NULL order.metadata column(s) use ordering samples across x y axes. Overrides clust argument. See \"Ordering Limiting\" section details. Default: NULL limit.Metadata definition(s) use sample subsetting prior calculations. See \"Ordering Limiting\" section details. Default: NULL label Label matrix rows columns. can supply list logical vector length two control row labels column labels separately, example label = c(rows = TRUE, cols = FALSE), simply label = c(T, F). valid options \"rows\", \"cols\", \"\", \"bottom\", \"right\", \"none\". Default: TRUE. label_size font size use row column labels. can supply numeric vector length two control row label sizes column label sizes separately, example c(rows = 20, cols = 8), simply c(20, 8). Default: NULL, computes: pmax(8, pmin(20, 100 / dim(mtx))). rescale Rescale rows columns common min/max. Options: \"none\", \"rows\", \"cols\". Default: \"none\". ratio Height/width ratio entire grid. Default: 1 (square). clust Clustering algorithm reordering rows columns similarity. can supply list character vector length two control row column clustering separately, example clust = c(rows = \"complete\", cols = NA), simply clust = c(\"complete\", NA). Options : FALSE NA -  Disable reordering. hclust class object E.g. stats::hclust(). method name -  \"ward.D\", \"ward.D2\", \"single\", \"complete\", \"average\", \"mcquitty\", \"median\", \"centroid\". Default: \"complete\". trees Draw dendrogram rows (left) columns (top). can supply list logical vector length two control row tree column tree separately, example trees = c(rows = T, cols = F), simply trees = c(T, F). valid options \"rows\", \"cols\", \"\", \"left\", \"top\", \"none\". Default: TRUE. tree_height, track_height height dendrogram annotation tracks multiples (fractions) smaller dimension grid cell size. Use numeric vector length two assign c(left, top) independently. Default: NULL, computes: tree_height = sqrt(min(dim(mtx))), track_height = tree_height / 4. legend place legend. Options : \"right\" \"bottom\". Default: \"right\". xlab.angle Angle labels bottom plot. Options \"auto\", '0', '30', '90'. Default: \"auto\". ... Additional arguments pass ggplot2::theme(). example, labs.title = \"Plot Title\".","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display beta diversities in an all vs all grid. — bdiv_heatmap","text":"ggplot2 plot.  computed data points, ggplot command, object history available $data, $code, $history, respectively.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_heatmap.html","id":"annotation-tracks","dir":"Reference","previous_headings":"","what":"Annotation Tracks","title":"Display beta diversities in an all vs all grid. — bdiv_heatmap","text":"Metadata can displayed colored tracks heatmap. Common use cases provided , thorough documentation available https://cmmr.github.io/rbiom . following entries track definitions understood: colors -  pre-defined palette name custom set colors map . range -  c(min,max) use scale values. label -  Label track. Defaults name list element. side -  Options \"top\" (default) \"left\". na.color -  color use NA values. bins -  Bin gradient many bins/steps. guide -  list arguments guide_colorbar() guide_legend(). built-color palettes colorblind-friendly. Categorical palette names: \"okabe\", \"carto\", \"r4\", \"polychrome\", \"tol\", \"bright\", \"light\", \"muted\", \"vibrant\", \"tableau\", \"classic\", \"alphabet\", \"tableau20\", \"kelly\", \"fishy\". Numeric palette names: \"reds\", \"oranges\", \"greens\", \"purples\", \"grays\", \"acton\", \"bamako\", \"batlow\", \"bilbao\", \"buda\", \"davos\", \"devon\", \"grayC\", \"hawaii\", \"imola\", \"lajolla\", \"lapaz\", \"nuuk\", \"oslo\", \"tokyo\", \"turku\", \"bam\", \"berlin\", \"broc\", \"cork\", \"lisbon\", \"roma\", \"tofino\", \"vanimo\", \"vik\".","code":"## Categorical ---------------------------- color.by = \"Body Site\" color.by = list('Body Site' = \"bright\") color.by = list('Body Site' = c(\"Stool\", \"Saliva\"), 'colors' = \"bright\") color.by = list('Body Site' = c('Stool' = \"blue\", 'Saliva' = \"green\"))  ## Numeric -------------------------------- color.by = \"Age\" color.by = list('Age' = \"reds\") color.by = list('Age' = c(20,NA), 'colors' = \"reds\") # at least 20 years old color.by = list('Age' = c(20,40)) # between 20 and 40 years old (inclusive)  ## Multiple Tracks ------------------------ color.by = c(\"Body Site\", \"Age\") color.by = list('Body Site' = \"bright\", 'Age' = \"reds\") color.by = list(   'Body Site' = c('Stool' = \"blue\", 'Saliva' = \"green\"),   'Age'       = list(range = c(20,40), 'colors' = \"reds\") )"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_heatmap.html","id":"ordering-and-limiting","dir":"Reference","previous_headings":"","what":"Ordering and Limiting","title":"Display beta diversities in an all vs all grid. — bdiv_heatmap","text":"order.controls metadata column(s) used arrange samples plot. also enables subsetting particular set range values. Prefix column name - arrange values descending order rather ascending. limit.used specify subset samples without side-effects aesthetics. especially useful limiting data single categorical metadata value. Unlike *.parameters, limit.must always named list().","code":"## Categorical ---------------------------- order.by = \"Body Site\" order.by = list('Body Site' = c(\"Stool\", \"Saliva\"))  ## Numeric -------------------------------- order.by = \"-Age\" order.by = list('Age'  = c(20,NA)) # at least 20 years old order.by = list('-Age' = c(20,40)) # between 20 and 40 years old (inclusive)  ## Multiple / Mixed ----------------------- order.by = c(\"-Body Site\", \"Age\") order.by = list(\"Body Site\", '-Age' = c(20,40)) ## Categorical ---------------------------- limit.by = list('Sex' = \"Male\")  ## Numeric -------------------------------- limit.by = list('Age' = c(20,NA)) # at least 20 years old limit.by = list('Age' = c(20,40)) # between 20 and 40 years old (inclusive)  ## Multiple / Mixed ----------------------- limit.by = list(   'Sex'       = \"Male\",    'Body Site' = c(\"Stool\", \"Saliva\")   'Age'       = c(20,40) )"},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display beta diversities in an all vs all grid. — bdiv_heatmap","text":"","code":"library(rbiom)      biom <- hmp50 %>% sample_rarefy() %>% sample_select(1:10)   bdiv_heatmap(biom, color.by=c(\"Body Site\", \"Age\"))       bdiv_heatmap(biom, bdiv=\"uni\", weighted=c(T,F), color.by=\"sex\")"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_ord_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Ordinate samples and taxa on a 2D plane based on beta diversity distances. — bdiv_ord_plot","title":"Ordinate samples and taxa on a 2D plane based on beta diversity distances. — bdiv_ord_plot","text":"Ordinate samples taxa 2D plane based beta diversity distances.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_ord_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ordinate samples and taxa on a 2D plane based on beta diversity distances. — bdiv_ord_plot","text":"","code":"bdiv_ord_plot(   biom,   bdiv = \"Bray-Curtis\",   ord = \"UMAP\",   weighted = TRUE,   layers = \"petm\",   color.by = NULL,   shape.by = NULL,   facet.by = NULL,   limit.by = NULL,   tree = NULL,   test = \"adonis2\",   seed = 0,   permutations = 999,   rank = -1,   taxa = 5,   p.top = Inf,   p.adj = \"fdr\",   unc = \"singly\",   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_ord_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ordinate samples and taxa on a 2D plane based on beta diversity distances. — bdiv_ord_plot","text":"biom rbiom-class object, data coercible as_rbiom(). bdiv Beta diversity distance algorithm(s) use. Options : \"Bray-Curtis\", \"Manhattan\", \"Euclidean\", \"Jaccard\", \"UniFrac\". \"UniFrac\", phylogenetic tree must present biom explicitly provided via tree=. Default: \"Bray-Curtis\"  Multiple/abbreviated values allowed. ord Method reducing dimensionality. Options : \"UMAP\" -  Uniform manifold approximation projection; uwot::umap(). \"PCoA\" -  Principal coordinate analysis; ape::pcoa(). \"NMDS\" -  Nonmetric multidimensional scaling; vegan::metaMDS(). \"tSNE\" -  t-distributed stochastic neighbor embedding; tsne::tsne(). Default: \"UMAP\"  Multiple values allowed. Non-ambiguous abbreviations allowed. weighted Take relative abundances account. weighted=FALSE, presence/absence considered. Default: TRUE  Multiple values allowed. layers graphical elements use drawing. Options : point, spider, ellipse, name samples, mean, taxon, arrow taxa. Single letter abbreviations also accepted. instance, c(\"point\", \"ellipse\") equivalent c(\"p\", \"e\") \"pe\". See vignette(\"ordination\") vignette examples . Default: \"pe\" color., shape., facet., limit.Metadata columns use aesthetics partitioning. See details. Default: NULL tree phylo object representing phylogenetic relationships taxa biom. required computing UniFrac distances. Default: otu_tree(biom) test Permutational test accessing significance. Options : \"adonis2\" -  Permutational MANOVA; vegan::adonis2(). \"mrpp\" -  Multiple response permutation procedure; vegan::mrpp(). Default: \"adonis2\"  Abbreviations allowed. seed Random seed permutations. Default: 0 permutations Number random permutations use. Default: 999 rank rank(s) taxa display. E.g. \"Phylum\", \"Genus\", \".otu\", etc. integer vector can also given, 1 highest rank, 2 second highest, -1 lowest rank, -2 second lowest, 0 OTU \"rank\". Run taxa_ranks() see options given rbiom object. Default: -1. taxa taxa display. integer value show top n abundant taxa. value 0 <= n < 1 show taxa mean abundance greater (e.g. 0.1 implies >= 10%). character vector taxa names show named taxa. Default: 6. p.top display taxa significant differences abundance. p.top >= 1, p.top significant taxa displayed. p.top less one, taxa adjusted p-value <= p.top displayed. Recommended used combination taxa parameter set lower bound mean abundance considered taxa. Default: Inf p.adj Method use multiple comparisons adjustment p-values. Run p.adjust.methods list available options. Default: \"fdr\". unc handle unclassified, uncultured, similarly ambiguous taxa names. Options : \"singly\" -  Replaces OTU name. \"grouped\" -  Replaces higher rank's name. \"drop\" -  Excludes result. \"asis\" -  check/modify taxa names. Default: \"singly\"  Abbreviations allowed. ... Parameters layer geoms (e.g. ggplot2::geom_point()). Prefixing parameter names layer name ensures particular parameter passed , , layer. instance, point.size = 2 p.size = 2 ensures points size set 2. Points can also controlled pt. prefix.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_ord_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ordinate samples and taxa on a 2D plane based on beta diversity distances. — bdiv_ord_plot","text":"ggplot2 plot. computed sample coordinates, ggplot command, object history available $data, $code, $history, respectively. color.given, $stats $stats$code set. rank given, $data$taxa_coords, $taxa_stats, $taxa_stats$code set.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_ord_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ordinate samples and taxa on a 2D plane based on beta diversity distances. — bdiv_ord_plot","text":"","code":"library(rbiom)          biom <- sample_rarefy(hmp50)     bdiv_ord_plot(biom, layers=\"pemt\", color.by=\"Body Site\", rank=\"g\")"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_ord_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate PCoA and other ordinations, including taxa biplots and statistics. — bdiv_ord_table","title":"Calculate PCoA and other ordinations, including taxa biplots and statistics. — bdiv_ord_table","text":"biplot parameters (taxa, unc, p.top, p.adj) effect rank NULL.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_ord_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate PCoA and other ordinations, including taxa biplots and statistics. — bdiv_ord_table","text":"","code":"bdiv_ord_table(   biom,   bdiv = \"Bray-Curtis\",   ord = \"UMAP\",   weighted = TRUE,   md = NULL,   k = 2,   split.by = NULL,   stat.by = NULL,   tree = NULL,   within = NULL,   between = NULL,   test = \"adonis2\",   seed = 0,   permutations = 999,   rank = -1,   taxa = 5,   p.top = Inf,   p.adj = \"fdr\",   unc = \"singly\",   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_ord_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate PCoA and other ordinations, including taxa biplots and statistics. — bdiv_ord_table","text":"biom rbiom-class object, data coercible as_rbiom(). bdiv Beta diversity distance algorithm(s) use. Options : \"Bray-Curtis\", \"Manhattan\", \"Euclidean\", \"Jaccard\", \"UniFrac\". \"UniFrac\", phylogenetic tree must present biom explicitly provided via tree=. Default: \"Bray-Curtis\"  Multiple/abbreviated values allowed. ord Method reducing dimensionality. Options : \"UMAP\" -  Uniform manifold approximation projection; uwot::umap(). \"PCoA\" -  Principal coordinate analysis; ape::pcoa(). \"NMDS\" -  Nonmetric multidimensional scaling; vegan::metaMDS(). \"tSNE\" -  t-distributed stochastic neighbor embedding; tsne::tsne(). Default: \"UMAP\"  Multiple values allowed. Non-ambiguous abbreviations allowed. weighted Take relative abundances account. weighted=FALSE, presence/absence considered. Default: TRUE  Multiple values allowed. md Include metadata output data frame? Options : NULL -  include metadata. TRUE -  Include metadata. character vector -  Include specified metadata columns. Default: TRUE k Number ordination dimensions return. Either 2L 3L. Default: 2L split.Name(s) metadata columns data split prior calculations. Default: NULL stat.categorical numeric metadata field statistics calculated. Required. tree phylo object representing phylogenetic relationships taxa biom. required computing UniFrac distances. Default: otu_tree(biom) within, Metadata field(s) intra- inter- sample comparisons. Default: NULL test Permutational test accessing significance. Options : \"adonis2\" -  Permutational MANOVA; vegan::adonis2(). \"mrpp\" -  Multiple response permutation procedure; vegan::mrpp(). Default: \"adonis2\"  Abbreviations allowed. seed Random seed permutations. Default: 0 permutations Number random permutations use. Default: 999 rank rank(s) taxa display. E.g. \"Phylum\", \"Genus\", \".otu\", etc. integer vector can also given, 1 highest rank, 2 second highest, -1 lowest rank, -2 second lowest, 0 OTU \"rank\". Run taxa_ranks() see options given rbiom object. Default: -1. taxa taxa display. integer value show top n abundant taxa. value 0 <= n < 1 show taxa mean abundance greater (e.g. 0.1 implies >= 10%). character vector taxa names show named taxa. Default: 6. p.top display taxa significant differences abundance. p.top >= 1, p.top significant taxa displayed. p.top less one, taxa adjusted p-value <= p.top displayed. Recommended used combination taxa parameter set lower bound mean abundance considered taxa. Default: Inf p.adj Method use multiple comparisons adjustment p-values. Run p.adjust.methods list available options. Default: \"fdr\". unc handle unclassified, uncultured, similarly ambiguous taxa names. Options : \"singly\" -  Replaces OTU name. \"grouped\" -  Replaces higher rank's name. \"drop\" -  Excludes result. \"asis\" -  check/modify taxa names. Default: \"singly\"  Abbreviations allowed. ... Additional arguments pass uwot::umap(), ape::pcoa(), vegan::metaMDS(), tsne::tsne().","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_ord_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate PCoA and other ordinations, including taxa biplots and statistics. — bdiv_ord_table","text":"data.frame columns .sample, .weighted, .bdiv, .ord, .x, .y, (optionally) .z. columns given md, split., stat.included well. stat.given, $stats $stats$code) set. rank given, $taxa_coords, $taxa_stats, $taxa_stats$code set.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_ord_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate PCoA and other ordinations, including taxa biplots and statistics. — bdiv_ord_table","text":"","code":"library(rbiom)          ord <- bdiv_ord_table(hmp50, \"bray\", \"pcoa\", stat.by=\"Body Site\", rank=\"g\")     head(ord) #> # A tibble: 6 × 7 #>   .weighted .bdiv       .ord  .sample     .x       .y `Body Site`   #>   <lgl>     <chr>       <fct> <chr>    <dbl>    <dbl> <fct>         #> 1 TRUE      Bray-Curtis PCoA  HMP01   -0.387 -0.00895 Buccal mucosa #> 2 TRUE      Bray-Curtis PCoA  HMP02   -0.461 -0.0135  Buccal mucosa #> 3 TRUE      Bray-Curtis PCoA  HMP03   -0.407 -0.0143  Saliva        #> 4 TRUE      Bray-Curtis PCoA  HMP04   -0.378 -0.0123  Saliva        #> 5 TRUE      Bray-Curtis PCoA  HMP05   -0.452 -0.0114  Buccal mucosa #> 6 TRUE      Bray-Curtis PCoA  HMP06   -0.411 -0.0123  Saliva                 ord$stats #> # Test:     adonis2 ~ `Body Site`. 999 permutations. #> # A tibble: 1 × 7 #>   .weighted .bdiv          .n .stat    .z .p.val .adj.p #>   <lgl>     <chr>       <int> <dbl> <dbl>  <dbl>  <dbl> #> 1 TRUE      Bray-Curtis    50  19.2  72.2  0.001  0.001          ord$taxa_stats #> # Test:     adonis2 ~ taxa. 999 permutations. #> # A tibble: 5 × 9 #>   .weighted .bdiv       .rank .taxa                .n .stat    .z .p.val .adj.p #>   <lgl>     <chr>       <fct> <fct>             <int> <dbl> <dbl>  <dbl>  <dbl> #> 1 TRUE      Bray-Curtis Genus Lactobacillus        50  8.62  16.8  0.001  0.001 #> 2 TRUE      Bray-Curtis Genus Streptococcus        50 10.1   19.5  0.001  0.001 #> 3 TRUE      Bray-Curtis Genus Bacteroides          50  8.72  16.7  0.001  0.001 #> 4 TRUE      Bray-Curtis Genus Corynebacterium 1    50  8.53  16.0  0.001  0.001 #> 5 TRUE      Bray-Curtis Genus Haemophilus          50  6.56  12.3  0.001  0.001"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Test beta diversity vs categorical or numeric metadata. — bdiv_stats","title":"Test beta diversity vs categorical or numeric metadata. — bdiv_stats","text":"Test beta diversity vs categorical numeric metadata.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test beta diversity vs categorical or numeric metadata. — bdiv_stats","text":"","code":"bdiv_stats(   biom,   stat.by,   bdiv = \"Bray-Curtis\",   weighted = TRUE,   tree = NULL,   test = \"adonis2\",   within = NULL,   between = NULL,   split.by = NULL,   seed = 0,   permutations = 999,   p.adj = \"fdr\" )"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test beta diversity vs categorical or numeric metadata. — bdiv_stats","text":"biom rbiom-class object, data coercible as_rbiom(). stat.categorical numeric metadata field statistics calculated. Required. bdiv Beta diversity distance algorithm(s) use. Options : \"Bray-Curtis\", \"Manhattan\", \"Euclidean\", \"Jaccard\", \"UniFrac\". \"UniFrac\", phylogenetic tree must present biom explicitly provided via tree=. Default: \"Bray-Curtis\"  Multiple/abbreviated values allowed. weighted Take relative abundances account. weighted=FALSE, presence/absence considered. Default: TRUE  Multiple values allowed. tree phylo object representing phylogenetic relationships taxa biom. required computing UniFrac distances. Default: otu_tree(biom) test Permutational test accessing significance. Options : \"adonis2\" -  Permutational MANOVA; vegan::adonis2(). \"mrpp\" -  Multiple response permutation procedure; vegan::mrpp(). Default: \"adonis2\"  Abbreviations allowed. within, Metadata field(s) intra- inter- sample comparisons. Default: NULL split.Name(s) metadata columns data split prior calculations. Default: NULL seed Random seed permutations. Default: 0 permutations Number random permutations use. Default: 999 p.adj Method use multiple comparisons adjustment p-values. Run p.adjust.methods list available options. Default: \"fdr\".","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test beta diversity vs categorical or numeric metadata. — bdiv_stats","text":"tibble data frame summary statistics. R code generating statistics $code, object history $history.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test beta diversity vs categorical or numeric metadata. — bdiv_stats","text":"","code":"library(rbiom)          biom <- sample_rarefy(hmp50)          bdiv_stats(biom, stat.by = \"Body Site\", split.by = \"Sex\") #> # Test:     vegan::adonis2(~ `Body Site`, permutations = 999) #> # A tibble: 2 × 8 #>   Sex    .weighted .bdiv          .n .stat    .z .p.val .adj.p #>   <fct>  <lgl>     <chr>       <int> <dbl> <dbl>  <dbl>  <dbl> #> 1 Female TRUE      Bray-Curtis    30  10.6  35.3  0.001  0.001 #> 2 Male   TRUE      Bray-Curtis    19  12.1  30.5  0.001  0.001            bdiv_stats(biom, stat.by = \"BMI\", bdiv = c(\"bray\", \"unifrac\")) #> # Test:     vegan::adonis2(~ BMI, permutations = 999) #> # A tibble: 2 × 7 #>   .weighted .bdiv          .n .stat      .z .p.val .adj.p #>   <lgl>     <chr>       <int> <dbl>   <dbl>  <dbl>  <dbl> #> 1 TRUE      UniFrac        49 1.80   1.22    0.106  0.212 #> 2 TRUE      Bray-Curtis    49 0.973 -0.0278  0.431  0.431          # The R code used to compute the stats is in $code.     tbl <- bdiv_stats(biom, stat.by = \"Sex\")     tbl$code #> dm <- bdiv_distmat(biom = biom, bdiv = 'Bray-Curtis', weighted = TRUE) #> grouping <- sample_metadata(biom, \"Sex\")[attr(dm, 'Labels')] #>  #> set.seed(0) #>  #> vegan::adonis2(formula = dm ~ grouping, permutations = 999) %>% #>   vegan::permustats() %>% #>   summary() %>% #>   with(data.frame(.stat = statistic, .z = z, .p.val = p)) %>% #>   tryCatch( #>     error   = function (e) data.frame(.stat=NA, .z=NA, .p.val=NA),  #>     warning = function (w) data.frame(.stat=NA, .z=NA, .p.val=NA) ) %>% #>   data.frame(row.names = NULL, .n = attr(dm, 'Size'), .) %>% #>   data.frame(.weighted = TRUE, .bdiv = \"Bray-Curtis\", .) %>% #>   transform(.adj.p = stats::p.adjust(.p.val, 'fdr')) %>% #>   plyr::arrange(.p.val)"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a data.frame of distances between samples. — bdiv_table","title":"Make a data.frame of distances between samples. — bdiv_table","text":"Make data.frame distances samples.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a data.frame of distances between samples. — bdiv_table","text":"","code":"bdiv_table(   biom,   bdiv = \"Bray-Curtis\",   weighted = TRUE,   tree = NULL,   md = NULL,   within = NULL,   between = NULL )"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a data.frame of distances between samples. — bdiv_table","text":"biom rbiom-class object, data coercible as_rbiom(). bdiv Beta diversity distance algorithm(s) use. Options : \"Bray-Curtis\", \"Manhattan\", \"Euclidean\", \"Jaccard\", \"UniFrac\". \"UniFrac\", phylogenetic tree must present biom explicitly provided via tree=. Default: \"Bray-Curtis\"  Multiple/abbreviated values allowed. weighted Take relative abundances account. weighted=FALSE, presence/absence considered. Default: TRUE  Multiple values allowed. tree phylo object representing phylogenetic relationships taxa biom. required computing UniFrac distances. Default: otu_tree(biom) md Include metadata output data frame? Options : NULL -  include metadata. TRUE -  Include metadata. character vector -  Include specified metadata columns. Default: NULL within, Metadata field(s) intra- inter- sample comparisons. Default: NULL","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a data.frame of distances between samples. — bdiv_table","text":"data.frame columns named .sample1, .sample2, .weighted, .bdiv, .distance, fields requested md.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a data.frame of distances between samples. — bdiv_table","text":"","code":"library(rbiom)          # Return in long format with metadata     biom <- sample_select(hmp50, 18:21)     bdiv_table(biom, 'unifrac', md = c(\"Body Site\", \"Sex\")) #> # A tibble: 6 × 7 #>   .sample1 .sample2 .weighted .bdiv   .distance `Body Site`     Sex            #>   <fct>    <fct>    <lgl>     <fct>       <dbl> <fct>           <fct>          #> 1 HMP18    HMP19    TRUE      UniFrac     0.665 Saliva vs Stool Female vs Male #> 2 HMP18    HMP20    TRUE      UniFrac     0.681 Saliva vs Stool Female vs Male #> 3 HMP19    HMP20    TRUE      UniFrac     0.418 Stool           Female         #> 4 HMP18    HMP21    TRUE      UniFrac     0.717 Saliva vs Stool Male           #> 5 HMP19    HMP21    TRUE      UniFrac     0.390 Stool           Female vs Male #> 6 HMP20    HMP21    TRUE      UniFrac     0.149 Stool           Female vs Male          # Only look at distances among the stool samples     bdiv_table(biom, 'unifrac', md = c(\"==Body Site\", \"Sex\")) #> # A tibble: 3 × 7 #>   .sample1 .sample2 .weighted .bdiv   .distance `Body Site` Sex            #>   <fct>    <fct>    <lgl>     <fct>       <dbl> <fct>       <fct>          #> 1 HMP19    HMP20    TRUE      UniFrac     0.418 Stool       Female         #> 2 HMP19    HMP21    TRUE      UniFrac     0.390 Stool       Female vs Male #> 3 HMP20    HMP21    TRUE      UniFrac     0.149 Stool       Female vs Male          # Or between males and females     bdiv_table(biom, 'unifrac', md = c(\"Body Site\", \"!=Sex\")) #> # A tibble: 4 × 7 #>   .sample1 .sample2 .weighted .bdiv   .distance `Body Site`     Sex            #>   <fct>    <fct>    <lgl>     <fct>       <dbl> <fct>           <fct>          #> 1 HMP18    HMP19    TRUE      UniFrac     0.665 Saliva vs Stool Female vs Male #> 2 HMP18    HMP20    TRUE      UniFrac     0.681 Saliva vs Stool Female vs Male #> 3 HMP19    HMP21    TRUE      UniFrac     0.390 Stool           Female vs Male #> 4 HMP20    HMP21    TRUE      UniFrac     0.149 Stool           Female vs Male"},{"path":"https://cmmr.github.io/rbiom/reference/bdply.html","id":null,"dir":"Reference","previous_headings":"","what":"Split an rbiom object by metadata, apply function, and return results in a\r\ndata frame. — bdply","title":"Split an rbiom object by metadata, apply function, and return results in a\r\ndata frame. — bdply","text":"Calls plyr::ddply internally. Consider setting otu_tree(biom) <- NULL speed creation subseted rbiom objects.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split an rbiom object by metadata, apply function, and return results in a\r\ndata frame. — bdply","text":"","code":"bdply(biom, vars, FUN, ..., iters = list(), prefix = FALSE)"},{"path":"https://cmmr.github.io/rbiom/reference/bdply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split an rbiom object by metadata, apply function, and return results in a\r\ndata frame. — bdply","text":"biom rbiom-class object, data coercible as_rbiom(). vars character vector metadata fields. unique combination values columns used create subsetted rbiom object pass FUN. NULL, biom passed FUN unaltered. Unambiguous abbreviations metadata fields also accepted. FUN function execute subset biom. FUN return data.frame, rbind-ed together returned bdply. ... Additional arguments pass FUN. iters named list values pass FUN. Unlike ..., iterated combinations. Default: list() prefix TRUE, prefixes names iters '.' split_labels attribute returned object. Default: FALSE","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split an rbiom object by metadata, apply function, and return results in a\r\ndata frame. — bdply","text":"data.frame comprising merged outputs FUN, along columns specified vars.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split an rbiom object by metadata, apply function, and return results in a\r\ndata frame. — bdply","text":"","code":"library(rbiom)          bdply(hmp50, \"Sex\", n_samples) #> # A tibble: 2 × 2 #>   Sex       V1 #>   <fct>  <int> #> 1 Female    30 #> 2 Male      20          bdply(hmp50, c(\"Body Site\", \"Sex\"), function (b) {       adm <- adiv_matrix(b)[,c(\"Shannon\", \"Simpson\")]       apply(adm, 2L, mean)     }) #> # A tibble: 9 × 4 #>   Sex    `Body Site`    Shannon Simpson #>   <fct>  <fct>            <dbl>   <dbl> #> 1 Female Anterior nares   1.43    0.681 #> 2 Female Buccal mucosa    1.17    0.408 #> 3 Female Mid vagina       0.407   0.167 #> 4 Female Saliva           2.93    0.893 #> 5 Female Stool            2.43    0.850 #> 6 Male   Anterior nares   1.51    0.665 #> 7 Male   Buccal mucosa    1.71    0.602 #> 8 Male   Saliva           3.17    0.913 #> 9 Male   Stool            2.51    0.835          iters <- list(w = c(TRUE, FALSE), d = c(\"bray\", \"euclid\"))     bdply(hmp50, \"Sex\", iters = iters, function (b, w, d) {       r <- range(bdiv_distmat(biom = b, bdiv = d, weighted = w))       round(data.frame(min = r[[1]], max = r[[2]]))     }) #> # A tibble: 8 × 5 #>   Sex    w     d        min   max #>   <fct>  <lgl> <chr>  <dbl> <dbl> #> 1 Female TRUE  bray       0     1 #> 2 Female FALSE bray       0     1 #> 3 Female TRUE  euclid   123 17185 #> 4 Female FALSE euclid     3    12 #> 5 Male   TRUE  bray       0     1 #> 6 Male   FALSE bray       0     1 #> 7 Male   TRUE  euclid   292 11855 #> 8 Male   FALSE euclid     5    14"},{"path":"https://cmmr.github.io/rbiom/reference/biom_build.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an rbiom object. — biom_build","title":"Create an rbiom object. — biom_build","text":"Create rbiom object.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/biom_build.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an rbiom object. — biom_build","text":"","code":"biom_build(   counts,   metadata = NULL,   taxonomy = NULL,   tree = NULL,   sequences = NULL,   id = NULL,   comment = NULL )"},{"path":"https://cmmr.github.io/rbiom/reference/biom_build.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an rbiom object. — biom_build","text":"counts count data numeric matrix, column names sample names row names OTU names. rbiom object filename/URL compatible read_biom() also acceptable. metadata data.frame sample names row names metadata names column names. filename/URL comma- tab-separated data. taxonomy character matrix OTU names row names. filename/URL comma- tab-separated data. tree phylo object tip labels matching OTU names. (E.g. read_tree()). filename/URL newick formatted data. sequences named character vector DNA sequences. filename/URL fasta format data. (Currently used rbiom.) id, comment character vector length one text user's choosing.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/biom_build.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an rbiom object. — biom_build","text":"rbiom class object containing parsed data. object can treated list following named elements: $counts -  numeric slam::simple_triplet_matrix() (sparse matrix) observation counts. Taxa (OTUs) rows samples columns. Access modify using otu_matrix(). $metadata -  tibble::tibble() (data frame) containing embedded metadata. Sample IDs .sample column. Access modify using sample_metadata(). $taxonomy -  tibble::tibble() (data frame) mapping OTU IDs taxonomic clades. Columns named .otu, Kingdom, Phylum, Class, Order, Family, Genus, Species, Strain, TaxLvl.1, TaxLvl.2, ... , TaxLvl.N 8 levels taxonomy encoded biom file. Access modify using otu_taxonomy(). $phylogeny -  object class phylo defining phylogenetic relationships OTUs. Although official specification BIOM includes phylogenetic trees BIOM version 2.1, rbiom version 1.0 file includes phylogeny entry newick data, loaded well. ape package additional functions working phylo objects. Access modify using otu_tree(). $sequences -  named character vector, names OTU IDs values nucleic acid sequences represent. values part official BIOM specification, read written defined. Access modify using otu_sequences(). $info -  list attributes defined BIOM file, id, type, format, format_url, generated_by, date, matrix_type, matrix_element_type, comment, shape. Access using biom_info(). Access/set biom_id() biom_comment(). metadata, taxonomy, phylogeny optional components BIOM file specification therefore NULL simple placeholders returned object provided BIOM file.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/biom_build.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an rbiom object. — biom_build","text":"","code":"library(rbiom)          biom <- sample_select(hmp50, 1:5)          # Save components to separate files.     ct  <- write_counts(biom, tempfile())     md  <- write_metadata(biom, tempfile())     tax <- write_taxonomy(biom, tempfile())     tre <- write_tree(biom, tempfile())     fas <- write_fasta(biom, tempfile())          # Peek at the file structures.     cat(readLines(ct, n = 2L),  '', sep=\"\\n\") #> #OTU ID\tHMP01\tHMP02\tHMP03\tHMP04\tHMP05 #> UncO4101\t1\t5\t6\t18\t5 #>      cat(readLines(md, n = 2L),  '', sep=\"\\n\") #> .sample\tAge\tBMI\tBody Site\tSex #> HMP01\t22\t20\tBuccal mucosa\tFemale #>      cat(readLines(tax, n = 2L), '', sep=\"\\n\") #> UncO4101\tBacteria\tFirmicutes\tClostridia\tClostridiales\tLachnospiraceae\tLachnoanaerobaculum #> Unc96922\tBacteria\tBacteroidetes\tFlavobacteriia\tFlavobacteriales\tFlavobacteriaceae\tCapnocytophaga #>      cat(readChar(tre, nchars = 50L), \"\\n\\n\") #> ((((((((((Unc92490:0.05748,Unc02pjp:0.01233):0.007  #>      cat(readChar(fas, nchars = 50L), \"\\n\\n\") #> >UncO4101  #> TGGGGAATATTGGACAATGGGGGAAACCCTGATCCAGCG  #>           # Re-assemble the rbiom object.     biom <- biom_build(ct, md, tax, tre, id = \"New\")     print(biom) #> New (2023-11-22) #>       5 Samples:  (HMP01, HMP02, HMP03, HMP04, and HMP05) #>     132 Taxa:     (UncO4101, Unc96922, Unc02k4w, Unc1721...) #>       7 Ranks:    (.otu, Kingdom, Phylum, Class, Order, ...) #>       5 Metadata: (.sample, Age, BMI, Body Site, and Sex) #>         Tree:     Present #>           # Remove temporary files.     invisible(file.remove(c(ct, md, tax, fas, tre)))"},{"path":"https://cmmr.github.io/rbiom/reference/biom_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set an rbiom object's id or comment. — biom_id","title":"Get or set an rbiom object's id or comment. — biom_id","text":"BIOM specification includes id comment fields free-form text.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/biom_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set an rbiom object's id or comment. — biom_id","text":"","code":"biom_id(biom)  biom_id(biom) <- value  biom_comment(biom)  biom_comment(biom) <- value"},{"path":"https://cmmr.github.io/rbiom/reference/biom_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set an rbiom object's id or comment. — biom_id","text":"biom rbiom-class object, data coercible as_rbiom(). value identifier add (character vector length 1).","code":""},{"path":"https://cmmr.github.io/rbiom/reference/biom_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set an rbiom object's id or comment. — biom_id","text":"length 1 character vector.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/biom_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set an rbiom object's id or comment. — biom_id","text":"","code":"library(rbiom)      biom <- hmp50          biom_id(biom) #> [1] \"Human Microbiome Project - 50 Sample Demo\"     biom_id(biom) <- \"My new title/id\"     biom_id(biom) #> [1] \"My new title/id\"          biom_comment(biom) #> [1] \"\"     biom_comment(biom) <- \"A description of this study\"     biom_comment(biom) #> [1] \"A description of this study\""},{"path":"https://cmmr.github.io/rbiom/reference/biom_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get rbiom object's miscellaneous information. — biom_info","title":"Get rbiom object's miscellaneous information. — biom_info","text":"Get rbiom object's miscellaneous information.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/biom_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get rbiom object's miscellaneous information. — biom_info","text":"","code":"biom_info(biom)"},{"path":"https://cmmr.github.io/rbiom/reference/biom_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get rbiom object's miscellaneous information. — biom_info","text":"biom rbiom-class object, data coercible as_rbiom().","code":""},{"path":"https://cmmr.github.io/rbiom/reference/biom_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get rbiom object's miscellaneous information. — biom_info","text":"list top-level metadata biom.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/biom_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get rbiom object's miscellaneous information. — biom_info","text":"","code":"library(rbiom)     biom_info(hmp50) #> $id #> [1] \"Human Microbiome Project - 50 Sample Demo\" #>  #> $type #> [1] \"OTU table\" #>  #> $format #> [1] \"1.0.0\" #>  #> $format_url #> [1] \"http://biom-format.org\" #>  #> $generated_by #> [1] \"rbiom 1.0.2.9026\" #>  #> $date #> [1] \"2021-07-01T18:48:45Z\" #>  #> $matrix_type #> [1] \"sparse\" #>  #> $matrix_element_type #> [1] \"int\" #>  #> $shape #> [1] 490  50 #>  #> $comment #> [1] \"\" #>"},{"path":"https://cmmr.github.io/rbiom/reference/biom_merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine several rbiom objects into one. — biom_merge","title":"Combine several rbiom objects into one. — biom_merge","text":"WARNING: generally ill-advised merge BIOM datasets, OTUs mappings dependent upstream clustering equivalent BIOM files.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/biom_merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine several rbiom objects into one. — biom_merge","text":"","code":"biom_merge(...)"},{"path":"https://cmmr.github.io/rbiom/reference/biom_merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine several rbiom objects into one. — biom_merge","text":"... number rbiom objects (e.g. read_biom()), lists rbiom objects, valid arguments src parameter read_biom() (instance file names).","code":""},{"path":"https://cmmr.github.io/rbiom/reference/biom_merge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine several rbiom objects into one. — biom_merge","text":"rbiom class object containing parsed data. object can treated list following named elements: $counts -  numeric slam::simple_triplet_matrix() (sparse matrix) observation counts. Taxa (OTUs) rows samples columns. Access modify using otu_matrix(). $metadata -  tibble::tibble() (data frame) containing embedded metadata. Sample IDs .sample column. Access modify using sample_metadata(). $taxonomy -  tibble::tibble() (data frame) mapping OTU IDs taxonomic clades. Columns named .otu, Kingdom, Phylum, Class, Order, Family, Genus, Species, Strain, TaxLvl.1, TaxLvl.2, ... , TaxLvl.N 8 levels taxonomy encoded biom file. Access modify using otu_taxonomy(). $phylogeny -  object class phylo defining phylogenetic relationships OTUs. Although official specification BIOM includes phylogenetic trees BIOM version 2.1, rbiom version 1.0 file includes phylogeny entry newick data, loaded well. ape package additional functions working phylo objects. Access modify using otu_tree(). $sequences -  named character vector, names OTU IDs values nucleic acid sequences represent. values part official BIOM specification, read written defined. Access modify using otu_sequences(). $info -  list attributes defined BIOM file, id, type, format, format_url, generated_by, date, matrix_type, matrix_element_type, comment, shape. Access using biom_info(). Access/set biom_id() biom_comment(). metadata, taxonomy, phylogeny optional components BIOM file specification therefore NULL simple placeholders returned object provided BIOM file.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/biom_merge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine several rbiom objects into one. — biom_merge","text":"","code":"library(rbiom)          b1 <- sample_select(hmp50, 1:4)     b2 <- sample_select(hmp50, 5:8)          biom <- biom_merge(b1, b2)     print(biom) #> Merged BIOM (2023-11-22) #>       8 Samples:  (HMP01, HMP02, HMP03, HMP04, HMP05, HM...) #>     168 Taxa:     (UncO4101, Unc96922, Unc02k4w, Unc1721...) #>       7 Ranks:    (.otu, Kingdom, Phylum, Class, Order, ...) #>       5 Metadata: (.sample, Age, BMI, Body Site, and Sex) #>         Tree:     Absent #>           otu_tree(biom) <- otu_tree(hmp50)     print(biom) #> Merged BIOM (2023-11-22) #>       8 Samples:  (HMP01, HMP02, HMP03, HMP04, HMP05, HM...) #>     168 Taxa:     (UncO4101, Unc96922, Unc02k4w, Unc1721...) #>       7 Ranks:    (.otu, Kingdom, Phylum, Class, Order, ...) #>       5 Metadata: (.sample, Age, BMI, Body Site, and Sex) #>         Tree:     Present #>"},{"path":"https://cmmr.github.io/rbiom/reference/biom_repair.html","id":null,"dir":"Reference","previous_headings":"","what":"Run after manually editing an rbiom object's content. — biom_repair","title":"Run after manually editing an rbiom object's content. — biom_repair","text":"Run manually editing rbiom object's content.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/biom_repair.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run after manually editing an rbiom object's content. — biom_repair","text":"","code":"biom_repair(biom)"},{"path":"https://cmmr.github.io/rbiom/reference/biom_repair.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run after manually editing an rbiom object's content. — biom_repair","text":"biom rbiom object repair.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/biom_repair.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run after manually editing an rbiom object's content. — biom_repair","text":"rbiom object.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/blply.html","id":null,"dir":"Reference","previous_headings":"","what":"Split an rbiom object by metadata, apply function, and return results in a\r\nlist. — blply","title":"Split an rbiom object by metadata, apply function, and return results in a\r\nlist. — blply","text":"Calls plyr::dlply internally. Consider setting otu_tree(biom) <- NULL speed creation subseted rbiom objects.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/blply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split an rbiom object by metadata, apply function, and return results in a\r\nlist. — blply","text":"","code":"blply(biom, vars, FUN, ..., iters = list(), prefix = FALSE)"},{"path":"https://cmmr.github.io/rbiom/reference/blply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split an rbiom object by metadata, apply function, and return results in a\r\nlist. — blply","text":"biom rbiom-class object, data coercible as_rbiom(). vars character vector metadata fields. unique combination values columns used create subsetted rbiom object pass FUN. NULL, biom passed FUN unaltered. Unambiguous abbreviations metadata fields also accepted. FUN function execute biom subset. FUN may return object, returned named list. ... Additional arguments pass FUN. iters named list values pass FUN. Unlike ..., iterated combinations. Default: list() prefix TRUE, prefixes names iters '.' split_labels attribute returned object. Default: FALSE","code":""},{"path":"https://cmmr.github.io/rbiom/reference/blply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split an rbiom object by metadata, apply function, and return results in a\r\nlist. — blply","text":"list function outputs.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/blply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split an rbiom object by metadata, apply function, and return results in a\r\nlist. — blply","text":"","code":"library(rbiom)           blply(hmp50, \"Sex\", n_samples) #> $Female #> [1] 30 #>  #> $Male #> [1] 20 #>  #> attr(,\"split_type\") #> [1] \"data.frame\" #> attr(,\"split_labels\") #>      Sex #> 1 Female #> 2   Male          blply(hmp50, c(\"Body Site\", \"Sex\"), function (b) {       adm <- adiv_matrix(b)[,c(\"Shannon\", \"Simpson\")]       apply(adm, 2L, mean)     }) #> $`Female.Anterior nares` #>   Shannon   Simpson  #> 1.4318071 0.6814534  #>  #> $`Female.Buccal mucosa` #>   Shannon   Simpson  #> 1.1739844 0.4080621  #>  #> $`Female.Mid vagina` #>   Shannon   Simpson  #> 0.4070774 0.1670592  #>  #> $Female.Saliva #>   Shannon   Simpson  #> 2.9304968 0.8934531  #>  #> $Female.Stool #>   Shannon   Simpson  #> 2.4288307 0.8496172  #>  #> $`Male.Anterior nares` #>  Shannon  Simpson  #> 1.505313 0.665006  #>  #> $`Male.Buccal mucosa` #>   Shannon   Simpson  #> 1.7128815 0.6016869  #>  #> $Male.Saliva #>  Shannon  Simpson  #> 3.171852 0.913298  #>  #> $Male.Stool #>   Shannon   Simpson  #> 2.5126148 0.8347696  #>  #> attr(,\"split_type\") #> [1] \"data.frame\" #> attr(,\"split_labels\") #>      Sex      Body Site #> 1 Female Anterior nares #> 2 Female  Buccal mucosa #> 3 Female     Mid vagina #> 4 Female         Saliva #> 5 Female          Stool #> 6   Male Anterior nares #> 7   Male  Buccal mucosa #> 8   Male         Saliva #> 9   Male          Stool          iters <- list(w = c(TRUE, FALSE), d = c(\"bray\", \"euclid\"))     blply(hmp50, \"Sex\", iters = iters, function (b, w, d) {       r <- range(bdiv_distmat(biom = b, bdiv = d, weighted = w))       round(data.frame(min = r[[1]], max = r[[2]]))     }) #> $Female.1 #>   min max #> 1   0   1 #>  #> $Female.2 #>   min max #> 1   0   1 #>  #> $Female.3 #>   min   max #> 1 123 17185 #>  #> $Female.4 #>   min max #> 1   3  12 #>  #> $Male.1 #>   min max #> 1   0   1 #>  #> $Male.2 #>   min max #> 1   0   1 #>  #> $Male.3 #>   min   max #> 1 292 11855 #>  #> $Male.4 #>   min max #> 1   5  14 #>  #> attr(,\"split_labels\") #>      Sex     w      d #> 1 Female  TRUE   bray #> 2 Female FALSE   bray #> 3 Female  TRUE euclid #> 4 Female FALSE euclid #> 5   Male  TRUE   bray #> 6   Male FALSE   bray #> 7   Male  TRUE euclid #> 8   Male FALSE euclid"},{"path":"https://cmmr.github.io/rbiom/reference/convert_from_phyloseq.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a phyloseq object to an rbiom object. — convert_from_phyloseq","title":"Convert a phyloseq object to an rbiom object. — convert_from_phyloseq","text":"Convert phyloseq object rbiom object.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/convert_from_phyloseq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a phyloseq object to an rbiom object. — convert_from_phyloseq","text":"","code":"convert_from_phyloseq(phy)"},{"path":"https://cmmr.github.io/rbiom/reference/convert_from_phyloseq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a phyloseq object to an rbiom object. — convert_from_phyloseq","text":"phy phyloseq object.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/convert_from_phyloseq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a phyloseq object to an rbiom object. — convert_from_phyloseq","text":"rbiom object.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/convert_from_phyloseq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a phyloseq object to an rbiom object. — convert_from_phyloseq","text":"","code":"if (FALSE) {     library(rbiom)          fp   <- system.file(\"extdata\", \"rich_sparse_otu_table.biom\", package=\"phyloseq\")     phy  <- phyloseq::import_biom(fp)     biom <- convert_from_phyloseq(phy)  }"},{"path":"https://cmmr.github.io/rbiom/reference/convert_to_SE.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an rbiom object to a SummarizedExperiment object. — convert_to_SE","title":"Convert an rbiom object to a SummarizedExperiment object. — convert_to_SE","text":"Requires Bioconductor R package 'SummarizedExperiment' installed.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/convert_to_SE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an rbiom object to a SummarizedExperiment object. — convert_to_SE","text":"","code":"convert_to_SE(biom)"},{"path":"https://cmmr.github.io/rbiom/reference/convert_to_SE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an rbiom object to a SummarizedExperiment object. — convert_to_SE","text":"biom rbiom-class object, data coercible as_rbiom().","code":""},{"path":"https://cmmr.github.io/rbiom/reference/convert_to_SE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an rbiom object to a SummarizedExperiment object. — convert_to_SE","text":"SummarizedExperiment object.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/convert_to_SE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an rbiom object to a SummarizedExperiment object. — convert_to_SE","text":"","code":"library(rbiom)          biom <- sample_rarefy(hmp50)     print(biom) #> Human Microbiome Project - 50 Sample Demo (2021-07-01) #>      49 Samples:  (HMP01, HMP02, HMP03, HMP04, HMP05, HM...) #>     420 Taxa:     (UncO2713, UncO4101, AnmMass2, PreBivi...) #>       7 Ranks:    (.otu, Kingdom, Phylum, Class, Order, ...) #>       5 Metadata: (.sample, Age, BMI, Body Site, and Sex) #>         Tree:     Present #>             # Requires 'SummarizedExperiment' Bioconductor R package     if (nzchar(system.file(package = \"SummarizedExperiment\"))) {       se <- convert_to_SE(biom)       print(se)     } #> class: SummarizedExperiment  #> dim: 420 49  #> metadata(0): #> assays(1): OTU table #> rownames(420): UncO2713 UncO4101 ... Unc00wls Unc89065 #> rowData names(6): Kingdom Phylum ... Family Genus #> colnames(49): HMP01 HMP02 ... HMP49 HMP50 #> colData names(4): Age BMI Body Site Sex"},{"path":"https://cmmr.github.io/rbiom/reference/convert_to_TSE.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an rbiom object to a TreeSummarizedExperiment object. — convert_to_TSE","title":"Convert an rbiom object to a TreeSummarizedExperiment object. — convert_to_TSE","text":"Requires Bioconductor R package 'TreeSummarizedExperiment' installed.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/convert_to_TSE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an rbiom object to a TreeSummarizedExperiment object. — convert_to_TSE","text":"","code":"convert_to_TSE(biom)"},{"path":"https://cmmr.github.io/rbiom/reference/convert_to_TSE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an rbiom object to a TreeSummarizedExperiment object. — convert_to_TSE","text":"biom rbiom-class object, data coercible as_rbiom().","code":""},{"path":"https://cmmr.github.io/rbiom/reference/convert_to_TSE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an rbiom object to a TreeSummarizedExperiment object. — convert_to_TSE","text":"TreeSummarizedExperiment object.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/convert_to_TSE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an rbiom object to a TreeSummarizedExperiment object. — convert_to_TSE","text":"","code":"library(rbiom)          biom <- sample_rarefy(hmp50)     print(biom) #> Human Microbiome Project - 50 Sample Demo (2021-07-01) #>      49 Samples:  (HMP01, HMP02, HMP03, HMP04, HMP05, HM...) #>     420 Taxa:     (UncO2713, UncO4101, AnmMass2, PreBivi...) #>       7 Ranks:    (.otu, Kingdom, Phylum, Class, Order, ...) #>       5 Metadata: (.sample, Age, BMI, Body Site, and Sex) #>         Tree:     Present #>             # Requires 'TreeSummarizedExperiment' Bioconductor R package     if (nzchar(system.file(package = \"TreeSummarizedExperiment\"))) {       tse <- convert_to_TSE(biom)       print(tse)     } #> class: TreeSummarizedExperiment  #> dim: 420 49  #> metadata(0): #> assays(1): OTU table #> rownames(420): UncO2713 UncO4101 ... Unc00wls Unc89065 #> rowData names(6): Kingdom Phylum ... Family Genus #> colnames(49): HMP01 HMP02 ... HMP49 HMP50 #> colData names(4): Age BMI Body Site Sex #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> rowLinks: a LinkDataFrame (420 rows) #> rowTree: 1 phylo tree(s) (420 leaves) #> colLinks: NULL #> colTree: NULL #> referenceSeq: a DNAStringSet (420 sequences)"},{"path":"https://cmmr.github.io/rbiom/reference/distmat_ord_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Run ordinations on a distance matrix. — distmat_ord_table","title":"Run ordinations on a distance matrix. — distmat_ord_table","text":"Run ordinations distance matrix.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/distmat_ord_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run ordinations on a distance matrix. — distmat_ord_table","text":"","code":"distmat_ord_table(dm, ord = \"PCoA\", k = 2L, ...)"},{"path":"https://cmmr.github.io/rbiom/reference/distmat_ord_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run ordinations on a distance matrix. — distmat_ord_table","text":"dm dist-class distance matrix, returned bdiv_distmat() stats::dist(). Required. ord Method reducing dimensionality. Options : \"UMAP\" -  Uniform manifold approximation projection; uwot::umap(). \"PCoA\" -  Principal coordinate analysis; ape::pcoa(). \"NMDS\" -  Nonmetric multidimensional scaling; vegan::metaMDS(). \"tSNE\" -  t-distributed stochastic neighbor embedding; tsne::tsne(). Default: \"UMAP\"  Multiple values allowed. Non-ambiguous abbreviations allowed. k Number ordination dimensions return. Either 2L 3L. Default: 2L ... Additional arguments ord.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/distmat_ord_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run ordinations on a distance matrix. — distmat_ord_table","text":"data.frame columns .sample, .ord, .x, .y, (optionally) .z.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/distmat_ord_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run ordinations on a distance matrix. — distmat_ord_table","text":"","code":"library(rbiom)           dm  <- bdiv_distmat(hmp50, \"bray\")     ord <- distmat_ord_table(dm, \"PCoA\")     head(ord) #> # :         ape::pcoa(D = dm) #> # A tibble: 6 × 4 #>   .ord  .sample     .x       .y #>   <fct> <chr>    <dbl>    <dbl> #> 1 PCoA  HMP01   -0.358  0.00236 #> 2 PCoA  HMP02   -0.420  0.0104  #> 3 PCoA  HMP03   -0.382  0.0135  #> 4 PCoA  HMP04   -0.388  0.00485 #> 5 PCoA  HMP05   -0.415 -0.0115  #> 6 PCoA  HMP06   -0.414 -0.00703"},{"path":"https://cmmr.github.io/rbiom/reference/distmat_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Run statistics on a distance matrix vs a categorical or numeric variable. — distmat_stats","title":"Run statistics on a distance matrix vs a categorical or numeric variable. — distmat_stats","text":"Run statistics distance matrix vs categorical numeric variable.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/distmat_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run statistics on a distance matrix vs a categorical or numeric variable. — distmat_stats","text":"","code":"distmat_stats(dm, groups, test = \"adonis2\", seed = 0, permutations = 999)"},{"path":"https://cmmr.github.io/rbiom/reference/distmat_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run statistics on a distance matrix vs a categorical or numeric variable. — distmat_stats","text":"dm dist-class distance matrix, returned bdiv_distmat() stats::dist(). Required. groups named vector grouping values. names correspond attr(dm, 'Labels'). Values can either categorical numeric. Required. test Permutational test accessing significance. Options : \"adonis2\" -  Permutational MANOVA; vegan::adonis2(). \"mrpp\" -  Multiple response permutation procedure; vegan::mrpp(). Default: \"adonis2\"  Abbreviations allowed. seed Random seed permutations. Default: 0 permutations Number random permutations use. Default: 999","code":""},{"path":"https://cmmr.github.io/rbiom/reference/distmat_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run statistics on a distance matrix vs a categorical or numeric variable. — distmat_stats","text":"data.frame summary statistics vegan::permustats(). columns : .n -  size distance matrix. .stat -  observed statistic. mrpp, overall weighted mean group mean distances. .z -  difference observed statistic mean permutations divided standard deviation permutations (also known z-values). Evaluated permuted values without observed statistic. .p.val -  Probability calculated test.  R commands reproducing results $code object history $history.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/distmat_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run statistics on a distance matrix vs a categorical or numeric variable. — distmat_stats","text":"","code":"library(rbiom)           biom <- sample_select(hmp50, 1:10)     dm   <- bdiv_distmat(biom, 'unifrac')          distmat_stats(dm, groups = sample_metadata(biom, 'Body Site')) #> # A tibble: 1 × 4 #>      .n .stat    .z .p.val #>   <int> <dbl> <dbl>  <dbl> #> 1    10  9.27  11.0  0.001          distmat_stats(dm, groups = sample_metadata(biom, 'Age')) #> # A tibble: 1 × 4 #>      .n .stat    .z .p.val #>   <int> <dbl> <dbl>  <dbl> #> 1    10  4.13  3.56  0.012          # See the R code used to calculate these statistics:     stats <- distmat_stats(dm, groups = sample_metadata(biom, 'Age'))     stats$code #> grouping <- groups[attr(dm, 'Labels')] #> set.seed(0) #>  #> vegan::adonis2(formula = dm ~ grouping, permutations = 999) %>% #>   vegan::permustats() %>% #>   summary() %>% #>   with(data.frame(.stat = statistic, .z = z, .p.val = p)) %>% #>   tryCatch( #>     error   = function (e) data.frame(.stat=NA, .z=NA, .p.val=NA),  #>     warning = function (w) data.frame(.stat=NA, .z=NA, .p.val=NA) ) %>% #>   data.frame(row.names = NULL, .n = attr(dm, 'Size'), .)"},{"path":"https://cmmr.github.io/rbiom/reference/documentation_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"documentation_boxplot — documentation_boxplot","title":"documentation_boxplot — documentation_boxplot","text":"documentation_boxplot","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"documentation_boxplot — documentation_boxplot","text":"x categorical metadata column name use x-axis. default, NULL, groups samples single category. layers \"bar\", \"box\" (\"x\"), \"violin\", \"dot\", \"strip\", \"crossbar\", \"errorbar\", \"linerange\", \"pointrange\". Single letter abbreviations also accepted. instance, c(\"box\", \"dot\") equivalent c(\"x\", \"d\") \"xd\". See vignette(\"boxplots\") examples . Default: \"bld\". color., pattern., shape., facet., limit.Metadata columns use aesthetics partitioning. Default: NULL ci calculate min/max crossbar, errorbar, linerange, pointrange layers. Options : \"ci\" (confidence interval), \"range\", \"sd\" (standard deviation), \"se\" (standard error), \"mad\" (median absolute deviation). center mark crossbar pointrange represents mean, except code\"mad\" case represents median. Default: \"ci\" ... Parameters matched formal arguments ggplot2 functions. Prefixing parameter names layer name ensures particular parameter passed , , layer. instance, dot.size = 2 d.size = 2 ensures dotplot layer size set 2. special prefix pt. control dot strip layers.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"documentation_boxplot — documentation_boxplot","text":"ggplot2 plot.  computed data points, statistics, ggplot command, object history available $data, $stats, $code, $history, respectively.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_boxplot_aes_section.html","id":null,"dir":"Reference","previous_headings":"","what":"documentation_boxplot_aes_section — documentation_boxplot_aes_section","title":"documentation_boxplot_aes_section — documentation_boxplot_aes_section","text":"documentation_boxplot_aes_section","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_boxplot_aes_section.html","id":"aesthetics-and-partitions","dir":"Reference","previous_headings":"","what":"Aesthetics and Partitions","title":"documentation_boxplot_aes_section — documentation_boxplot_aes_section","text":"Metadata can used flexibly subset, partition, apply aesthetics creating plot. Common use cases provided . thorough documentation available https://cmmr.github.io/rbiom. color.- categorical metadata column. (Max 1) pattern.- categorical metadata column. (Max 1) shape.- categorical metadata column. (Max 1) facet.- Categorical metadata column(s). limit.- metadata column(s). built-color palettes colorblind-friendly. available categorical palette names : \"okabe\", \"carto\", \"r4\", \"polychrome\", \"tol\", \"bright\", \"light\", \"muted\", \"vibrant\", \"tableau\", \"classic\", \"alphabet\", \"tableau20\", \"kelly\", \"fishy\". Patterns sourced magick R package. Pattern names : \"bricks\", \"hexagons\", \"horizontalsaw\", \"hs_fdiagonal\", \"fishscales\", \"verticalsaw\", \"checkerboard\", \"octagons\", \"right45\", \"hs_cross\", \"hs_bdiagonal\", \"hs_diagcross\", \"hs_horizontal\", \"hs_vertical\", \"left45\", \"leftshingle\", \"rightshingle\", \"verticalbricks\", \"verticalleftshingle\", \"verticalrightshingle\". Shapes can given per base R - numbers 0 17 various shapes, decimal value ascii character, e.g. -z = 65:90; -Z = 97:122 use letters instead shapes plot. Character strings may used well.","code":"## Colors ----------------------------   color.by = \"Body Site\"   color.by = list('Body Site' = \"bright\")   color.by = list('Body Site' = c(\"Stool\", \"Saliva\"))   color.by = list('Body Site' = list('values' = c(\"Stool\", \"Saliva\"), 'colors' = \"bright\"))   color.by = list('Body Site' = c('Stool' = \"blue\", 'Saliva' = \"green\"))      ## Patterns --------------------------   pattern.by = \"Body Site\"   pattern.by = list('Body Site' = c(\"Stool\", \"Saliva\"))   pattern.by = list('Body Site' = c('Stool' = \"left45\", 'Saliva' = \"hs_cross\"))      ## Shapes ----------------------------   shape.by = \"Body Site\"   shape.by = list('Body Site' = c(\"Stool\", \"Saliva\"))   shape.by = list('Body Site' = c('Stool' = 7, 'Saliva' = 8))      ## Facets ----------------------------   facet.by = \"Body Site\"   facet.by = c(\"Body Site\", \"Sex\")   facet.by = list('Body Site' = c(\"Stool\", \"Saliva\"), \"Sex\")      ## Limits ----------------------------   limit.by = list('Sex' = \"Male\", 'Age' = c(20,40))   limit.by = list('Body Site' = c(\"Saliva\", \"Anterior nares\"), 'Age' = c(NA,35))"},{"path":"https://cmmr.github.io/rbiom/reference/documentation_cmp.html","id":null,"dir":"Reference","previous_headings":"","what":"documentation_cmp — documentation_cmp","title":"documentation_cmp — documentation_cmp","text":"documentation_cmp","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_cmp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"documentation_cmp — documentation_cmp","text":"x categorical metadata column name. Prefix column name == != limit comparisons within groups, respectively. default, NULL groups distances single column. color., pattern., shape., facet., limit.Metadata columns use data partitioning. Prefix column name == != limit comparisons within groups, respectively. Default: NULL within, Metadata field(s) intra- inter- sample comparisons. Default: NULL","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_corrplot.html","id":null,"dir":"Reference","previous_headings":"","what":"documentation_corrplot — documentation_corrplot","title":"documentation_corrplot — documentation_corrplot","text":"documentation_corrplot","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_corrplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"documentation_corrplot — documentation_corrplot","text":"x numeric metadata field use x-axis. Required. layers \"trend\", \"scatter\". Single letter abbreviations also accepted. instance, c(\"trend\", \"scatter\") equivalent c(\"t\", \"s\") \"ts\". See vignette(\"corrplots\") examples . Default: \"t\". color., facet., limit.Metadata columns use aesthetics partitioning. See details. Default: NULL test test statistic display plot. Options : \"fit\" -  well model fit data? \"terms\" -  strongly 'x' influence 'y'? \"means\" -  average 'y' value non-zero? \"trends\" -  trendline non-zero slope? \"pw_means\" -  means trendlines different? \"pw_trends\" -  slopes trendlines different? \"none\" -  compute show statistics. Default: \"trends\"  Note: \"pw_means\" \"pw_trends\" can calculated using color.metadata column one level.  Statistical tests run separately facet. P-values adjusted multiple comparisons considering facets together. caption Display information method used trend line fitting beneath plot. Default: FALSE. ... Additional parameters pass along ggplot2 functions. Prefix parameter name either t. s./pt. ensure gets passed () geom_smooth geom_point, respectively. instance, s.size = 2 ensures scatterplot points size set 2.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_corrplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"documentation_corrplot — documentation_corrplot","text":"ggplot2 plot.  computed data points, statistics, ggplot command, object history available $data, $stats, $code, $history, respectively.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_corrplot.html","id":"aesthetics-and-partitions","dir":"Reference","previous_headings":"","what":"Aesthetics and Partitions","title":"documentation_corrplot — documentation_corrplot","text":"Metadata can used flexibly subset, partition, apply aesthetics creating plot. Common use cases provided . thorough documentation available https://cmmr.github.io/rbiom. color.- metadata column. (Max 1) facet.- categorical metadata column(s). limit.- metadata column(s). built-color palettes colorblind-friendly. available categorical palette names : \"okabe\", \"carto\", \"r4\", \"polychrome\", \"tol\", \"bright\", \"light\", \"muted\", \"vibrant\", \"tableau\", \"classic\", \"alphabet\", \"tableau20\", \"kelly\", \"fishy\". available numeric palette names : \"reds\", \"oranges\", \"greens\", \"purples\", \"grays\", \"acton\", \"bamako\", \"batlow\", \"bilbao\", \"buda\", \"davos\", \"devon\", \"grayC\", \"hawaii\", \"imola\", \"lajolla\", \"lapaz\", \"nuuk\", \"oslo\", \"tokyo\", \"turku\", \"bam\", \"berlin\", \"broc\", \"cork\", \"lisbon\", \"roma\", \"tofino\", \"vanimo\", \"vik\"","code":"## Colors ----------------------------   color.by = \"Body Site\"   color.by = list('Body Site' = \"bright\")   color.by = list('Body Site' = c(\"Stool\", \"Saliva\"))   color.by = list('Body Site' = list('values' = c(\"Stool\", \"Saliva\"), 'colors' = \"bright\"))   color.by = list('Body Site' = c('Stool' = \"blue\", 'Saliva' = \"green\"))      ## Facets ----------------------------   facet.by = \"Body Site\"   facet.by = c(\"Body Site\", \"Sex\")   facet.by = list('Body Site' = c(\"Stool\", \"Saliva\"), \"Sex\")      ## Limits ----------------------------   limit.by = list('Sex' = \"Male\", 'Age' = c(20,40))   limit.by = list('Body Site' = c(\"Saliva\", \"Anterior nares\"), 'Age' = c(NA,35))"},{"path":"https://cmmr.github.io/rbiom/reference/documentation_default.html","id":null,"dir":"Reference","previous_headings":"","what":"documentation_default — documentation_default","title":"documentation_default — documentation_default","text":"documentation_default","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"documentation_default — documentation_default","text":"biom rbiom-class object, data coercible as_rbiom(). tree phylo object representing phylogenetic relationships taxa biom. required computing UniFrac distances. Default: otu_tree(biom) md Include metadata output data frame? Options : NULL -  include metadata. TRUE -  Include metadata. character vector -  Include specified metadata columns. Default: TRUE adiv Alpha diversity metric(s) use. Options : \"OTUs\", \"Shannon\", \"Chao1\", \"Simpson\", /\"InvSimpson\". shortcut adiv=\"\" also exists. Default: \"Shannon\"  Multiple values allowed. Non-ambiguous abbreviations allowed. bdiv Beta diversity distance algorithm(s) use. Options : \"Bray-Curtis\", \"Manhattan\", \"Euclidean\", \"Jaccard\", \"UniFrac\". \"UniFrac\", phylogenetic tree must present biom explicitly provided via tree=. Default: \"Bray-Curtis\"  Multiple/abbreviated values allowed. taxa taxa display. integer value show top n abundant taxa. value 0 <= n < 1 show taxa mean abundance greater (e.g. 0.1 implies >= 10%). character vector taxa names show named taxa. Default: 6. ord Method reducing dimensionality. Options : \"UMAP\" -  Uniform manifold approximation projection; uwot::umap(). \"PCoA\" -  Principal coordinate analysis; ape::pcoa(). \"NMDS\" -  Nonmetric multidimensional scaling; vegan::metaMDS(). \"tSNE\" -  t-distributed stochastic neighbor embedding; tsne::tsne(). Default: \"UMAP\"  Multiple values allowed. Non-ambiguous abbreviations allowed. weighted Take relative abundances account. weighted=FALSE, presence/absence considered. Default: TRUE  Multiple values allowed. rank rank(s) taxa display. E.g. \"Phylum\", \"Genus\", \".otu\", etc. integer vector can also given, 1 highest rank, 2 second highest, -1 lowest rank, -2 second lowest, 0 OTU \"rank\". Run taxa_ranks() see options given rbiom object. Default: -1. lineage Include ranks name taxa. instance, setting TRUE produce Bacteria; Actinobacteria; Coriobacteriia; Coriobacteriales. Otherwise taxa name simply Coriobacteriales. want set TRUE unc = \"asis\" taxa names (Incertae_Sedis) map multiple higher level ranks. Default: FALSE unc handle unclassified, uncultured, similarly ambiguous taxa names. Options : \"singly\" -  Replaces OTU name. \"grouped\" -  Replaces higher rank's name. \"drop\" -  Excludes result. \"asis\" -  check/modify taxa names. Default: \"singly\"  Abbreviations allowed. Sum non-itemized taxa \"\" taxa. FALSE, returns taxa matched taxa argument. Specifying TRUE adds \"\" returned set. string can also given imply TRUE, value name use instead \"\". Default: FALSE sparse true, returns sparse matrix described slam::simple_triplet_matrix(), otherwise returns normal R matrix object. Default: FALSE p.top display taxa significant differences abundance. p.top >= 1, p.top significant taxa displayed. p.top less one, taxa adjusted p-value <= p.top displayed. Recommended used combination taxa parameter set lower bound mean abundance considered taxa. Default: Inf y.trans transformation apply y-axis. Visualizing differences high- low-abundance taxa best done non-linear axis. Options : \"sqrt\" -  square-root transformation \"log1p\" -  log(y + 1) transformation NULL -  transformation methods allow visualization high- low-abundance taxa simultaneously, without complaint 'zero' count observations. Default: \"sqrt\" flip Transpose axes, taxa present rows instead columns. Default: FALSE stripe Shade every x position. Default: flip p.label Minimum adjusted p-value display plot bracket. p.label = 0.05 -  Show p-values <= 0.05. p.label = 0 -  show p-values plot. p.label = 1 -  Show p-values plot. numeric vector one value provided, used breaks asterisk notation. Default: 0.05 level confidence level calculating confidence interval. Default: 0.95 outliers Show boxplot outliers? TRUE always show. FALSE always hide. NULL hide overlaying dot strip chart.  Default: NULL xlab.angle Angle labels bottom plot. Options \"auto\", '0', '30', '90'. Default: \"auto\". k Number ordination dimensions return. Either 2L 3L. Default: 2L split.Name(s) metadata columns data split prior calculations. Default: NULL dm dist-class distance matrix, returned bdiv_distmat() stats::dist(). Required. groups named vector grouping values. names correspond attr(dm, 'Labels'). Values can either categorical numeric. Required. stat.categorical metadata field defining statistical groups. Required. regr run regression analysis, set regr numeric metadata field \"x-axis\" values. Leaving regr=NULL generate boxplot-like statistics; non-NULL, corrplot-like statistics returned. Default: NULL seed Random seed permutations. Default: 0 permutations Number random permutations use. Default: 999 p.adj Method use multiple comparisons adjustment p-values. Run p.adjust.methods list available options. Default: \"fdr\". depths Rarefaction depths show plot, NULL auto-select. Default: NULL. rline draw horizontal line plot, intended show particular rarefaction depth. Set TRUE show auto-selected rarefaction depth FALSE show line. Default: NULL. labels Show sample names bar. Default: FALSE.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_dist_test.html","id":null,"dir":"Reference","previous_headings":"","what":"documentation_dist_test — documentation_dist_test","title":"documentation_dist_test — documentation_dist_test","text":"documentation_dist_test","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_dist_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"documentation_dist_test — documentation_dist_test","text":"stat.categorical numeric metadata field statistics calculated. Required. test Permutational test accessing significance. Options : \"adonis2\" -  Permutational MANOVA; vegan::adonis2(). \"mrpp\" -  Multiple response permutation procedure; vegan::mrpp(). Default: \"adonis2\"  Abbreviations allowed.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"documentation_heatmap — documentation_heatmap","title":"documentation_heatmap — documentation_heatmap","text":"documentation_heatmap","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"documentation_heatmap — documentation_heatmap","text":"grid Color palette name, list entries label, colors, range, bins, na.color, /guide. See Track Definitions section details. Default: list(label = \"Grid Value\", colors = \"imola\"). label Label matrix rows columns. can supply list logical vector length two control row labels column labels separately, example label = c(rows = TRUE, cols = FALSE), simply label = c(T, F). valid options \"rows\", \"cols\", \"\", \"bottom\", \"right\", \"none\". Default: TRUE. label_size font size use row column labels. can supply numeric vector length two control row label sizes column label sizes separately, example c(rows = 20, cols = 8), simply c(20, 8). Default: NULL, computes: pmax(8, pmin(20, 100 / dim(mtx))). rescale Rescale rows columns common min/max. Options: \"none\", \"rows\", \"cols\". Default: \"none\". trees Draw dendrogram rows (left) columns (top). can supply list logical vector length two control row tree column tree separately, example trees = c(rows = T, cols = F), simply trees = c(T, F). valid options \"rows\", \"cols\", \"\", \"left\", \"top\", \"none\". Default: TRUE. clust Clustering algorithm reordering rows columns similarity. can supply list character vector length two control row column clustering separately, example clust = c(rows = \"complete\", cols = NA), simply clust = c(\"complete\", NA). Options : FALSE NA -  Disable reordering. hclust class object E.g. stats::hclust(). method name -  \"ward.D\", \"ward.D2\", \"single\", \"complete\", \"average\", \"mcquitty\", \"median\", \"centroid\". Default: \"complete\". dist Distance algorithm use reordering rows columns similarity. can supply list character vector length two control row column clustering separately, example dist = c(rows = \"euclidean\", cols = \"maximum\"), simply dist = c(\"euclidean\", \"maximum\"). Options : dist class object E.g. stats::dist() bdiv_distmat(). method name -  \"euclidean\", \"maximum\", \"manhattan\", \"canberra\", \"binary\", \"minkowski\". Default: \"euclidean\". tree_height, track_height height dendrogram annotation tracks multiples (fractions) smaller dimension grid cell size. Use numeric vector length two assign c(left, top) independently. Default: NULL, computes: tree_height = sqrt(min(dim(mtx))), track_height = tree_height / 4. ratio Height/width ratio entire grid. Default: 1 (square). legend place legend. Options : \"right\" \"bottom\". Default: \"right\". ... Additional arguments pass ggplot2::theme().","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"documentation_heatmap — documentation_heatmap","text":"ggplot2 plot.  computed data points, ggplot command, object history available $data, $code, $history, respectively.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_model.lm.html","id":null,"dir":"Reference","previous_headings":"","what":"documentation_model.lm — documentation_model.lm","title":"documentation_model.lm — documentation_model.lm","text":"documentation_model.lm","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_model.lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"documentation_model.lm — documentation_model.lm","text":"model type trend model fit data. Options : \"lm\" (linear), \"log\" (logarithmic), \"gam\" (generalized additive). See \"Model Options\" section additional details. Default: \"lm\"","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_model.lm.html","id":"model-options","dir":"Reference","previous_headings":"","what":"Model Options","title":"documentation_model.lm — documentation_model.lm","text":"predefined options : \"lm\" -   Linear model: stats::lm(formula = y ~ x).) \"log\" -  Logarithmic model: stats::lm(formula = y ~ log(x)). \"gam\" -  Generalized additive model: mgcv::gam(formula = y ~ s(x, bs = \"cs\"), method = \"REML\"). can alternatively provide list length two first element character vector length 1 naming function, second element list arguments pass function. One function's arguments must named 'formula'. example, model = list(\"stats::lm\", list(formula = y ~ x)).","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_model.log.html","id":null,"dir":"Reference","previous_headings":"","what":"documentation_model.log — documentation_model.log","title":"documentation_model.log — documentation_model.log","text":"documentation_model.log","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_model.log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"documentation_model.log — documentation_model.log","text":"model type trend model fit data. Options : \"lm\" (linear), \"log\" (logarithmic), \"gam\" (generalized additive). See \"Model Options\" section additional details. Default: \"log\"","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_model.log.html","id":"model-options","dir":"Reference","previous_headings":"","what":"Model Options","title":"documentation_model.log — documentation_model.log","text":"predefined options : \"lm\" -   Linear model: stats::lm(formula = y ~ x).) \"log\" -  Logarithmic model: stats::lm(formula = y ~ log(x)). \"gam\" -  Generalized additive model: mgcv::gam(formula = y ~ s(x, bs = \"cs\"), method = \"REML\"). can alternatively provide list length two first element character vector length 1 naming function, second element list arguments pass function. One function's arguments must named 'formula'. example, model = list(\"stats::lm\", list(formula = y ~ x)).","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_model_section.html","id":null,"dir":"Reference","previous_headings":"","what":"documentation_model_section — documentation_model_section","title":"documentation_model_section — documentation_model_section","text":"documentation_model_section","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_model_section.html","id":"model-options","dir":"Reference","previous_headings":"","what":"Model Options","title":"documentation_model_section — documentation_model_section","text":"predefined options : \"lm\" -   Linear model: stats::lm(formula = y ~ x).) \"log\" -  Logarithmic model: stats::lm(formula = y ~ log(x)). \"gam\" -  Generalized additive model: mgcv::gam(formula = y ~ s(x, bs = \"cs\"), method = \"REML\"). can alternatively provide list length two first element character vector length 1 naming function, second element list arguments pass function. One function's arguments must named 'formula'. example, model = list(\"stats::lm\", list(formula = y ~ x)).","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_plot_return.html","id":null,"dir":"Reference","previous_headings":"","what":"documentation_plot_return — documentation_plot_return","title":"documentation_plot_return — documentation_plot_return","text":"documentation_plot_return","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_plot_return.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"documentation_plot_return — documentation_plot_return","text":"ggplot2 plot.  computed data points, ggplot command, object history available $data, $code, $history, respectively.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_plot_stats_return.html","id":null,"dir":"Reference","previous_headings":"","what":"documentation_plot_stats_return — documentation_plot_stats_return","title":"documentation_plot_stats_return — documentation_plot_stats_return","text":"documentation_plot_stats_return","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_plot_stats_return.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"documentation_plot_stats_return — documentation_plot_stats_return","text":"ggplot2 plot.  computed data points, statistics, ggplot command, object history available $data, $stats, $code, $history, respectively.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_stats_return.html","id":null,"dir":"Reference","previous_headings":"","what":"documentation_stats_return — documentation_stats_return","title":"documentation_stats_return — documentation_stats_return","text":"documentation_stats_return","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_stats_return.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"documentation_stats_return — documentation_stats_return","text":"tibble data frame summary statistics. R code generating statistics $code, object history $history.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_test.ifelse.html","id":null,"dir":"Reference","previous_headings":"","what":"documentation_test.ifelse — documentation_test.ifelse","title":"documentation_test.ifelse — documentation_test.ifelse","text":"documentation_test.ifelse","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_test.ifelse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"documentation_test.ifelse — documentation_test.ifelse","text":"test statistic interest. overview options can found \"Statistical Tests\" section . One \"predict\", \"terms\", \"fit\", \"means\", \"trends\", \"es_means\", \"es_trends\", \"pw_means\", \"pw_trends\". Default: ifelse(.null(regr), \"means\", \"trends\")","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_test.ifelse.html","id":"statistical-tests","dir":"Reference","previous_headings":"","what":"Statistical Tests","title":"documentation_test.ifelse — documentation_test.ifelse","text":"regr NULL: \"means\" -  Considers groups using Kruskal-Wallis non-parametric test: stats::kruskal.test(). \"pw_means\" -  Pairwise comparison stat.groups using Wilcox rank sum (aka Mann-Whitney) non-parametric test: stats::wilcox.test(). regr NULL: \"predict\" -  Augments original data fitted information. See broom::augment.lm(). \"terms\" -  Summary information model's terms, including p-value, r-squared, AIC, BIC, confidence interval level. See broom::tidy.lm(). \"fit\" -  Goodness fit measures, p-values, overall model. See broom::glance.lm(). \"means\" -  estimated marginal mean (EMM) stat.group, along confidence intervals (CI), standard errors (SE), t-ratios, p-values testing mean = zero. See emmeans::emmeans() emmeans::summary.emmGrid(). \"trends\" -  trendline slope stat.group, along CI SE p-value testing slope = zero. See emmeans::emtrends() emmeans::summary.emmGrid(). \"pw_means\" -  Pairwise means. stat.groups compared difference means estimated along SE, t-ratios, p-values testing two means . See emmeans::pairs.emmGrid(). \"pw_trends\" -  Pairwise trends. , comparing trendline slopes instead means. \"es_means\" -  Effect sizes pairwise differences means, including SE CI. See emmeans::eff_size(). \"es_trends\" -  Effect sizes pairwise differences slopes, including SE CI. See emmeans::eff_size().","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_test.pw_means.html","id":null,"dir":"Reference","previous_headings":"","what":"documentation_test.pw_means — documentation_test.pw_means","title":"documentation_test.pw_means — documentation_test.pw_means","text":"documentation_test.pw_means","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_test.pw_means.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"documentation_test.pw_means — documentation_test.pw_means","text":"test statistic interest. overview options can found \"Statistical Tests\" section . One \"predict\", \"terms\", \"fit\", \"means\", \"trends\", \"es_means\", \"es_trends\", \"pw_means\", \"pw_trends\". Default: \"pw_means\"","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_test.pw_means.html","id":"statistical-tests","dir":"Reference","previous_headings":"","what":"Statistical Tests","title":"documentation_test.pw_means — documentation_test.pw_means","text":"\"predict\" -  Augments original data fitted information. See broom::augment.lm(). \"terms\" -  Summary information model's terms, including p-value, r-squared, AIC, BIC, confidence interval level. See broom::tidy.lm(). \"fit\" -  Goodness fit measures, p-values, overall model. See broom::glance.lm(). \"means\" -  estimated marginal mean (EMM) stat.group, along confidence intervals (CI), standard errors (SE), t-ratios, p-values testing mean = zero. See emmeans::emmeans() emmeans::summary.emmGrid(). \"trends\" -  trendline slope stat.group, along CI SE p-value testing slope = zero. See emmeans::emtrends() emmeans::summary.emmGrid(). \"pw_means\" -  Pairwise means. stat.groups compared difference means estimated along SE, t-ratios, p-values testing two means . See emmeans::pairs.emmGrid(). \"pw_trends\" -  Pairwise trends. , comparing trendline slopes instead means. \"es_means\" -  Effect sizes pairwise differences means, including SE CI. See emmeans::eff_size(). \"es_trends\" -  Effect sizes pairwise differences slopes, including SE CI. See emmeans::eff_size().","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_test.trends.html","id":null,"dir":"Reference","previous_headings":"","what":"documentation_test.trends — documentation_test.trends","title":"documentation_test.trends — documentation_test.trends","text":"documentation_test.trends","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_test.trends.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"documentation_test.trends — documentation_test.trends","text":"test statistic interest. overview options can found \"Statistical Tests\" section . One \"predict\", \"terms\", \"fit\", \"means\", \"trends\", \"es_means\", \"es_trends\", \"pw_means\", \"pw_trends\". Default: \"trends\"","code":""},{"path":"https://cmmr.github.io/rbiom/reference/documentation_test.trends.html","id":"statistical-tests","dir":"Reference","previous_headings":"","what":"Statistical Tests","title":"documentation_test.trends — documentation_test.trends","text":"\"predict\" -  Augments original data fitted information. See broom::augment.lm(). \"terms\" -  Summary information model's terms, including p-value, r-squared, AIC, BIC, confidence interval level. See broom::tidy.lm(). \"fit\" -  Goodness fit measures, p-values, overall model. See broom::glance.lm(). \"means\" -  estimated marginal mean (EMM) stat.group, along confidence intervals (CI), standard errors (SE), t-ratios, p-values testing mean = zero. See emmeans::emmeans() emmeans::summary.emmGrid(). \"trends\" -  trendline slope stat.group, along CI SE p-value testing slope = zero. See emmeans::emtrends() emmeans::summary.emmGrid(). \"pw_means\" -  Pairwise means. stat.groups compared difference means estimated along SE, t-ratios, p-values testing two means . See emmeans::pairs.emmGrid(). \"pw_trends\" -  Pairwise trends. , comparing trendline slopes instead means. \"es_means\" -  Effect sizes pairwise differences means, including SE CI. See emmeans::eff_size(). \"es_trends\" -  Effect sizes pairwise differences slopes, including SE CI. See emmeans::eff_size().","code":""},{"path":"https://cmmr.github.io/rbiom/reference/has_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Check specific properties of an rbiom object. — has_tree","title":"Check specific properties of an rbiom object. — has_tree","text":"Check specific properties rbiom object.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/has_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check specific properties of an rbiom object. — has_tree","text":"","code":"has_tree(biom)  has_sequences(biom)  is_rarefied(biom)"},{"path":"https://cmmr.github.io/rbiom/reference/has_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check specific properties of an rbiom object. — has_tree","text":"biom rbiom-class object, data coercible as_rbiom().","code":""},{"path":"https://cmmr.github.io/rbiom/reference/has_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check specific properties of an rbiom object. — has_tree","text":"TRUE property, FALSE otherwise.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/has_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check specific properties of an rbiom object. — has_tree","text":"","code":"library(rbiom)          has_tree(hmp50) #> [1] TRUE     has_sequences(hmp50) #> [1] TRUE     is_rarefied(hmp50) #> [1] FALSE"},{"path":"https://cmmr.github.io/rbiom/reference/hmp50.html","id":null,"dir":"Reference","previous_headings":"","what":"Human Microbiome Project - 50 sample demo dataset. — hmp50","title":"Human Microbiome Project - 50 sample demo dataset. — hmp50","text":"Human Microbiome Project - 50 sample demo dataset.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/hmp50.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Human Microbiome Project - 50 sample demo dataset. — hmp50","text":"","code":"hmp50"},{"path":"https://cmmr.github.io/rbiom/reference/hmp50.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Human Microbiome Project - 50 sample demo dataset. — hmp50","text":"rbiom object 50 samples. Includes metadata, taxonomy, phylogeny, sequences. Sex - Male Female Body Site - Buccal mucosa, Saliva, Anterior nares, Stool, Mid vagina Age - 21 - 40 BMI - 19 - 32","code":""},{"path":"https://cmmr.github.io/rbiom/reference/hmp50.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Human Microbiome Project - 50 sample demo dataset. — hmp50","text":"https://portal.hmpdacc.org","code":""},{"path":"https://cmmr.github.io/rbiom/reference/metadata_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set the metadata column names. — metadata_names","title":"Get or set the metadata column names. — metadata_names","text":"Get set metadata column names.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/metadata_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set the metadata column names. — metadata_names","text":"","code":"metadata_names(biom)  metadata_names(biom) <- value"},{"path":"https://cmmr.github.io/rbiom/reference/metadata_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set the metadata column names. — metadata_names","text":"biom rbiom-class object, data coercible as_rbiom(). value character vector new metadata column names. Names start . character. Leading trailing whitespace automatically removed.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/metadata_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set the metadata column names. — metadata_names","text":"character vector metadata column names biom.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/metadata_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set the metadata column names. — metadata_names","text":"","code":"library(rbiom)           biom <- hmp50          metadata_names(biom) #> [1] \".sample\"   \"Age\"       \"BMI\"       \"Body Site\" \"Sex\"                metadata_names(biom) <- sub(' ', '_', tolower(metadata_names(biom)))     metadata_names(biom) #> [1] \".sample\"   \"age\"       \"bmi\"       \"body_site\" \"sex\""},{"path":"https://cmmr.github.io/rbiom/reference/metadata_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Check which metadata columns are numeric. — metadata_numeric","title":"Check which metadata columns are numeric. — metadata_numeric","text":"Check metadata columns numeric.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/metadata_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check which metadata columns are numeric. — metadata_numeric","text":"","code":"metadata_numeric(biom)"},{"path":"https://cmmr.github.io/rbiom/reference/metadata_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check which metadata columns are numeric. — metadata_numeric","text":"biom rbiom-class object, data coercible as_rbiom().","code":""},{"path":"https://cmmr.github.io/rbiom/reference/metadata_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check which metadata columns are numeric. — metadata_numeric","text":"named logical vector indicating metadata column numeric.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/metadata_numeric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check which metadata columns are numeric. — metadata_numeric","text":"","code":"library(rbiom)     metadata_numeric(hmp50) #>       Age       BMI Body Site       Sex  #>      TRUE      TRUE     FALSE     FALSE"},{"path":"https://cmmr.github.io/rbiom/reference/n_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Report the number of samples, otus, or ranks in an rbiom. — n_samples","title":"Report the number of samples, otus, or ranks in an rbiom. — n_samples","text":"Report number samples, otus, ranks rbiom.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/n_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report the number of samples, otus, or ranks in an rbiom. — n_samples","text":"","code":"n_samples(biom)  n_otus(biom)  n_ranks(biom)  n_metadata(biom)"},{"path":"https://cmmr.github.io/rbiom/reference/n_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report the number of samples, otus, or ranks in an rbiom. — n_samples","text":"biom rbiom-class object, data coercible as_rbiom().","code":""},{"path":"https://cmmr.github.io/rbiom/reference/n_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report the number of samples, otus, or ranks in an rbiom. — n_samples","text":"number samples, otus, taxa ranks, metadata columns present.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/n_samples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report the number of samples, otus, or ranks in an rbiom. — n_samples","text":"","code":"library(rbiom)          n_samples(hmp50) #> [1] 50     n_otus(hmp50) #> [1] 490     n_ranks(hmp50) #> [1] 7     n_metadata(hmp50) #> [1] 5"},{"path":"https://cmmr.github.io/rbiom/reference/otu_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set the abundance counts. — otu_matrix","title":"Get or set the abundance counts. — otu_matrix","text":"Get set abundance counts.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/otu_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set the abundance counts. — otu_matrix","text":"","code":"otu_matrix(biom, sparse = FALSE)  otu_matrix(biom) <- value  # S3 method for rbiom dimnames(x)  # S3 method for rbiom dim(x)"},{"path":"https://cmmr.github.io/rbiom/reference/otu_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set the abundance counts. — otu_matrix","text":"biom rbiom-class object, data coercible as_rbiom(). sparse true, returns sparse matrix described slam::simple_triplet_matrix(), otherwise returns normal R matrix object. Default: FALSE value numeric matrix. Rownames colnames must eq current otu_matrix() value.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/otu_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set the abundance counts. — otu_matrix","text":"numeric matrix samples column names, OTU identifiers row names.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/otu_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set the abundance counts. — otu_matrix","text":"","code":"library(rbiom)          biom <- hmp50     taxa <- c('Unc53100', 'Unc00c7g', 'Unc25731')          otu_matrix(biom)[taxa,1:5] #>          HMP01 HMP02 HMP03 HMP04 HMP05 #> Unc53100  1083   543   301   223  2672 #> Unc00c7g     0   152   239   162    89 #> Unc25731     3   126   171    31    54          biom <- sample_rarefy(biom, 100)     otu_matrix(biom)[taxa,1:5] #>          HMP01 HMP02 HMP03 HMP04 HMP05 #> Unc53100    72    42    18     8    74 #> Unc00c7g     0    12    20    12     2 #> Unc25731     0     9    12     0     2          otu_matrix(biom) <- otu_matrix(biom) / 100     otu_matrix(biom)[taxa,1:5] #>          HMP01 HMP02 HMP03 HMP04 HMP05 #> Unc53100  0.72  0.42  0.18  0.08  0.74 #> Unc00c7g  0.00  0.12  0.20  0.12  0.02 #> Unc25731  0.00  0.09  0.12  0.00  0.02"},{"path":"https://cmmr.github.io/rbiom/reference/otu_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set the OTU names. — otu_names","title":"Get or set the OTU names. — otu_names","text":"Get set OTU names.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/otu_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set the OTU names. — otu_names","text":"","code":"otu_names(biom)  otu_names(biom) <- value"},{"path":"https://cmmr.github.io/rbiom/reference/otu_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set the OTU names. — otu_names","text":"biom rbiom-class object, data coercible as_rbiom(). value character vector new OTU names.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/otu_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set the OTU names. — otu_names","text":"character vector taxa names biom.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/otu_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set the OTU names. — otu_names","text":"","code":"library(rbiom)           biom <- hmp50          head(otu_names(biom)) #> [1] \"UncO2713\" \"UncO4101\" \"AnmMass2\" \"PreBivi6\" \"CprSpeci\" \"Unc96922\"          otu_names(biom) <- sub('Unc', 'Uncultured_', otu_names(biom))     head(otu_names(biom)) #> [1] \"Uncultured_O2713\" \"Uncultured_O4101\" \"AnmMass2\"         \"PreBivi6\"         #> [5] \"CprSpeci\"         \"Uncultured_96922\""},{"path":"https://cmmr.github.io/rbiom/reference/otu_sequences.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set the nucleotide sequences associated with each OTU. — otu_sequences","title":"Get or set the nucleotide sequences associated with each OTU. — otu_sequences","text":"Get set nucleotide sequences associated OTU.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/otu_sequences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set the nucleotide sequences associated with each OTU. — otu_sequences","text":"","code":"otu_sequences(biom)  otu_sequences(biom) <- value"},{"path":"https://cmmr.github.io/rbiom/reference/otu_sequences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set the nucleotide sequences associated with each OTU. — otu_sequences","text":"biom rbiom-class object, data coercible as_rbiom(). value named character vector. Names must match otu_names(x).","code":""},{"path":"https://cmmr.github.io/rbiom/reference/otu_sequences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set the nucleotide sequences associated with each OTU. — otu_sequences","text":"named character vector sequences biom. data present, returns NULL.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/otu_sequences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set the nucleotide sequences associated with each OTU. — otu_sequences","text":"","code":"library(rbiom)           substr(otu_sequences(hmp50)[1:4], 1, 10) #>     UncO2713     UncO4101     AnmMass2     PreBivi6  #> \"TGAGGAATAT\" \"TGGGGAATAT\" \"TGGGGAATAT\" \"TGAGGAATAT\"       if (FALSE) {     # Write to a compressed fasta file in the temporary directory:     seqs <- otu_sequences(hmp50)     conn <- bzfile(file.path(tempdir(), \"Sequences.fa.bz2\"), \"w\")     cat(sprintf(\">%s\\n%s\", names(seqs), seqs), file=conn, sep=\"\\n\")     close(conn)          # You can also use the write_fasta function for this task:     write_fasta(hmp50, file.path(tempdir(), \"Sequences.fa.gz\"))          # Set/replace the sequences     biom <- read_biom('path/to/file.biom')     otu_sequences(biom) <- read_fasta('path/to/sequences.fa')     otu_sequences(biom) <- c(OTU1 = 'ATCGGGTA', OTU2 = 'GGCATTAGC') }"},{"path":"https://cmmr.github.io/rbiom/reference/otu_taxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set the taxonomy table. — otu_taxonomy","title":"Get or set the taxonomy table. — otu_taxonomy","text":"Get set taxonomy table.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/otu_taxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set the taxonomy table. — otu_taxonomy","text":"","code":"otu_taxonomy(biom, rank = NULL, unc = \"asis\", lineage = FALSE)  otu_taxonomy(biom) <- value"},{"path":"https://cmmr.github.io/rbiom/reference/otu_taxonomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set the taxonomy table. — otu_taxonomy","text":"biom rbiom-class object, data coercible as_rbiom(). rank single taxonomic rank return named vector, NULL return complete table. Default: NULL unc handle unclassified, uncultured, similarly ambiguous taxa names. Options : \"singly\" -  Replaces OTU name. \"grouped\" -  Replaces higher rank's name. \"drop\" -  Excludes result. \"asis\" -  check/modify taxa names. Default: \"singly\"  Abbreviations allowed. lineage Include ranks name taxa. instance, setting TRUE produce Bacteria; Actinobacteria; Coriobacteriia; Coriobacteriales. Otherwise taxa name simply Coriobacteriales. want set TRUE unc = \"asis\" taxa names (Incertae_Sedis) map multiple higher level ranks. Default: FALSE value object coercible tibble::as_tibble(). Must either rownames '.otu' column OTU names matching otu_names(x).","code":""},{"path":"https://cmmr.github.io/rbiom/reference/otu_taxonomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set the taxonomy table. — otu_taxonomy","text":"Depending rank, named character vector tibble data frame '.otu' first column name.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/otu_taxonomy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set the taxonomy table. — otu_taxonomy","text":"","code":"library(rbiom)           # Display the full taxonomic data for each OTU ------------------------     otu_taxonomy(hmp50) #> # A tibble: 490 × 7 #>    Kingdom  Phylum           Class              Order         Family Genus .otu  #>    <fct>    <fct>            <fct>              <fct>         <fct>  <fct> <fct> #>  1 Bacteria Bacteroidetes    Bacteroidia        Bacteroidales Riken… Alis… UncO… #>  2 Bacteria Firmicutes       Clostridia         Clostridiales Lachn… Lach… UncO… #>  3 Bacteria Actinobacteria   Actinobacteria     Actinomyceta… Actin… Acti… AnmM… #>  4 Bacteria Bacteroidetes    Bacteroidia        Bacteroidales Prevo… Prev… PreB… #>  5 Bacteria Bacteroidetes    Bacteroidia        Bacteroidales Porph… Barn… CprS… #>  6 Bacteria Bacteroidetes    Flavobacteriia     Flavobacteri… Flavo… Capn… Unc9… #>  7 Bacteria Proteobacteria   Betaproteobacteria Burkholderia… Comam… Coma… Unc0… #>  8 Bacteria Firmicutes       Clostridia         Clostridiales Pepto… Pept… Unc0… #>  9 Bacteria Saccharibacteria Unknown Class      Unknown Order Unkno… Cand… Unc1… #> 10 Bacteria Firmicutes       Bacilli            Bacillales    Liste… Broc… BroS… #> # ℹ 480 more rows          # Only show the OTU -> Genus mapping  ---------------------------------     otu_taxonomy(hmp50, \"Genus\") %>% head() #>            UncO2713            UncO4101            AnmMass2            PreBivi6  #>           Alistipes Lachnoanaerobaculum         Actinomyces          Prevotella  #>            CprSpeci            Unc96922  #>         Barnesiella      Capnocytophaga  #> 201 Levels: Abiotrophia Acidaminococcus Acinetobacter ... Veillonella          # Sometimes taxonomic names are incomplete ----------------------------     otu_taxonomy(hmp50)[,4:7] %>%       dplyr::filter(.otu %in% c('GemAsacc', 'GcbBacte', 'Unc58411')) #> # A tibble: 3 × 4 #>   Order          Family    Genus   .otu     #>   <fct>          <fct>     <fct>   <fct>    #> 1 Bacillales     Family XI Gemella GemAsacc #> 2 o              f         g       GcbBacte #> 3 Mollicutes RF9 f         g       Unc58411          # rbiom can insert more descriptive placeholders ----------------------     otu_taxonomy(hmp50, unc = \"singly\")[,4:7] %>%       dplyr::filter(.otu %in% c('GemAsacc', 'GcbBacte', 'Unc58411')) #> # A tibble: 3 × 4 #>   Order          Family        Genus         .otu     #>   <fct>          <fct>         <fct>         <fct>    #> 1 Bacillales     Bacillales XI Gemella       GemAsacc #> 2 Unc. GcbBacte  Unc. GcbBacte Unc. GcbBacte GcbBacte #> 3 Mollicutes RF9 Unc. Unc58411 Unc. Unc58411 Unc58411          # Or collapse them into groups ----------------------------------------     otu_taxonomy(hmp50, unc = \"grouped\")[,4:7] %>%       dplyr::filter(.otu %in% c('GemAsacc', 'GcbBacte', 'Unc58411')) #> # A tibble: 3 × 4 #>   Order                Family               Genus                .otu     #>   <fct>                <fct>                <fct>                <fct>    #> 1 Bacillales           Bacillales XI        Gemella              GemAsacc #> 2 Unc. Gracilibacteria Unc. Gracilibacteria Unc. Gracilibacteria GcbBacte #> 3 Mollicutes RF9       Unc. Mollicutes RF9  Unc. Mollicutes RF9  Unc58411"},{"path":"https://cmmr.github.io/rbiom/reference/otu_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set the phylogenetic tree. — otu_tree","title":"Get or set the phylogenetic tree. — otu_tree","text":"Get set phylogenetic tree.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/otu_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set the phylogenetic tree. — otu_tree","text":"","code":"otu_tree(biom)  otu_tree(biom) <- value"},{"path":"https://cmmr.github.io/rbiom/reference/otu_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set the phylogenetic tree. — otu_tree","text":"biom rbiom-class object, data coercible as_rbiom(). value phylo class object tip.labels matching otu_names(x). tip.labels taxa names, tree subset.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/otu_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set the phylogenetic tree. — otu_tree","text":"phylo class object tree biom.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/otu_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set the phylogenetic tree. — otu_tree","text":"","code":"if (FALSE) {     library(rbiom)          biom <- hmp50     otu_tree(biom) <- read_tree('path/to/newick.tre') }"},{"path":"https://cmmr.github.io/rbiom/reference/plot_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a heatmap with tracks and dendrograms from any matrix. — plot_heatmap","title":"Create a heatmap with tracks and dendrograms from any matrix. — plot_heatmap","text":"Create heatmap tracks dendrograms matrix.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/plot_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a heatmap with tracks and dendrograms from any matrix. — plot_heatmap","text":"","code":"plot_heatmap(   mtx,   grid = list(label = \"Grid Value\", colors = \"imola\"),   tracks = NULL,   label = TRUE,   label_size = NULL,   rescale = \"none\",   trees = TRUE,   clust = \"complete\",   dist = \"euclidean\",   ratio = 1,   tree_height = NULL,   track_height = NULL,   legend = \"right\",   xlab.angle = \"auto\",   labs.title = NULL,   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/plot_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a heatmap with tracks and dendrograms from any matrix. — plot_heatmap","text":"mtx numeric matrix named rows columns. grid Color palette name, list entries label, colors, range, bins, na.color, /guide. See Track Definitions section details. Default: list(label = \"Grid Value\", colors = \"imola\"). tracks List track definitions. See details . Default: NULL. label Label matrix rows columns. can supply list logical vector length two control row labels column labels separately, example label = c(rows = TRUE, cols = FALSE), simply label = c(T, F). valid options \"rows\", \"cols\", \"\", \"bottom\", \"right\", \"none\". Default: TRUE. label_size font size use row column labels. can supply numeric vector length two control row label sizes column label sizes separately, example c(rows = 20, cols = 8), simply c(20, 8). Default: NULL, computes: pmax(8, pmin(20, 100 / dim(mtx))). rescale Rescale rows columns common min/max. Options: \"none\", \"rows\", \"cols\". Default: \"none\". trees Draw dendrogram rows (left) columns (top). can supply list logical vector length two control row tree column tree separately, example trees = c(rows = T, cols = F), simply trees = c(T, F). valid options \"rows\", \"cols\", \"\", \"left\", \"top\", \"none\". Default: TRUE. clust Clustering algorithm reordering rows columns similarity. can supply list character vector length two control row column clustering separately, example clust = c(rows = \"complete\", cols = NA), simply clust = c(\"complete\", NA). Options : FALSE NA -  Disable reordering. hclust class object E.g. stats::hclust(). method name -  \"ward.D\", \"ward.D2\", \"single\", \"complete\", \"average\", \"mcquitty\", \"median\", \"centroid\". Default: \"complete\". dist Distance algorithm use reordering rows columns similarity. can supply list character vector length two control row column clustering separately, example dist = c(rows = \"euclidean\", cols = \"maximum\"), simply dist = c(\"euclidean\", \"maximum\"). Options : dist class object E.g. stats::dist() bdiv_distmat(). method name -  \"euclidean\", \"maximum\", \"manhattan\", \"canberra\", \"binary\", \"minkowski\". Default: \"euclidean\". ratio Height/width ratio entire grid. Default: 1 (square). tree_height, track_height height dendrogram annotation tracks multiples (fractions) smaller dimension grid cell size. Use numeric vector length two assign c(left, top) independently. Default: NULL, computes: tree_height = sqrt(min(dim(mtx))), track_height = tree_height / 4. legend place legend. Options : \"right\" \"bottom\". Default: \"right\". xlab.angle Angle labels bottom plot. Options \"auto\", '0', '30', '90'. Default: \"auto\". labs.title Plot title. Default: NULL. ... Additional arguments pass ggplot2::theme().","code":""},{"path":"https://cmmr.github.io/rbiom/reference/plot_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a heatmap with tracks and dendrograms from any matrix. — plot_heatmap","text":"ggplot2 plot.  computed data points, ggplot command, object history available $data, $code, $history, respectively.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/plot_heatmap.html","id":"track-definitions","dir":"Reference","previous_headings":"","what":"Track Definitions","title":"Create a heatmap with tracks and dendrograms from any matrix. — plot_heatmap","text":"One colored tracks can placed left /top heatmap grid visualize associated metadata values. following entries track definitions understood: values -  metadata values. unnamed, order must match matrix. range -  c(min,max) use scale values. label -  Label track. Defaults name list element. side -  Options \"top\" (default) \"left\". colors -  pre-defined palette name custom set colors map . na.color -  color use NA values. bins -  Bin gradient many bins/steps. guide -  list arguments guide_colorbar() guide_legend(). built-color palettes colorblind-friendly. Categorical palette names: \"okabe\", \"carto\", \"r4\", \"polychrome\", \"tol\", \"bright\", \"light\", \"muted\", \"vibrant\", \"tableau\", \"classic\", \"alphabet\", \"tableau20\", \"kelly\", \"fishy\". Numeric palette names: \"reds\", \"oranges\", \"greens\", \"purples\", \"grays\", \"acton\", \"bamako\", \"batlow\", \"bilbao\", \"buda\", \"davos\", \"devon\", \"grayC\", \"hawaii\", \"imola\", \"lajolla\", \"lapaz\", \"nuuk\", \"oslo\", \"tokyo\", \"turku\", \"bam\", \"berlin\", \"broc\", \"cork\", \"lisbon\", \"roma\", \"tofino\", \"vanimo\", \"vik\".","code":"## Categorical ---------------------------- cat_vals = sample(c(\"Male\", \"Female\"), 10, replace = TRUE) tracks   = list('Sex' = cat_vals) tracks   = list('Sex' = list('values' = cat_vals, 'colors' = \"bright\")) tracks   = list('Sex' = list(   'values' = cat_vals,    'colors' = c('Male' = \"blue\", 'Female' = \"red\")) )  ## Numeric -------------------------------- num_vals = sample(25:40, 10, replace = TRUE) tracks   = list('Age' = num_vals) tracks   = list('Age' = list('values' = num_vals, 'colors' = \"greens\")) tracks   = list('Age' = list('values' = num_vals, 'range' = c(0,50))) tracks   = list('Age' = list(   'label'  = \"Age (Years)\",   'values' = num_vals,    'colors' = c(\"azure\", \"darkblue\", \"darkorchid\") ))  ## Multiple Tracks ------------------------ tracks = list('Sex' = cat_vals, 'Age' = num_vals) tracks = list(   list('label' = \"Sex\", values' = cat_vals, 'colors' = \"bright\"),   list('label' = \"Age\", values' = num_vals, 'colors' = \"greens\") )    plot_heatmap(matrix(sample(1:50), ncol=10), tracks = tracks)"},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/plot_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a heatmap with tracks and dendrograms from any matrix. — plot_heatmap","text":"","code":"library(rbiom)          set.seed(123)     mtx <- matrix(runif(5*8), nrow = 5, dimnames = list(LETTERS[1:5], letters[1:8]))          plot_heatmap(mtx)      plot_heatmap(mtx, grid=\"oranges\")      plot_heatmap(mtx, grid=list(colors = \"oranges\", label = \"Some %\", bins = 5))           tracks <- list(       'Number' = sample(1:ncol(mtx)),       'Person' = list(         values = factor(sample(c(\"Alice\", \"Bob\"), ncol(mtx), TRUE)),         colors = c('Alice' = \"purple\", 'Bob' = \"darkcyan\") ),       'State' = list(         side   = \"left\",         values = sample(c(\"TX\", \"OR\", \"WA\"), nrow(mtx), TRUE),         colors = \"bright\" )     )          plot_heatmap(mtx, tracks=tracks)"},{"path":"https://cmmr.github.io/rbiom/reference/rare_barplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize the number of observations per sample. — rare_barplot","title":"Visualize the number of observations per sample. — rare_barplot","text":"Visualize number observations per sample.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rare_barplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize the number of observations per sample. — rare_barplot","text":"","code":"rare_barplot(   biom,   rline = TRUE,   counts = TRUE,   labels = TRUE,   trans = \"log10\",   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/rare_barplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize the number of observations per sample. — rare_barplot","text":"biom rbiom-class object, data coercible as_rbiom(). rline draw horizontal line plot, intended show particular rarefaction depth. Set TRUE show auto-selected rarefaction depth, FALSE show line, integer custom position. Default: TRUE. counts Display number samples reads remaining rarefying rline reads per sample. Default: TRUE. labels Show sample names bar. Default: TRUE. trans Y-axis transformation. Options \"log10\" NULL.  Default: \"log10\". ... Additional parameters pass along ggplot2 functions. Prefix parameter name r. ensure gets passed () geom_hline. instance, r.color = \"black\" ensures horizontal rarefaction line color set \"black\".","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rare_barplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize the number of observations per sample. — rare_barplot","text":"ggplot2 plot.  computed data points, ggplot command, object history available $data, $code, $history, respectively.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/rare_barplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize the number of observations per sample. — rare_barplot","text":"","code":"library(rbiom)          rare_barplot(hmp50)           rare_barplot(hmp50, rline = 500, r.size = 2, r.linetype = \"twodash\")           fig <- rare_barplot(hmp50, counts = FALSE)     fig$code #> ggplot(data) + #>   geom_rect( #>     mapping = aes(xmin = .xmin, xmax = .xmax, ymin = .ymin, ymax = .ymax, fill = .group),  #>     color   = NA ) + #>   geom_hline( #>     yintercept = 1183,  #>     color      = \"red\",  #>     linetype   = \"dashed\" ) + #>   labs( #>     fill = \"Reads\",  #>     x    = \"Sample\",  #>     y    = \"Sequencing Depth (log10 scale)\" ) + #>   scale_x_discrete() + #>   scale_y_continuous( #>     breaks       = 10^(0:5),  #>     minor_breaks = as.vector(2:9 %o% 10^(0:4)),  #>     labels       = scales::label_number(scale_cut = scales::cut_si(\"\")),  #>     expand       = c(0, 0),  #>     trans        = \"log10\" ) + #>   theme_bw() + #>   theme(panel.grid.major.x = element_blank())"},{"path":"https://cmmr.github.io/rbiom/reference/rare_corrplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize rarefaction curves with scatterplots and trendlines. — rare_corrplot","title":"Visualize rarefaction curves with scatterplots and trendlines. — rare_corrplot","text":"Visualize rarefaction curves scatterplots trendlines.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rare_corrplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize rarefaction curves with scatterplots and trendlines. — rare_corrplot","text":"","code":"rare_corrplot(   biom,   adiv = \"Shannon\",   depths = NULL,   layers = \"t\",   rline = TRUE,   color.by = NULL,   facet.by = NULL,   limit.by = NULL,   test = \"pw_means\",   model = \"log\",   p.adj = \"fdr\",   level = 0.95,   caption = FALSE,   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/rare_corrplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize rarefaction curves with scatterplots and trendlines. — rare_corrplot","text":"biom rbiom-class object, data coercible as_rbiom(). adiv Alpha diversity metric(s) use. Options : \"OTUs\", \"Shannon\", \"Chao1\", \"Simpson\", /\"InvSimpson\". shortcut adiv=\"\" also exists. Default: \"Shannon\"  Multiple values allowed. Non-ambiguous abbreviations allowed. depths Rarefaction depths show plot, NULL auto-select. Default: NULL. layers \"trend\", \"scatter\". Single letter abbreviations also accepted. instance, c(\"trend\", \"scatter\") equivalent c(\"t\", \"s\") \"ts\". See vignette(\"corrplots\") examples . Default: \"t\". rline draw horizontal line plot, intended show particular rarefaction depth. Set TRUE show auto-selected rarefaction depth FALSE show line. Default: NULL. color., facet., limit.Metadata columns use aesthetics partitioning. See details. Default: NULL test statistic interest. overview options can found \"Statistical Tests\" section . One \"predict\", \"terms\", \"fit\", \"means\", \"trends\", \"es_means\", \"es_trends\", \"pw_means\", \"pw_trends\". Default: \"pw_means\" model type trend model fit data. Options : \"lm\" (linear), \"log\" (logarithmic), \"gam\" (generalized additive). See \"Model Options\" section additional details. Default: \"log\" p.adj Method use multiple comparisons adjustment p-values. Run p.adjust.methods list available options. Default: \"fdr\". level confidence level calculating confidence interval. Default: 0.95 caption Display information method used trend line fitting beneath plot. Default: FALSE. ... Additional parameters pass along ggplot2 functions. Prefix parameter name either t. s./pt. ensure gets passed () geom_smooth geom_point, respectively. instance, s.size = 2 ensures scatterplot points size set 2.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rare_corrplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize rarefaction curves with scatterplots and trendlines. — rare_corrplot","text":"ggplot2 plot.  computed data points, statistics, ggplot command, object history available $data, $stats, $code, $history, respectively.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rare_corrplot.html","id":"statistical-tests","dir":"Reference","previous_headings":"","what":"Statistical Tests","title":"Visualize rarefaction curves with scatterplots and trendlines. — rare_corrplot","text":"\"predict\" -  Augments original data fitted information. See broom::augment.lm(). \"terms\" -  Summary information model's terms, including p-value, r-squared, AIC, BIC, confidence interval level. See broom::tidy.lm(). \"fit\" -  Goodness fit measures, p-values, overall model. See broom::glance.lm(). \"means\" -  estimated marginal mean (EMM) stat.group, along confidence intervals (CI), standard errors (SE), t-ratios, p-values testing mean = zero. See emmeans::emmeans() emmeans::summary.emmGrid(). \"trends\" -  trendline slope stat.group, along CI SE p-value testing slope = zero. See emmeans::emtrends() emmeans::summary.emmGrid(). \"pw_means\" -  Pairwise means. stat.groups compared difference means estimated along SE, t-ratios, p-values testing two means . See emmeans::pairs.emmGrid(). \"pw_trends\" -  Pairwise trends. , comparing trendline slopes instead means. \"es_means\" -  Effect sizes pairwise differences means, including SE CI. See emmeans::eff_size(). \"es_trends\" -  Effect sizes pairwise differences slopes, including SE CI. See emmeans::eff_size().","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rare_corrplot.html","id":"model-options","dir":"Reference","previous_headings":"","what":"Model Options","title":"Visualize rarefaction curves with scatterplots and trendlines. — rare_corrplot","text":"predefined options : \"lm\" -   Linear model: stats::lm(formula = y ~ x).) \"log\" -  Logarithmic model: stats::lm(formula = y ~ log(x)). \"gam\" -  Generalized additive model: mgcv::gam(formula = y ~ s(x, bs = \"cs\"), method = \"REML\"). can alternatively provide list length two first element character vector length 1 naming function, second element list arguments pass function. One function's arguments must named 'formula'. example, model = list(\"stats::lm\", list(formula = y ~ x)).","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rare_corrplot.html","id":"aesthetics-and-partitions","dir":"Reference","previous_headings":"","what":"Aesthetics and Partitions","title":"Visualize rarefaction curves with scatterplots and trendlines. — rare_corrplot","text":"Metadata can used flexibly subset, partition, apply aesthetics creating plot. Common use cases provided . thorough documentation available https://cmmr.github.io/rbiom. color.- metadata column. (Max 1) facet.- categorical metadata column(s). limit.- metadata column(s). built-color palettes colorblind-friendly. available categorical palette names : \"okabe\", \"carto\", \"r4\", \"polychrome\", \"tol\", \"bright\", \"light\", \"muted\", \"vibrant\", \"tableau\", \"classic\", \"alphabet\", \"tableau20\", \"kelly\", \"fishy\". available numeric palette names : \"reds\", \"oranges\", \"greens\", \"purples\", \"grays\", \"acton\", \"bamako\", \"batlow\", \"bilbao\", \"buda\", \"davos\", \"devon\", \"grayC\", \"hawaii\", \"imola\", \"lajolla\", \"lapaz\", \"nuuk\", \"oslo\", \"tokyo\", \"turku\", \"bam\", \"berlin\", \"broc\", \"cork\", \"lisbon\", \"roma\", \"tofino\", \"vanimo\", \"vik\"","code":"## Colors ----------------------------   color.by = \"Body Site\"   color.by = list('Body Site' = \"bright\")   color.by = list('Body Site' = c(\"Stool\", \"Saliva\"))   color.by = list('Body Site' = list('values' = c(\"Stool\", \"Saliva\"), 'colors' = \"bright\"))   color.by = list('Body Site' = c('Stool' = \"blue\", 'Saliva' = \"green\"))      ## Facets ----------------------------   facet.by = \"Body Site\"   facet.by = c(\"Body Site\", \"Sex\")   facet.by = list('Body Site' = c(\"Stool\", \"Saliva\"), \"Sex\")      ## Limits ----------------------------   limit.by = list('Sex' = \"Male\", 'Age' = c(20,40))   limit.by = list('Body Site' = c(\"Saliva\", \"Anterior nares\"), 'Age' = c(NA,35))"},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/rare_corrplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize rarefaction curves with scatterplots and trendlines. — rare_corrplot","text":"","code":"library(rbiom)          rare_corrplot(hmp50, color.by=\"Body Site\", adiv=c(\"shan\", \"otus\"), facet.by=\"Sex\")"},{"path":"https://cmmr.github.io/rbiom/reference/rare_depth.html","id":null,"dir":"Reference","previous_headings":"","what":"If the samples are rarefied, report the level (depth). — rare_depth","title":"If the samples are rarefied, report the level (depth). — rare_depth","text":"value initally set read_biom() subsequently changed calls sample_rarefy(). Calling as_percent() set rare_depth() 1, even though function sets sample_sums() 1.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rare_depth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"If the samples are rarefied, report the level (depth). — rare_depth","text":"","code":"rare_depth(biom)"},{"path":"https://cmmr.github.io/rbiom/reference/rare_depth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"If the samples are rarefied, report the level (depth). — rare_depth","text":"biom rbiom-class object, data coercible as_rbiom().","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rare_depth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"If the samples are rarefied, report the level (depth). — rare_depth","text":"rarefaction depth, NULL biom rarefied.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/rare_depth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"If the samples are rarefied, report the level (depth). — rare_depth","text":"","code":"library(rbiom)          rare_depth(hmp50) #> NULL          biom <- sample_rarefy(hmp50)     rare_depth(biom) #> [1] 1183"},{"path":"https://cmmr.github.io/rbiom/reference/rare_multiplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Combines rare_corrplot and rare_barplot into a single figure. — rare_multiplot","title":"Combines rare_corrplot and rare_barplot into a single figure. — rare_multiplot","text":"Combines rare_corrplot rare_barplot single figure.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rare_multiplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combines rare_corrplot and rare_barplot into a single figure. — rare_multiplot","text":"","code":"rare_multiplot(   biom,   adiv = \"OTUs\",   depths = NULL,   layers = \"t\",   rline = TRUE,   color.by = NULL,   facet.by = NULL,   limit.by = NULL,   test = \"pw_means\",   model = \"log\",   level = 0.95,   p.adj = \"fdr\",   caption = FALSE,   labels = FALSE,   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/rare_multiplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combines rare_corrplot and rare_barplot into a single figure. — rare_multiplot","text":"biom rbiom-class object, data coercible as_rbiom(). adiv Alpha diversity metric(s) use. Options : \"OTUs\", \"Shannon\", \"Chao1\", \"Simpson\", /\"InvSimpson\". shortcut adiv=\"\" also exists. Default: \"Shannon\"  Multiple values allowed. Non-ambiguous abbreviations allowed. depths Rarefaction depths show plot, NULL auto-select. Default: NULL. layers \"trend\", \"scatter\". Single letter abbreviations also accepted. instance, c(\"trend\", \"scatter\") equivalent c(\"t\", \"s\") \"ts\". See vignette(\"corrplots\") examples . Default: \"t\". rline draw horizontal line plot, intended show particular rarefaction depth. Set TRUE show auto-selected rarefaction depth FALSE show line. Default: NULL. color., facet., limit.Metadata columns use aesthetics partitioning. See details. Default: NULL test statistic interest. overview options can found \"Statistical Tests\" section . One \"predict\", \"terms\", \"fit\", \"means\", \"trends\", \"es_means\", \"es_trends\", \"pw_means\", \"pw_trends\". Default: \"pw_means\" model type trend model fit data. Options : \"lm\" (linear), \"log\" (logarithmic), \"gam\" (generalized additive). See \"Model Options\" section additional details. Default: \"log\" level confidence level calculating confidence interval. Default: 0.95 p.adj Method use multiple comparisons adjustment p-values. Run p.adjust.methods list available options. Default: \"fdr\". caption Display information method used trend line fitting beneath plot. Default: FALSE. labels Show sample names bar. Default: FALSE. ... Additional parameters pass along ggplot2 functions. Prefix parameter name either t. s./pt. ensure gets passed () geom_smooth geom_point, respectively. instance, s.size = 2 ensures scatterplot points size set 2.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rare_multiplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combines rare_corrplot and rare_barplot into a single figure. — rare_multiplot","text":"ggplot2 plot.  computed data points, statistics, ggplot command, object history available $data, $stats, $code, $history, respectively.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rare_multiplot.html","id":"statistical-tests","dir":"Reference","previous_headings":"","what":"Statistical Tests","title":"Combines rare_corrplot and rare_barplot into a single figure. — rare_multiplot","text":"\"predict\" -  Augments original data fitted information. See broom::augment.lm(). \"terms\" -  Summary information model's terms, including p-value, r-squared, AIC, BIC, confidence interval level. See broom::tidy.lm(). \"fit\" -  Goodness fit measures, p-values, overall model. See broom::glance.lm(). \"means\" -  estimated marginal mean (EMM) stat.group, along confidence intervals (CI), standard errors (SE), t-ratios, p-values testing mean = zero. See emmeans::emmeans() emmeans::summary.emmGrid(). \"trends\" -  trendline slope stat.group, along CI SE p-value testing slope = zero. See emmeans::emtrends() emmeans::summary.emmGrid(). \"pw_means\" -  Pairwise means. stat.groups compared difference means estimated along SE, t-ratios, p-values testing two means . See emmeans::pairs.emmGrid(). \"pw_trends\" -  Pairwise trends. , comparing trendline slopes instead means. \"es_means\" -  Effect sizes pairwise differences means, including SE CI. See emmeans::eff_size(). \"es_trends\" -  Effect sizes pairwise differences slopes, including SE CI. See emmeans::eff_size().","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rare_multiplot.html","id":"model-options","dir":"Reference","previous_headings":"","what":"Model Options","title":"Combines rare_corrplot and rare_barplot into a single figure. — rare_multiplot","text":"predefined options : \"lm\" -   Linear model: stats::lm(formula = y ~ x).) \"log\" -  Logarithmic model: stats::lm(formula = y ~ log(x)). \"gam\" -  Generalized additive model: mgcv::gam(formula = y ~ s(x, bs = \"cs\"), method = \"REML\"). can alternatively provide list length two first element character vector length 1 naming function, second element list arguments pass function. One function's arguments must named 'formula'. example, model = list(\"stats::lm\", list(formula = y ~ x)).","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rare_multiplot.html","id":"aesthetics-and-partitions","dir":"Reference","previous_headings":"","what":"Aesthetics and Partitions","title":"Combines rare_corrplot and rare_barplot into a single figure. — rare_multiplot","text":"Metadata can used flexibly subset, partition, apply aesthetics creating plot. Common use cases provided . thorough documentation available https://cmmr.github.io/rbiom. color.- metadata column. (Max 1) facet.- categorical metadata column(s). limit.- metadata column(s). built-color palettes colorblind-friendly. available categorical palette names : \"okabe\", \"carto\", \"r4\", \"polychrome\", \"tol\", \"bright\", \"light\", \"muted\", \"vibrant\", \"tableau\", \"classic\", \"alphabet\", \"tableau20\", \"kelly\", \"fishy\". available numeric palette names : \"reds\", \"oranges\", \"greens\", \"purples\", \"grays\", \"acton\", \"bamako\", \"batlow\", \"bilbao\", \"buda\", \"davos\", \"devon\", \"grayC\", \"hawaii\", \"imola\", \"lajolla\", \"lapaz\", \"nuuk\", \"oslo\", \"tokyo\", \"turku\", \"bam\", \"berlin\", \"broc\", \"cork\", \"lisbon\", \"roma\", \"tofino\", \"vanimo\", \"vik\"","code":"## Colors ----------------------------   color.by = \"Body Site\"   color.by = list('Body Site' = \"bright\")   color.by = list('Body Site' = c(\"Stool\", \"Saliva\"))   color.by = list('Body Site' = list('values' = c(\"Stool\", \"Saliva\"), 'colors' = \"bright\"))   color.by = list('Body Site' = c('Stool' = \"blue\", 'Saliva' = \"green\"))      ## Facets ----------------------------   facet.by = \"Body Site\"   facet.by = c(\"Body Site\", \"Sex\")   facet.by = list('Body Site' = c(\"Stool\", \"Saliva\"), \"Sex\")      ## Limits ----------------------------   limit.by = list('Sex' = \"Male\", 'Age' = c(20,40))   limit.by = list('Body Site' = c(\"Saliva\", \"Anterior nares\"), 'Age' = c(NA,35))"},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/rare_multiplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combines rare_corrplot and rare_barplot into a single figure. — rare_multiplot","text":"","code":"library(rbiom)          rare_multiplot(hmp50, color.by=\"Body Site\")"},{"path":"https://cmmr.github.io/rbiom/reference/rare_suggest.html","id":null,"dir":"Reference","previous_headings":"","what":"Suggest a 'good' rarefaction depth. — rare_suggest","title":"Suggest a 'good' rarefaction depth. — rare_suggest","text":"Suggest 'good' rarefaction depth.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rare_suggest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Suggest a 'good' rarefaction depth. — rare_suggest","text":"","code":"rare_suggest(biom)"},{"path":"https://cmmr.github.io/rbiom/reference/rare_suggest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Suggest a 'good' rarefaction depth. — rare_suggest","text":"biom rbiom-class object, data coercible as_rbiom().","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rare_suggest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Suggest a 'good' rarefaction depth. — rare_suggest","text":"integer.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rare_suggest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Suggest a 'good' rarefaction depth. — rare_suggest","text":"","code":"library(rbiom)      rare_suggest(hmp50) #> [1] 1183"},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions in package rbiom. — rbiom-deprecated","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"functions listed deprecated defunct near future. possible, alternative functions similar functionality also mentioned. Help pages deprecated functions available help(\"<function>-deprecated\").","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"","code":"alpha.div(biom, rarefy = FALSE)  beta.div(biom, method, weighted = TRUE, tree = NULL, long = FALSE, md = FALSE)  counts(biom)  info(biom)  metadata(biom, field = NULL, cleanup = FALSE)  nsamples(biom)  ntaxa(biom)  phylogeny(biom)  rarefy(biom, depth = NULL, seed = 0)  read.biom(src, tree = \"auto\", prune = FALSE)  read.fasta(file, ids = NULL)  read.tree(src)  sample.names(biom)  select(biom, samples = NULL, nTop = NULL, nRandom = NULL, seed = 0)  sequences(biom)  subtree(tree, tips)  taxa.names(biom)  taxa.ranks(biom)  taxa.rollup(   biom,   rank = \"OTU\",   map = NULL,   lineage = FALSE,   sparse = FALSE,   taxa = NULL,   long = FALSE,   md = FALSE )  taxonomy(biom, ranks = NULL, unc = \"asis\")  tips(x)  unifrac(biom, weighted = TRUE, tree = NULL)  write.biom(biom, file, format = \"json\")  write.fasta(seqs, outfile = NULL)  write.tree(tree, file = NULL)  write.xlsx(biom, outfile, depth = NULL, seed = 0)  as.percent(biom)  comments(biom)  depth(biom)  depths_barplot(   biom,   rline = TRUE,   counts = TRUE,   labels = TRUE,   trans = \"log10\",   ... )  has.phylogeny(biom)  has.sequences(biom)  id(biom)  is.rarefied(biom)  repair(biom)  sample_subset(x, ...)  sample.sums(biom, long = FALSE, md = FALSE)  taxa.means(biom, rank = NULL)  taxa.sums(biom, rank = NULL)  top.taxa(biom, rank = \"OTU\", n = Inf)  top_taxa(biom, rank = \"OTU\", n = Inf)  comments(x) <- value  counts(x) <- value  id(x) <- value  metadata(x) <- value  phylogeny(x) <- value  sample.names(x) <- value  sequences(x) <- value  taxa.names(x) <- value  taxa.ranks(x) <- value  taxonomy(x) <- value"},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"alpha-div","dir":"Reference","previous_headings":"","what":"alpha.div","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use adiv_matrix() adiv_table() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"beta-div","dir":"Reference","previous_headings":"","what":"beta.div","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use bdiv_table() bdiv_distmat() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"counts","dir":"Reference","previous_headings":"","what":"counts","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use otu_matrix() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"info","dir":"Reference","previous_headings":"","what":"info","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use biom_info() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"metadata","dir":"Reference","previous_headings":"","what":"metadata","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use sample_metadata() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"nsamples","dir":"Reference","previous_headings":"","what":"nsamples","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use n_samples() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"ntaxa","dir":"Reference","previous_headings":"","what":"ntaxa","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use n_otus() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"phylogeny","dir":"Reference","previous_headings":"","what":"phylogeny","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use otu_tree() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"sample-rarefy","dir":"Reference","previous_headings":"","what":"sample_rarefy","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use otu_tree() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"read-biom","dir":"Reference","previous_headings":"","what":"read.biom","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use read_biom() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"read-fasta","dir":"Reference","previous_headings":"","what":"read.fasta","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use read_fasta() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"read-tree","dir":"Reference","previous_headings":"","what":"read.tree","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use read_tree() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"sample-names","dir":"Reference","previous_headings":"","what":"sample.names","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use sample_names() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"select","dir":"Reference","previous_headings":"","what":"select","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use subset() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"sequences","dir":"Reference","previous_headings":"","what":"sequences","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use otu_sequences() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"subtree","dir":"Reference","previous_headings":"","what":"subtree","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use tree_subset() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"taxa-names","dir":"Reference","previous_headings":"","what":"taxa.names","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use otu_names() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"taxa-ranks","dir":"Reference","previous_headings":"","what":"taxa.ranks","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use taxa_ranks() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"taxa-rollup","dir":"Reference","previous_headings":"","what":"taxa.rollup","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use taxa_table() taxa_matrix() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"taxonomy","dir":"Reference","previous_headings":"","what":"taxonomy","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use otu_taxonomy() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"tips","dir":"Reference","previous_headings":"","what":"tips","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use tree_tips() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"unifrac","dir":"Reference","previous_headings":"","what":"unifrac","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use bdiv_distmat() bdiv_table() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"write-biom","dir":"Reference","previous_headings":"","what":"write.biom","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use write_biom() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"write-fasta","dir":"Reference","previous_headings":"","what":"write.fasta","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use write_fasta() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"write-tree","dir":"Reference","previous_headings":"","what":"write.tree","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use write_tree() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"write-xlsx","dir":"Reference","previous_headings":"","what":"write.xlsx","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use write_xlsx() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"as-percent","dir":"Reference","previous_headings":"","what":"as.percent","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use as_percent() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"comments","dir":"Reference","previous_headings":"","what":"comments","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use biom_comment() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"depth","dir":"Reference","previous_headings":"","what":"depth","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use sample_sums() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"depths-barplot","dir":"Reference","previous_headings":"","what":"depths_barplot","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use rare_barplot() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"has-phylogeny","dir":"Reference","previous_headings":"","what":"has.phylogeny","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use has_tree() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"has-sequences","dir":"Reference","previous_headings":"","what":"has.sequences","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use has_sequences() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"id","dir":"Reference","previous_headings":"","what":"id","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use biom_id() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"is-rarefied","dir":"Reference","previous_headings":"","what":"is.rarefied","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use is_rarefied() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"repair","dir":"Reference","previous_headings":"","what":"repair","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use biom_repair() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"sample-subset","dir":"Reference","previous_headings":"","what":"sample_subset","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use subset() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"sample-sums","dir":"Reference","previous_headings":"","what":"sample.sums","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use sample_sums() adiv_table() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"taxa-means","dir":"Reference","previous_headings":"","what":"taxa.means","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use taxa_means() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"taxa-sums","dir":"Reference","previous_headings":"","what":"taxa.sums","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use taxa_sums() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"top-taxa","dir":"Reference","previous_headings":"","what":"top.taxa","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use taxa_sums() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"top-taxa-1","dir":"Reference","previous_headings":"","what":"top_taxa","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use taxa_sums() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"comments-set","dir":"Reference","previous_headings":"","what":"comments-set","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use biom_comment() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"counts-set","dir":"Reference","previous_headings":"","what":"counts-set","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use otu_matrix() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"id-set","dir":"Reference","previous_headings":"","what":"id-set","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use biom_id() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"metadata-set","dir":"Reference","previous_headings":"","what":"metadata-set","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use sample_metadata() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"phylogeny-set","dir":"Reference","previous_headings":"","what":"phylogeny-set","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use otu_tree() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"sample-names-set","dir":"Reference","previous_headings":"","what":"sample.names-set","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use sample_names() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"sequences-set","dir":"Reference","previous_headings":"","what":"sequences-set","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use otu_sequences() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"taxa-names-set","dir":"Reference","previous_headings":"","what":"taxa.names-set","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use otu_names() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"taxa-ranks-set","dir":"Reference","previous_headings":"","what":"taxa.ranks-set","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use taxa_ranks() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"taxonomy-set","dir":"Reference","previous_headings":"","what":"taxonomy-set","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use otu_taxonomy() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom.html","id":null,"dir":"Reference","previous_headings":"","what":"rbiom: Read/Write, Transform, and Summarize BIOM Data — rbiom","title":"rbiom: Read/Write, Transform, and Summarize BIOM Data — rbiom","text":"toolkit working Biological Observation Matrix (BIOM) files. Features include reading/writing BIOM formats, rarefaction, alpha diversity, beta diversity (including UniFrac), summarizing counts taxonomic level, sample subsetting. Standalone functions reading, writing, subsetting phylogenetic trees also provided. CPU intensive operations encoded C multi-thread support.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom.html","id":"multithreading","dir":"Reference","previous_headings":"","what":"Multithreading","title":"rbiom: Read/Write, Transform, and Summarize BIOM Data — rbiom","text":"Many rbiom functions support multithreading: default behavior function run many cores available local compute environment. wish limit number simultaneous threads, set RcppParallel's numThreads option. instance:","code":"RcppParallel::setThreadOptions(numThreads = 4)"},{"path":"https://cmmr.github.io/rbiom/reference/read_biom.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts counts, metadata, taxonomy, and phylogeny from a biom file. — read_biom","title":"Extracts counts, metadata, taxonomy, and phylogeny from a biom file. — read_biom","text":"Extracts counts, metadata, taxonomy, phylogeny biom file.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/read_biom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts counts, metadata, taxonomy, and phylogeny from a biom file. — read_biom","text":"","code":"read_biom(src, tree = \"auto\")"},{"path":"https://cmmr.github.io/rbiom/reference/read_biom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts counts, metadata, taxonomy, and phylogeny from a biom file. — read_biom","text":"src Input data either file path, URL, JSON string. BIOM files can formatted according version 1.0 (JSON) 2.1 (HDF5) specifications, classical tabular format. URLs must begin http://, https://, ftp://, ftps://. JSON files must { first character. Compressed (gzip bzip2) BIOM files also supported. NOTE: read HDF5 formatted BIOM files, BioConductor R package rhdf5 must installed. tree default, tree read BIOM file specified src. Specifying tree=TRUE , generate error message tree present. Setting tree=FALSE return rbiom object without tree data. may also provide file path, URL, Newick string load tree data returned rbiom object. Default: \"auto\"","code":""},{"path":"https://cmmr.github.io/rbiom/reference/read_biom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts counts, metadata, taxonomy, and phylogeny from a biom file. — read_biom","text":"rbiom class object containing parsed data. object can treated list following named elements: $counts -  numeric slam::simple_triplet_matrix() (sparse matrix) observation counts. Taxa (OTUs) rows samples columns. Access modify using otu_matrix(). $metadata -  tibble::tibble() (data frame) containing embedded metadata. Sample IDs .sample column. Access modify using sample_metadata(). $taxonomy -  tibble::tibble() (data frame) mapping OTU IDs taxonomic clades. Columns named .otu, Kingdom, Phylum, Class, Order, Family, Genus, Species, Strain, TaxLvl.1, TaxLvl.2, ... , TaxLvl.N 8 levels taxonomy encoded biom file. Access modify using otu_taxonomy(). $phylogeny -  object class phylo defining phylogenetic relationships OTUs. Although official specification BIOM includes phylogenetic trees BIOM version 2.1, rbiom version 1.0 file includes phylogeny entry newick data, loaded well. ape package additional functions working phylo objects. Access modify using otu_tree(). $sequences -  named character vector, names OTU IDs values nucleic acid sequences represent. values part official BIOM specification, read written defined. Access modify using otu_sequences(). $info -  list attributes defined BIOM file, id, type, format, format_url, generated_by, date, matrix_type, matrix_element_type, comment, shape. Access using biom_info(). Access/set biom_id() biom_comment(). metadata, taxonomy, phylogeny optional components BIOM file specification therefore NULL simple placeholders returned object provided BIOM file.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/read_biom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts counts, metadata, taxonomy, and phylogeny from a biom file. — read_biom","text":"","code":"library(rbiom)      infile <- system.file(\"extdata\", \"hmp50.bz2\", package = \"rbiom\")     biom <- read_biom(infile)      print(biom) #> Human Microbiome Project - 50 Sample Demo (2023-11-22) #>      50 Samples:  (HMP01, HMP02, HMP03, HMP04, HMP05, HM...) #>     490 Taxa:     (UncO2713, UncO4101, AnmMass2, PreBivi...) #>       7 Ranks:    (.otu, Kingdom, Phylum, Class, Order, ...) #>       5 Metadata: (.sample, Age, BMI, Body Site, and Sex) #>         Tree:     Present #>       # Taxa Abundances     otu_matrix(biom)[,1:10] %>% as.matrix() %>% head() #>          HMP01 HMP02 HMP03 HMP04 HMP05 HMP06 HMP07 HMP08 HMP09 HMP10 #> UncO2713     0     0     0     0     0     0     1     0     0     2 #> UncO4101     1     5     6    18     5    15     0     1     8     0 #> AnmMass2     0     0     0     0     0     0     0     0     0     0 #> PreBivi6     0     0     0     0     0     0     0     0     0     0 #> CprSpeci     0     0     0     0     0     0     0     0     0     0 #> Unc96922     0     0     0     1     2     5     0     1     0     0          otu_taxonomy(biom) %>% head() #> # A tibble: 6 × 7 #>   Kingdom  Phylum         Class          Order            Family     Genus .otu  #>   <fct>    <fct>          <fct>          <fct>            <fct>      <fct> <fct> #> 1 Bacteria Bacteroidetes  Bacteroidia    Bacteroidales    Rikenella… Alis… UncO… #> 2 Bacteria Firmicutes     Clostridia     Clostridiales    Lachnospi… Lach… UncO… #> 3 Bacteria Actinobacteria Actinobacteria Actinomycetales  Actinomyc… Acti… AnmM… #> 4 Bacteria Bacteroidetes  Bacteroidia    Bacteroidales    Prevotell… Prev… PreB… #> 5 Bacteria Bacteroidetes  Bacteroidia    Bacteroidales    Porphyrom… Barn… CprS… #> 6 Bacteria Bacteroidetes  Flavobacteriia Flavobacteriales Flavobact… Capn… Unc9…      # Metadata     sample_metadata(biom) %>% head() #> # A tibble: 6 × 5 #>   .sample   Age   BMI `Body Site`   Sex    #>   <fct>   <dbl> <dbl> <fct>         <fct>  #> 1 HMP01      22    20 Buccal mucosa Female #> 2 HMP02      24    23 Buccal mucosa Male   #> 3 HMP03      28    26 Saliva        Male   #> 4 HMP04      25    23 Saliva        Male   #> 5 HMP05      27    24 Buccal mucosa Female #> 6 HMP06      32    25 Saliva        Male            table(biom$metadata$Sex, biom$metadata$`Body Site`) #>          #>          Anterior nares Buccal mucosa Mid vagina Saliva Stool #>   Female              5             5         10      5     5 #>   Male                5             5          0      5     5          sprintf(\"Mean age: %.1f\", mean(biom$metadata$Age)) #> [1] \"Mean age: 27.8\"      # Phylogenetic tree     otu_tree(biom) %>%       tree_subset(1:10) %>%       ape::plot.phylo()"},{"path":"https://cmmr.github.io/rbiom/reference/read_fasta.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a fasta file into a named character vector. — read_fasta","title":"Parse a fasta file into a named character vector. — read_fasta","text":"Parse fasta file named character vector.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/read_fasta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a fasta file into a named character vector. — read_fasta","text":"","code":"read_fasta(file, ids = NULL)"},{"path":"https://cmmr.github.io/rbiom/reference/read_fasta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a fasta file into a named character vector. — read_fasta","text":"file file/URL fasta-formatted sequences. Can optionally compressed gzip, bzip2, xz, lzma. ids Character vector IDs retrieve. default, NULL, retrieve everything.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/read_fasta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a fasta file into a named character vector. — read_fasta","text":"named character vector names fasta headers values sequences.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/read_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a newick formatted phylogenetic tree. — read_tree","title":"Read a newick formatted phylogenetic tree. — read_tree","text":"phylogenetic tree required computing UniFrac distance matrices. can load tree file providing tree string directly. tree must Newick format, also known parenthetic format New Hampshire format.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/read_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a newick formatted phylogenetic tree. — read_tree","text":"","code":"read_tree(src)"},{"path":"https://cmmr.github.io/rbiom/reference/read_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a newick formatted phylogenetic tree. — read_tree","text":"src Input data either file path, URL, Newick string. Compressed (gzip bzip2) files also supported.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/read_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a newick formatted phylogenetic tree. — read_tree","text":"phylo class object representing tree.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/read_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a newick formatted phylogenetic tree. — read_tree","text":"","code":"library(rbiom)          infile <- system.file(\"extdata\", \"newick.tre\", package = \"rbiom\")     tree <- read_tree(infile)          tree <- read_tree(\"         (t9:0.99,((t5:0.87,t2:0.89):0.51,(((t10:0.16,(t7:0.83,t4:0.96)         :0.94):0.69,(t6:0.92,(t3:0.62,t1:0.85):0.54):0.23):0.74,t8:0.1         2):0.43):0.67);\")"},{"path":"https://cmmr.github.io/rbiom/reference/sample_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set the sample metadata. — sample_metadata","title":"Get or set the sample metadata. — sample_metadata","text":"Get set sample metadata.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/sample_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set the sample metadata. — sample_metadata","text":"","code":"sample_metadata(biom, field = NULL)  sample_metadata(biom) <- value"},{"path":"https://cmmr.github.io/rbiom/reference/sample_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set the sample metadata. — sample_metadata","text":"biom rbiom-class object, data coercible as_rbiom(). field name single metadata column retrieve. provided, named vector returned instead data.frame. Default: NULL value data.frame metadata. row names '.sample' column must match IDs sample_names(x). returned rbiom object subset just samples new metadata. exception '.sample', character columns converted factor.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/sample_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set the sample metadata. — sample_metadata","text":"tibble (data.frame) metadata biom. '.sample' always first column. field given, instead return named vector field's values.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/sample_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set the sample metadata. — sample_metadata","text":"","code":"library(rbiom)          sample_metadata(hmp50) %>% head(4) #> # A tibble: 4 × 5 #>   .sample   Age   BMI `Body Site`   Sex    #>   <fct>   <dbl> <dbl> <fct>         <fct>  #> 1 HMP01      22    20 Buccal mucosa Female #> 2 HMP02      24    23 Buccal mucosa Male   #> 3 HMP03      28    26 Saliva        Male   #> 4 HMP04      25    23 Saliva        Male            sample_metadata(hmp50, \"Body Site\") %>% head(4) #>         HMP01         HMP02         HMP03         HMP04  #> Buccal mucosa Buccal mucosa        Saliva        Saliva  #> Levels: Anterior nares Buccal mucosa Mid vagina Saliva Stool          md <- sample_metadata(hmp50)     md <- md[,c('.sample', 'Sex', 'Body Site')]     sample_metadata(hmp50) <- md     sample_metadata(hmp50) %>% head(4) #> # A tibble: 4 × 3 #>   .sample Sex    `Body Site`   #>   <fct>   <fct>  <fct>         #> 1 HMP01   Female Buccal mucosa #> 2 HMP02   Male   Buccal mucosa #> 3 HMP03   Male   Saliva        #> 4 HMP04   Male   Saliva"},{"path":"https://cmmr.github.io/rbiom/reference/sample_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set the sample names. — sample_names","title":"Get or set the sample names. — sample_names","text":"Get set sample names.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/sample_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set the sample names. — sample_names","text":"","code":"sample_names(biom)  sample_names(biom) <- value"},{"path":"https://cmmr.github.io/rbiom/reference/sample_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set the sample names. — sample_names","text":"biom rbiom-class object, data coercible as_rbiom(). value character vector new sample names.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/sample_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set the sample names. — sample_names","text":"character vector sample names biom.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/sample_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set the sample names. — sample_names","text":"","code":"library(rbiom)           biom <- hmp50          head(sample_names(biom)) #> [1] \"HMP01\" \"HMP02\" \"HMP03\" \"HMP04\" \"HMP05\" \"HMP06\"          sample_names(biom) <- sub('HMP', 'Sample_', sample_names(biom))     head(sample_names(biom)) #> [1] \"Sample_01\" \"Sample_02\" \"Sample_03\" \"Sample_04\" \"Sample_05\" \"Sample_06\""},{"path":"https://cmmr.github.io/rbiom/reference/sample_rarefy.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset counts so that all samples have the same number of observations. — sample_rarefy","title":"Subset counts so that all samples have the same number of observations. — sample_rarefy","text":"Subset counts samples number observations.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/sample_rarefy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset counts so that all samples have the same number of observations. — sample_rarefy","text":"","code":"sample_rarefy(biom, depth = NULL, seed = 0)"},{"path":"https://cmmr.github.io/rbiom/reference/sample_rarefy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset counts so that all samples have the same number of observations. — sample_rarefy","text":"biom rbiom-class object, data coercible as_rbiom(). depth number observations keep, per sample. set NULL, depth automatically selected. Samples fewer number observations dropped. called data non-integer abundances, values re-scaled integers 1 depth sum depth. seed integer use seeding random number generator. need create different random rarefactions rbiom object, set seed value different number time.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/sample_rarefy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset counts so that all samples have the same number of observations. — sample_rarefy","text":"rarefied rbiom object.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/sample_rarefy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset counts so that all samples have the same number of observations. — sample_rarefy","text":"","code":"library(rbiom)      range(sample_sums(hmp50)) #> [1]   182 22117      biom <- sample_rarefy(hmp50, depth=1000)     range(sample_sums(biom)) #> [1] 1000 1000"},{"path":"https://cmmr.github.io/rbiom/reference/sample_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduce samples to a specific list — sample_select","title":"Reduce samples to a specific list — sample_select","text":"Reduce samples specific list","code":""},{"path":"https://cmmr.github.io/rbiom/reference/sample_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduce samples to a specific list — sample_select","text":"","code":"sample_select(biom, samples = NULL, nTop = NULL, nRandom = NULL, seed = 0)"},{"path":"https://cmmr.github.io/rbiom/reference/sample_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reduce samples to a specific list — sample_select","text":"biom rbiom-class object, data coercible as_rbiom(). samples Sample names, indices, logical vector identifying samples keep. latter two based order sample names given sample_names(biom). nTop Selects number samples, taking sample observations first, sample second-observations, etc. Ties randomly ordered. nTop higher number samples dataset, entire dataset returned. See note. nRandom Randomly selects number samples. higher number samples dataset, entire dataset returned. See note. seed Random seed, used selecting nRandom samples. Note: Generally, specify one filters: samples, nTop, nRandom. However, specifying multiple filters allowed; applied order listed .","code":""},{"path":"https://cmmr.github.io/rbiom/reference/sample_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reduce samples to a specific list — sample_select","text":"rbiom object, subsetted requested.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/sample_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reduce samples to a specific list — sample_select","text":"","code":"if (FALSE) {     library(rbiom)           ex1 <- sample_select(hmp50, c('HMP14', 'HMP22', 'HMP03'))     ex2 <- sample_select(hmp50, c(32, 11, 28, 16, 46, 5))     ex3 <- sample_select(hmp50, 1:50 %% 6 == 0)     ex4 <- sample_select(hmp50, nRandom = 10)     ex5 <- sample_select(hmp50, nTop = 5)     ex6 <- sample_select(hmp50, samples = 10:40, nTop = 20, nRandom = 10)  }"},{"path":"https://cmmr.github.io/rbiom/reference/sample_sums.html","id":null,"dir":"Reference","previous_headings":"","what":"Sum the observations in each sample. — sample_sums","title":"Sum the observations in each sample. — sample_sums","text":"Sum observations sample.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/sample_sums.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sum the observations in each sample. — sample_sums","text":"","code":"sample_sums(biom)"},{"path":"https://cmmr.github.io/rbiom/reference/sample_sums.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sum the observations in each sample. — sample_sums","text":"biom rbiom-class object, data coercible as_rbiom().","code":""},{"path":"https://cmmr.github.io/rbiom/reference/sample_sums.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sum the observations in each sample. — sample_sums","text":"named numeric vector number observations sample. names sample IDs.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/sample_sums.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sum the observations in each sample. — sample_sums","text":"","code":"library(rbiom)          sample_sums(hmp50) %>% sort() %>% head() #> HMP36 HMP24 HMP03 HMP02 HMP42 HMP17  #>   182  1183  1353  1371  1489  1579           hist(sample_sums(hmp50))"},{"path":"https://cmmr.github.io/rbiom/reference/stats_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Run non-parametric statistics on a data.frame. — stats_table","title":"Run non-parametric statistics on a data.frame. — stats_table","text":"Run non-parametric statistics data.frame.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/stats_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run non-parametric statistics on a data.frame. — stats_table","text":"","code":"stats_table(   df,   stat.by,   resp = attr(df, \"response\"),   regr = NULL,   test = ifelse(is.null(regr), \"means\", \"trends\"),   model = \"lm\",   level = 0.95,   split.by = NULL,   p.adj = \"fdr\" )"},{"path":"https://cmmr.github.io/rbiom/reference/stats_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run non-parametric statistics on a data.frame. — stats_table","text":"df data.frame columns named stat., resp, regr, split.. Required. stat.categorical metadata field defining statistical groups. Required. resp response (independent) numeric variable, taxa abundance alpha diversity.  Default: attr(df, 'response') regr run regression analysis, set regr numeric metadata field \"x-axis\" values. Leaving regr=NULL generate boxplot-like statistics; non-NULL, corrplot-like statistics returned. Default: NULL test statistic interest. overview options can found \"Statistical Tests\" section . One \"predict\", \"terms\", \"fit\", \"means\", \"trends\", \"es_means\", \"es_trends\", \"pw_means\", \"pw_trends\". Default: ifelse(.null(regr), \"means\", \"trends\") model type trend model fit data. Options : \"lm\" (linear), \"log\" (logarithmic), \"gam\" (generalized additive). See \"Model Options\" section additional details. Default: \"lm\" level confidence level calculating confidence interval. Default: 0.95 split.Name(s) metadata columns data split prior calculations. Default: NULL p.adj Method use multiple comparisons adjustment p-values. Run p.adjust.methods list available options. Default: \"fdr\".","code":""},{"path":"https://cmmr.github.io/rbiom/reference/stats_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run non-parametric statistics on a data.frame. — stats_table","text":"tibble data frame summary statistics. R code generating statistics $code, object history $history.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/stats_table.html","id":"statistical-tests","dir":"Reference","previous_headings":"","what":"Statistical Tests","title":"Run non-parametric statistics on a data.frame. — stats_table","text":"regr NULL: \"means\" -  Considers groups using Kruskal-Wallis non-parametric test: stats::kruskal.test(). \"pw_means\" -  Pairwise comparison stat.groups using Wilcox rank sum (aka Mann-Whitney) non-parametric test: stats::wilcox.test(). regr NULL: \"predict\" -  Augments original data fitted information. See broom::augment.lm(). \"terms\" -  Summary information model's terms, including p-value, r-squared, AIC, BIC, confidence interval level. See broom::tidy.lm(). \"fit\" -  Goodness fit measures, p-values, overall model. See broom::glance.lm(). \"means\" -  estimated marginal mean (EMM) stat.group, along confidence intervals (CI), standard errors (SE), t-ratios, p-values testing mean = zero. See emmeans::emmeans() emmeans::summary.emmGrid(). \"trends\" -  trendline slope stat.group, along CI SE p-value testing slope = zero. See emmeans::emtrends() emmeans::summary.emmGrid(). \"pw_means\" -  Pairwise means. stat.groups compared difference means estimated along SE, t-ratios, p-values testing two means . See emmeans::pairs.emmGrid(). \"pw_trends\" -  Pairwise trends. , comparing trendline slopes instead means. \"es_means\" -  Effect sizes pairwise differences means, including SE CI. See emmeans::eff_size(). \"es_trends\" -  Effect sizes pairwise differences slopes, including SE CI. See emmeans::eff_size().","code":""},{"path":"https://cmmr.github.io/rbiom/reference/stats_table.html","id":"model-options","dir":"Reference","previous_headings":"","what":"Model Options","title":"Run non-parametric statistics on a data.frame. — stats_table","text":"predefined options : \"lm\" -   Linear model: stats::lm(formula = y ~ x).) \"log\" -  Logarithmic model: stats::lm(formula = y ~ log(x)). \"gam\" -  Generalized additive model: mgcv::gam(formula = y ~ s(x, bs = \"cs\"), method = \"REML\"). can alternatively provide list length two first element character vector length 1 naming function, second element list arguments pass function. One function's arguments must named 'formula'. example, model = list(\"stats::lm\", list(formula = y ~ x)).","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/stats_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run non-parametric statistics on a data.frame. — stats_table","text":"","code":"library(rbiom)          biom <- sample_rarefy(hmp50)          df <- taxa_table(biom, rank = \"Family\")     stats_table(df, stat.by = \"Body Site\") #> # Test:     kruskal.test(.abundance ~ `Body Site`). #> # A tibble: 1 × 5 #>      .n .stat   .df   .p.val   .adj.p #>   <int> <dbl> <int>    <dbl>    <dbl> #> 1  3920  148.     4 5.57e-31 5.57e-31          df <- adiv_table(biom)     stats_table(df, stat.by = \"Sex\", test = \"pw_means\") #> # Test:     wilcox.test(.diversity ~ Sex). #> # A tibble: 1 × 8 #>   Sex              .n .stat .estimate .lower .upper .p.val .adj.p #>   <fct>         <dbl> <dbl>     <dbl>  <dbl>  <dbl>  <dbl>  <dbl> #> 1 Female - Male    49   167    -0.781  -1.44 -0.183 0.0149 0.0149          stats_table(df, stat.by = \"Sex\", regr = \"BMI\") #> # Test:     Estimated marginal means of linear trends. #> # Model:    stats::lm(.diversity ~ BMI * Sex) #> # A tibble: 2 × 9 #>   Sex    .trend    .se   .df  .lower .upper .t.ratio .p.val .adj.p #>   <fct>   <dbl>  <dbl> <dbl>   <dbl>  <dbl>    <dbl>  <dbl>  <dbl> #> 1 Female 0.0653 0.0502    45 -0.0359  0.166    1.30   0.200  0.400 #> 2 Male   0.0546 0.0697    45 -0.0857  0.195    0.784  0.437  0.437"},{"path":"https://cmmr.github.io/rbiom/reference/subset.rbiom.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset by sample metadata. — subset.rbiom","title":"Subset by sample metadata. — subset.rbiom","text":"Subset sample metadata.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/subset.rbiom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset by sample metadata. — subset.rbiom","text":"","code":"# S3 method for rbiom subset(biom, subset, select)"},{"path":"https://cmmr.github.io/rbiom/reference/subset.rbiom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset by sample metadata. — subset.rbiom","text":"biom rbiom-class object, data coercible as_rbiom(). subset Logical expression indicating elements rows keep. select expression, indicating columns select data frame.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/subset.rbiom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset by sample metadata. — subset.rbiom","text":"rbiom object specified samples.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/subset.rbiom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset by sample metadata. — subset.rbiom","text":"","code":"library(rbiom)          biom <- hmp50     sample_metadata(biom) %>% head() #> # A tibble: 6 × 5 #>   .sample   Age   BMI `Body Site`   Sex    #>   <fct>   <dbl> <dbl> <fct>         <fct>  #> 1 HMP01      22    20 Buccal mucosa Female #> 2 HMP02      24    23 Buccal mucosa Male   #> 3 HMP03      28    26 Saliva        Male   #> 4 HMP04      25    23 Saliva        Male   #> 5 HMP05      27    24 Buccal mucosa Female #> 6 HMP06      32    25 Saliva        Male            biom %<>% subset(Sex == \"Male\")     sample_metadata(biom) %>% head() #> # A tibble: 6 × 5 #>   .sample   Age   BMI `Body Site`   Sex   #>   <fct>   <dbl> <dbl> <fct>         <fct> #> 1 HMP02      24    23 Buccal mucosa Male  #> 2 HMP03      28    26 Saliva        Male  #> 3 HMP04      25    23 Saliva        Male  #> 4 HMP06      32    25 Saliva        Male  #> 5 HMP07      26    22 Buccal mucosa Male  #> 6 HMP09      33    32 Saliva        Male"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_barplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Display taxa abundances as a stacked bar graph. — taxa_barplot","title":"Display taxa abundances as a stacked bar graph. — taxa_barplot","text":"Display taxa abundances stacked bar graph.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_barplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display taxa abundances as a stacked bar graph. — taxa_barplot","text":"","code":"taxa_barplot(   biom,   rank = -1,   taxa = 6,   colors = TRUE,   patterns = FALSE,   label.by = NULL,   order.by = NULL,   facet.by = NULL,   limit.by = NULL,   dist = \"euclidean\",   clust = \"complete\",   other = TRUE,   unc = \"singly\",   lineage = FALSE,   xlab.angle = 90,   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_barplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display taxa abundances as a stacked bar graph. — taxa_barplot","text":"biom rbiom-class object, data coercible as_rbiom(). rank rank(s) taxa display. E.g. \"Phylum\", \"Genus\", \".otu\", etc. integer vector can also given, 1 highest rank, 2 second highest, -1 lowest rank, -2 second lowest, 0 OTU \"rank\". Run taxa_ranks() see options given rbiom object. Default: -1. taxa taxa display. integer value show top n abundant taxa. value 0 <= n < 1 show taxa mean abundance greater (e.g. 0.1 implies >= 10%). character vector taxa names show named taxa. Default: 6. colors, patterns character vector colors patterns use graph. named character vector can used map taxon names specific colors patterns. Set TRUE auto-select colors patterns, FALSE disable per-taxa colors patterns. Default: colors=TRUE, patterns=FALSE. label., order.metadata column use labeling /sorting samples across x-axis. order.=NULL, samples arranged based dist clust, . Default: NULL. facet., limit.Metadata columns use data partitioning. Default: NULL dist, clust Distance (stats::dist()) clustering (stats::hclust()) methods use automatically arranging samples along x-axis put samples similar composition near one another. Default: dist=\"euclidean\", clust=\"complete\". Sum non-itemized taxa \"\" taxa. FALSE, returns taxa matched taxa argument. Specifying TRUE adds \"\" returned set. string can also given imply TRUE, value name use instead \"\". Default: FALSE unc handle unclassified, uncultured, similarly ambiguous taxa names. Options : \"singly\" -  Replaces OTU name. \"grouped\" -  Replaces higher rank's name. \"drop\" -  Excludes result. \"asis\" -  check/modify taxa names. Default: \"singly\"  Abbreviations allowed. lineage Include ranks name taxa. instance, setting TRUE produce Bacteria; Actinobacteria; Coriobacteriia; Coriobacteriales. Otherwise taxa name simply Coriobacteriales. want set TRUE unc = \"asis\" taxa names (Incertae_Sedis) map multiple higher level ranks. Default: FALSE xlab.angle Angle labels bottom plot. Options \"auto\", '0', '30', '90'. Default: \"auto\". ... Parameters underlying functions. Prefixing parameter names layer name ensures particular parameter passed , , layer.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_barplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display taxa abundances as a stacked bar graph. — taxa_barplot","text":"ggplot2 plot.  computed data points, ggplot command, object history available $data, $code, $history, respectively.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/taxa_barplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display taxa abundances as a stacked bar graph. — taxa_barplot","text":"","code":"library(rbiom)          biom <- sample_rarefy(hmp50)     taxa_barplot(biom, rank=\"Phylum\")"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize BIOM data with boxplots. — taxa_boxplot","title":"Visualize BIOM data with boxplots. — taxa_boxplot","text":"Visualize BIOM data boxplots.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize BIOM data with boxplots. — taxa_boxplot","text":"","code":"taxa_boxplot(   biom,   x = NULL,   rank = -1,   taxa = 6,   layers = \"bld\",   unc = \"singly\",   other = FALSE,   color.by = NULL,   pattern.by = NULL,   shape.by = NULL,   facet.by = NULL,   limit.by = NULL,   flip = FALSE,   stripe = NULL,   p.top = Inf,   p.adj = \"fdr\",   p.label = 0.05,   ci = \"ci\",   level = 0.95,   outliers = NULL,   xlab.angle = \"auto\",   y.trans = \"sqrt\",   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize BIOM data with boxplots. — taxa_boxplot","text":"biom rbiom-class object, data coercible as_rbiom(). x categorical metadata column name use x-axis. default, NULL puts taxa along x-axis. rank rank(s) taxa display. E.g. \"Phylum\", \"Genus\", \".otu\", etc. integer vector can also given, 1 highest rank, 2 second highest, -1 lowest rank, -2 second lowest, 0 OTU \"rank\". Run taxa_ranks() see options given rbiom object. Default: -1. taxa taxa display. integer value show top n abundant taxa. value 0 <= n < 1 show taxa mean abundance greater (e.g. 0.1 implies >= 10%). character vector taxa names show named taxa. Default: 6. layers \"bar\", \"box\" (\"x\"), \"violin\", \"dot\", \"strip\", \"crossbar\", \"errorbar\", \"linerange\", \"pointrange\". Single letter abbreviations also accepted. instance, c(\"box\", \"dot\") equivalent c(\"x\", \"d\") \"xd\". See vignette(\"boxplots\") examples . Default: \"bld\". unc handle unclassified, uncultured, similarly ambiguous taxa names. Options : \"singly\" -  Replaces OTU name. \"grouped\" -  Replaces higher rank's name. \"drop\" -  Excludes result. \"asis\" -  check/modify taxa names. Default: \"singly\"  Abbreviations allowed. Sum non-itemized taxa \"\" taxa. FALSE, returns taxa matched taxa argument. Specifying TRUE adds \"\" returned set. string can also given imply TRUE, value name use instead \"\". Default: FALSE color., pattern., shape., facet., limit.Metadata columns use aesthetics partitioning. Default: NULL flip Transpose axes, taxa present rows instead columns. Default: FALSE stripe Shade every x position. Default: flip p.top display taxa significant differences abundance. p.top >= 1, p.top significant taxa displayed. p.top less one, taxa adjusted p-value <= p.top displayed. Recommended used combination taxa parameter set lower bound mean abundance considered taxa. Default: Inf p.adj Method use multiple comparisons adjustment p-values. Run p.adjust.methods list available options. Default: \"fdr\". p.label Minimum adjusted p-value display plot bracket. p.label = 0.05 -  Show p-values <= 0.05. p.label = 0 -  show p-values plot. p.label = 1 -  Show p-values plot. numeric vector one value provided, used breaks asterisk notation. Default: 0.05 ci calculate min/max crossbar, errorbar, linerange, pointrange layers. Options : \"ci\" (confidence interval), \"range\", \"sd\" (standard deviation), \"se\" (standard error), \"mad\" (median absolute deviation). center mark crossbar pointrange represents mean, except code\"mad\" case represents median. Default: \"ci\" level confidence level calculating confidence interval. Default: 0.95 outliers Show boxplot outliers? TRUE always show. FALSE always hide. NULL hide overlaying dot strip chart.  Default: NULL xlab.angle Angle labels bottom plot. Options \"auto\", '0', '30', '90'. Default: \"auto\". y.trans transformation apply y-axis. Visualizing differences high- low-abundance taxa best done non-linear axis. Options : \"sqrt\" -  square-root transformation \"log1p\" -  log(y + 1) transformation NULL -  transformation methods allow visualization high- low-abundance taxa simultaneously, without complaint 'zero' count observations. Default: \"sqrt\" ... Parameters matched formal arguments ggplot2 functions. Prefixing parameter names layer name ensures particular parameter passed , , layer. instance, dot.size = 2 d.size = 2 ensures dotplot layer size set 2. special prefix pt. control dot strip layers.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize BIOM data with boxplots. — taxa_boxplot","text":"ggplot2 plot.  computed data points, statistics, ggplot command, object history available $data, $stats, $code, $history, respectively.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/taxa_boxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize BIOM data with boxplots. — taxa_boxplot","text":"","code":"library(rbiom)          biom <- sample_rarefy(hmp50)     taxa_boxplot(biom, rank = c(\"Phylum\", \"Genus\"), flip = TRUE)      taxa_boxplot(biom, taxa = 3, layers = \"ps\", color.by = list(\"Body Site\" = c('Saliva' = \"blue\", 'Stool' = \"red\")))"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_corrplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize taxa abundance with scatterplots and trendlines. — taxa_corrplot","title":"Visualize taxa abundance with scatterplots and trendlines. — taxa_corrplot","text":"Visualize taxa abundance scatterplots trendlines.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_corrplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize taxa abundance with scatterplots and trendlines. — taxa_corrplot","text":"","code":"taxa_corrplot(   biom,   x,   rank = -1,   taxa = 6,   layers = \"t\",   color.by = NULL,   facet.by = NULL,   limit.by = NULL,   test = \"trends\",   model = \"lm\",   level = 0.95,   p.top = Inf,   p.adj = \"fdr\",   caption = FALSE,   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_corrplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize taxa abundance with scatterplots and trendlines. — taxa_corrplot","text":"biom rbiom-class object, data coercible as_rbiom(). x numeric metadata field use x-axis. Required. rank rank(s) taxa display. E.g. \"Phylum\", \"Genus\", \".otu\", etc. integer vector can also given, 1 highest rank, 2 second highest, -1 lowest rank, -2 second lowest, 0 OTU \"rank\". Run taxa_ranks() see options given rbiom object. Default: -1. taxa taxa display. integer value show top n abundant taxa. value 0 <= n < 1 show taxa mean abundance greater (e.g. 0.1 implies >= 10%). character vector taxa names show named taxa. Default: 6. layers \"trend\", \"scatter\". Single letter abbreviations also accepted. instance, c(\"trend\", \"scatter\") equivalent c(\"t\", \"s\") \"ts\". See vignette(\"corrplots\") examples . Default: \"t\". color., facet., limit.Metadata columns use aesthetics partitioning. See details. Default: NULL test statistic interest. overview options can found \"Statistical Tests\" section . One \"predict\", \"terms\", \"fit\", \"means\", \"trends\", \"es_means\", \"es_trends\", \"pw_means\", \"pw_trends\". Default: \"trends\" model type trend model fit data. Options : \"lm\" (linear), \"log\" (logarithmic), \"gam\" (generalized additive). See \"Model Options\" section additional details. Default: \"lm\" level confidence level calculating confidence interval. Default: 0.95 p.top display taxa significant differences abundance. p.top >= 1, p.top significant taxa displayed. p.top less one, taxa adjusted p-value <= p.top displayed. Recommended used combination taxa parameter set lower bound mean abundance considered taxa. Default: Inf p.adj Method use multiple comparisons adjustment p-values. Run p.adjust.methods list available options. Default: \"fdr\". caption Display information method used trend line fitting beneath plot. Default: FALSE. ... Additional parameters pass along ggplot2 functions. Prefix parameter name either t. s./pt. ensure gets passed () geom_smooth geom_point, respectively. instance, s.size = 2 ensures scatterplot points size set 2.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_corrplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize taxa abundance with scatterplots and trendlines. — taxa_corrplot","text":"ggplot2 plot.  computed data points, statistics, ggplot command, object history available $data, $stats, $code, $history, respectively.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_corrplot.html","id":"statistical-tests","dir":"Reference","previous_headings":"","what":"Statistical Tests","title":"Visualize taxa abundance with scatterplots and trendlines. — taxa_corrplot","text":"\"predict\" -  Augments original data fitted information. See broom::augment.lm(). \"terms\" -  Summary information model's terms, including p-value, r-squared, AIC, BIC, confidence interval level. See broom::tidy.lm(). \"fit\" -  Goodness fit measures, p-values, overall model. See broom::glance.lm(). \"means\" -  estimated marginal mean (EMM) stat.group, along confidence intervals (CI), standard errors (SE), t-ratios, p-values testing mean = zero. See emmeans::emmeans() emmeans::summary.emmGrid(). \"trends\" -  trendline slope stat.group, along CI SE p-value testing slope = zero. See emmeans::emtrends() emmeans::summary.emmGrid(). \"pw_means\" -  Pairwise means. stat.groups compared difference means estimated along SE, t-ratios, p-values testing two means . See emmeans::pairs.emmGrid(). \"pw_trends\" -  Pairwise trends. , comparing trendline slopes instead means. \"es_means\" -  Effect sizes pairwise differences means, including SE CI. See emmeans::eff_size(). \"es_trends\" -  Effect sizes pairwise differences slopes, including SE CI. See emmeans::eff_size().","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_corrplot.html","id":"model-options","dir":"Reference","previous_headings":"","what":"Model Options","title":"Visualize taxa abundance with scatterplots and trendlines. — taxa_corrplot","text":"predefined options : \"lm\" -   Linear model: stats::lm(formula = y ~ x).) \"log\" -  Logarithmic model: stats::lm(formula = y ~ log(x)). \"gam\" -  Generalized additive model: mgcv::gam(formula = y ~ s(x, bs = \"cs\"), method = \"REML\"). can alternatively provide list length two first element character vector length 1 naming function, second element list arguments pass function. One function's arguments must named 'formula'. example, model = list(\"stats::lm\", list(formula = y ~ x)).","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_corrplot.html","id":"aesthetics-and-partitions","dir":"Reference","previous_headings":"","what":"Aesthetics and Partitions","title":"Visualize taxa abundance with scatterplots and trendlines. — taxa_corrplot","text":"Metadata can used flexibly subset, partition, apply aesthetics creating plot. Common use cases provided . thorough documentation available https://cmmr.github.io/rbiom. color.- metadata column. (Max 1) facet.- categorical metadata column(s). limit.- metadata column(s). built-color palettes colorblind-friendly. available categorical palette names : \"okabe\", \"carto\", \"r4\", \"polychrome\", \"tol\", \"bright\", \"light\", \"muted\", \"vibrant\", \"tableau\", \"classic\", \"alphabet\", \"tableau20\", \"kelly\", \"fishy\". available numeric palette names : \"reds\", \"oranges\", \"greens\", \"purples\", \"grays\", \"acton\", \"bamako\", \"batlow\", \"bilbao\", \"buda\", \"davos\", \"devon\", \"grayC\", \"hawaii\", \"imola\", \"lajolla\", \"lapaz\", \"nuuk\", \"oslo\", \"tokyo\", \"turku\", \"bam\", \"berlin\", \"broc\", \"cork\", \"lisbon\", \"roma\", \"tofino\", \"vanimo\", \"vik\"","code":"## Colors ----------------------------   color.by = \"Body Site\"   color.by = list('Body Site' = \"bright\")   color.by = list('Body Site' = c(\"Stool\", \"Saliva\"))   color.by = list('Body Site' = list('values' = c(\"Stool\", \"Saliva\"), 'colors' = \"bright\"))   color.by = list('Body Site' = c('Stool' = \"blue\", 'Saliva' = \"green\"))      ## Facets ----------------------------   facet.by = \"Body Site\"   facet.by = c(\"Body Site\", \"Sex\")   facet.by = list('Body Site' = c(\"Stool\", \"Saliva\"), \"Sex\")      ## Limits ----------------------------   limit.by = list('Sex' = \"Male\", 'Age' = c(20,40))   limit.by = list('Body Site' = c(\"Saliva\", \"Anterior nares\"), 'Age' = c(NA,35))"},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/taxa_corrplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize taxa abundance with scatterplots and trendlines. — taxa_corrplot","text":"","code":"library(rbiom)          biom <- sample_rarefy(hmp50)     taxa_corrplot(biom, \"BMI\", color.by=\"Body Site\", taxa = 4)"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Display taxa abundances as a heatmap. — taxa_heatmap","title":"Display taxa abundances as a heatmap. — taxa_heatmap","text":"Display taxa abundances heatmap.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display taxa abundances as a heatmap. — taxa_heatmap","text":"","code":"taxa_heatmap(   biom,   rank = -1,   taxa = 6,   grid = list(label = \"{rank} Abundance\", colors = \"bilbao\"),   color.by = NULL,   order.by = NULL,   limit.by = NULL,   other = FALSE,   unc = \"singly\",   lineage = FALSE,   label = TRUE,   label_size = NULL,   rescale = \"none\",   trees = TRUE,   clust = \"complete\",   dist = \"euclidean\",   tree_height = NULL,   track_height = NULL,   ratio = 1,   legend = \"right\",   xlab.angle = \"auto\",   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display taxa abundances as a heatmap. — taxa_heatmap","text":"biom rbiom-class object, data coercible as_rbiom(). rank rank(s) taxa display. E.g. \"Phylum\", \"Genus\", \".otu\", etc. integer vector can also given, 1 highest rank, 2 second highest, -1 lowest rank, -2 second lowest, 0 OTU \"rank\". Run taxa_ranks() see options given rbiom object. Default: -1. taxa taxa display. integer value show top n abundant taxa. value 0 <= n < 1 show taxa mean abundance greater (e.g. 0.1 implies >= 10%). character vector taxa names show named taxa. Default: 6. grid Color palette name, list entries label, colors, range, bins, na.color, /guide. See Track Definitions section details. Default: list(label = \"{rank} Abundance\", colors = \"bilbao\"). Sum non-itemized taxa \"\" taxa. FALSE, returns taxa matched taxa argument. Specifying TRUE adds \"\" returned set. string can also given imply TRUE, value name use instead \"\". Default: FALSE unc handle unclassified, uncultured, similarly ambiguous taxa names. Options : \"singly\" -  Replaces OTU name. \"grouped\" -  Replaces higher rank's name. \"drop\" -  Excludes result. \"asis\" -  check/modify taxa names. Default: \"singly\"  Abbreviations allowed. lineage Include ranks name taxa. instance, setting TRUE produce Bacteria; Actinobacteria; Coriobacteriia; Coriobacteriales. Otherwise taxa name simply Coriobacteriales. want set TRUE unc = \"asis\" taxa names (Incertae_Sedis) map multiple higher level ranks. Default: FALSE label Label matrix rows columns. can supply list logical vector length two control row labels column labels separately, example label = c(rows = TRUE, cols = FALSE), simply label = c(T, F). valid options \"rows\", \"cols\", \"\", \"bottom\", \"right\", \"none\". Default: TRUE. label_size font size use row column labels. can supply numeric vector length two control row label sizes column label sizes separately, example c(rows = 20, cols = 8), simply c(20, 8). Default: NULL, computes: pmax(8, pmin(20, 100 / dim(mtx))). rescale Rescale rows columns common min/max. Options: \"none\", \"rows\", \"cols\". Default: \"none\". trees Draw dendrogram rows (left) columns (top). can supply list logical vector length two control row tree column tree separately, example trees = c(rows = T, cols = F), simply trees = c(T, F). valid options \"rows\", \"cols\", \"\", \"left\", \"top\", \"none\". Default: TRUE. clust Clustering algorithm reordering rows columns similarity. can supply list character vector length two control row column clustering separately, example clust = c(rows = \"complete\", cols = NA), simply clust = c(\"complete\", NA). Options : FALSE NA -  Disable reordering. hclust class object E.g. stats::hclust(). method name -  \"ward.D\", \"ward.D2\", \"single\", \"complete\", \"average\", \"mcquitty\", \"median\", \"centroid\". Default: \"complete\". dist Distance algorithm use reordering rows columns similarity. can supply list character vector length two control row column clustering separately, example dist = c(rows = \"euclidean\", cols = \"maximum\"), simply dist = c(\"euclidean\", \"maximum\"). Options : dist class object E.g. stats::dist() bdiv_distmat(). method name -  \"euclidean\", \"maximum\", \"manhattan\", \"canberra\", \"binary\", \"minkowski\". Default: \"euclidean\". tree_height, track_height height dendrogram annotation tracks multiples (fractions) smaller dimension grid cell size. Use numeric vector length two assign c(left, top) independently. Default: NULL, computes: tree_height = sqrt(min(dim(mtx))), track_height = tree_height / 4. ratio Height/width ratio entire grid. Default: 1 (square). legend place legend. Options : \"right\" \"bottom\". Default: \"right\". xlab.angle Angle labels bottom plot. Options \"auto\", '0', '30', '90'. Default: \"auto\". ... Additional arguments pass ggplot2::theme().","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display taxa abundances as a heatmap. — taxa_heatmap","text":"ggplot2 plot.  computed data points, ggplot command, object history available $data, $code, $history, respectively.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/taxa_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display taxa abundances as a heatmap. — taxa_heatmap","text":"","code":"library(rbiom)          biom <- hmp50 %>% sample_rarefy() %>% sample_select(1:10)     taxa_heatmap(biom, rank=\"Phylum\", color.by=\"Body Site\") #> Error in eval(substitute(expr), e): object 'biom' not found"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxa abundances per sample, at the specified taxonomic rank. — taxa_matrix","title":"Taxa abundances per sample, at the specified taxonomic rank. — taxa_matrix","text":"Taxa abundances per sample, specified taxonomic rank.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taxa abundances per sample, at the specified taxonomic rank. — taxa_matrix","text":"","code":"taxa_matrix(   biom,   rank = -1,   taxa = NULL,   lineage = FALSE,   sparse = FALSE,   unc = \"singly\",   other = FALSE )"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Taxa abundances per sample, at the specified taxonomic rank. — taxa_matrix","text":"biom rbiom-class object, data coercible as_rbiom(). rank rank(s) taxa display. E.g. \"Phylum\", \"Genus\", \".otu\", etc. integer vector can also given, 1 highest rank, 2 second highest, -1 lowest rank, -2 second lowest, 0 OTU \"rank\". Run taxa_ranks() see options given rbiom object. Default: -1. taxa taxa display. integer value show top n abundant taxa. value 0 <= n < 1 show taxa mean abundance greater (e.g. 0.1 implies >= 10%). character vector taxa names show named taxa. Default: 6. lineage Include ranks name taxa. instance, setting TRUE produce Bacteria; Actinobacteria; Coriobacteriia; Coriobacteriales. Otherwise taxa name simply Coriobacteriales. want set TRUE unc = \"asis\" taxa names (Incertae_Sedis) map multiple higher level ranks. Default: FALSE sparse true, returns sparse matrix described slam::simple_triplet_matrix(), otherwise returns normal R matrix object. Default: FALSE unc handle unclassified, uncultured, similarly ambiguous taxa names. Options : \"singly\" -  Replaces OTU name. \"grouped\" -  Replaces higher rank's name. \"drop\" -  Excludes result. \"asis\" -  check/modify taxa names. Default: \"singly\"  Abbreviations allowed. Sum non-itemized taxa \"\" taxa. FALSE, returns taxa matched taxa argument. Specifying TRUE adds \"\" returned set. string can also given imply TRUE, value name use instead \"\". Default: FALSE","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Taxa abundances per sample, at the specified taxonomic rank. — taxa_matrix","text":"numeric matrix taxa rows, samples columns.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/taxa_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Taxa abundances per sample, at the specified taxonomic rank. — taxa_matrix","text":"","code":"library(rbiom)          taxa_ranks(hmp50) #> [1] \".otu\"    \"Kingdom\" \"Phylum\"  \"Class\"   \"Order\"   \"Family\"  \"Genus\"            phyla <- taxa_matrix(hmp50, 'Phylum')     phyla[1:4,1:6] #>                     HMP01 HMP02 HMP03 HMP04 HMP05 HMP06 #> Actinobacteria         18    60   126   120    30    71 #> Bacteroidetes         276   221   313   218   144   880 #> Cyanobacteria           0     0     0     0     0     0 #> Deinococcus Thermus     0     0     0     0     0     0"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_ranks.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set the names of the taxonomic ranks. — taxa_ranks","title":"Get or set the names of the taxonomic ranks. — taxa_ranks","text":"Get set names taxonomic ranks.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_ranks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set the names of the taxonomic ranks. — taxa_ranks","text":"","code":"taxa_ranks(biom)  taxa_ranks(biom) <- value"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_ranks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set the names of the taxonomic ranks. — taxa_ranks","text":"biom rbiom-class object, data coercible as_rbiom(). value character vector new taxa rank names.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_ranks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set the names of the taxonomic ranks. — taxa_ranks","text":"character vector taxa rank names biom.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/taxa_ranks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set the names of the taxonomic ranks. — taxa_ranks","text":"","code":"library(rbiom)           biom <- hmp50          taxa_ranks(biom) #> [1] \".otu\"    \"Kingdom\" \"Phylum\"  \"Class\"   \"Order\"   \"Family\"  \"Genus\"            taxa_ranks(biom) <- c('.otu', paste0(\"Level\", seq_len(n_ranks(biom) - 1)))     taxa_ranks(biom) #> [1] \".otu\"   \"Level1\" \"Level2\" \"Level3\" \"Level4\" \"Level5\" \"Level6\""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Test taxa abundances for significant differences. — taxa_stats","title":"Test taxa abundances for significant differences. — taxa_stats","text":"Test taxa abundances significant differences.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test taxa abundances for significant differences. — taxa_stats","text":"","code":"taxa_stats(   biom,   stat.by = NULL,   regr = NULL,   rank = -1,   taxa = 6,   test = ifelse(is.null(regr), \"means\", \"trends\"),   model = \"lm\",   level = 0.95,   lineage = FALSE,   unc = \"singly\",   other = FALSE,   split.by = NULL,   p.adj = \"fdr\" )"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test taxa abundances for significant differences. — taxa_stats","text":"biom rbiom-class object, data coercible as_rbiom(). stat.categorical metadata field defining statistical groups. Required. regr run regression analysis, set regr numeric metadata field \"x-axis\" values. Leaving regr=NULL generate boxplot-like statistics; non-NULL, corrplot-like statistics returned. Default: NULL rank rank(s) taxa display. E.g. \"Phylum\", \"Genus\", \".otu\", etc. integer vector can also given, 1 highest rank, 2 second highest, -1 lowest rank, -2 second lowest, 0 OTU \"rank\". Run taxa_ranks() see options given rbiom object. Default: -1. taxa taxa display. integer value show top n abundant taxa. value 0 <= n < 1 show taxa mean abundance greater (e.g. 0.1 implies >= 10%). character vector taxa names show named taxa. Default: 6. test statistic interest. overview options can found \"Statistical Tests\" section . One \"predict\", \"terms\", \"fit\", \"means\", \"trends\", \"es_means\", \"es_trends\", \"pw_means\", \"pw_trends\". Default: ifelse(.null(regr), \"means\", \"trends\") model type trend model fit data. Options : \"lm\" (linear), \"log\" (logarithmic), \"gam\" (generalized additive). See \"Model Options\" section additional details. Default: \"lm\" level confidence level calculating confidence interval. Default: 0.95 lineage Include ranks name taxa. instance, setting TRUE produce Bacteria; Actinobacteria; Coriobacteriia; Coriobacteriales. Otherwise taxa name simply Coriobacteriales. want set TRUE unc = \"asis\" taxa names (Incertae_Sedis) map multiple higher level ranks. Default: FALSE unc handle unclassified, uncultured, similarly ambiguous taxa names. Options : \"singly\" -  Replaces OTU name. \"grouped\" -  Replaces higher rank's name. \"drop\" -  Excludes result. \"asis\" -  check/modify taxa names. Default: \"singly\"  Abbreviations allowed. Sum non-itemized taxa \"\" taxa. FALSE, returns taxa matched taxa argument. Specifying TRUE adds \"\" returned set. string can also given imply TRUE, value name use instead \"\". Default: FALSE split.Name(s) metadata columns data split prior calculations. Default: NULL p.adj Method use multiple comparisons adjustment p-values. Run p.adjust.methods list available options. Default: \"fdr\".","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test taxa abundances for significant differences. — taxa_stats","text":"tibble data frame summary statistics. R code generating statistics $code, object history $history.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_stats.html","id":"statistical-tests","dir":"Reference","previous_headings":"","what":"Statistical Tests","title":"Test taxa abundances for significant differences. — taxa_stats","text":"regr NULL: \"means\" -  Considers groups using Kruskal-Wallis non-parametric test: stats::kruskal.test(). \"pw_means\" -  Pairwise comparison stat.groups using Wilcox rank sum (aka Mann-Whitney) non-parametric test: stats::wilcox.test(). regr NULL: \"predict\" -  Augments original data fitted information. See broom::augment.lm(). \"terms\" -  Summary information model's terms, including p-value, r-squared, AIC, BIC, confidence interval level. See broom::tidy.lm(). \"fit\" -  Goodness fit measures, p-values, overall model. See broom::glance.lm(). \"means\" -  estimated marginal mean (EMM) stat.group, along confidence intervals (CI), standard errors (SE), t-ratios, p-values testing mean = zero. See emmeans::emmeans() emmeans::summary.emmGrid(). \"trends\" -  trendline slope stat.group, along CI SE p-value testing slope = zero. See emmeans::emtrends() emmeans::summary.emmGrid(). \"pw_means\" -  Pairwise means. stat.groups compared difference means estimated along SE, t-ratios, p-values testing two means . See emmeans::pairs.emmGrid(). \"pw_trends\" -  Pairwise trends. , comparing trendline slopes instead means. \"es_means\" -  Effect sizes pairwise differences means, including SE CI. See emmeans::eff_size(). \"es_trends\" -  Effect sizes pairwise differences slopes, including SE CI. See emmeans::eff_size().","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_stats.html","id":"model-options","dir":"Reference","previous_headings":"","what":"Model Options","title":"Test taxa abundances for significant differences. — taxa_stats","text":"predefined options : \"lm\" -   Linear model: stats::lm(formula = y ~ x).) \"log\" -  Logarithmic model: stats::lm(formula = y ~ log(x)). \"gam\" -  Generalized additive model: mgcv::gam(formula = y ~ s(x, bs = \"cs\"), method = \"REML\"). can alternatively provide list length two first element character vector length 1 naming function, second element list arguments pass function. One function's arguments must named 'formula'. example, model = list(\"stats::lm\", list(formula = y ~ x)).","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/taxa_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test taxa abundances for significant differences. — taxa_stats","text":"","code":"library(rbiom)          biom <- sample_rarefy(hmp50)          taxa_stats(biom, stat.by = \"Body Site\", rank = \"Family\") #> Warning: object '.dots' not found #> # Test:     kruskal.test(.abundance ~ `Body Site`). #> # A tibble: 6 × 6 #>   .taxa                 .n .stat   .df       .p.val       .adj.p #>   <fct>              <int> <dbl> <int>        <dbl>        <dbl> #> 1 Streptococcaceae      49  42.8     4 0.0000000114 0.0000000685 #> 2 Pasteurellaceae       49  40.3     4 0.0000000372 0.000000112  #> 3 Lactobacillaceae      49  37.4     4 0.000000148  0.000000296  #> 4 Veillonellaceae       49  32.0     4 0.00000191   0.00000286   #> 5 Corynebacteriaceae    49  29.6     4 0.00000584   0.00000701   #> 6 Bacteroidaceae        49  26.9     4 0.0000204    0.0000204             taxa_stats(biom, stat.by = \"Body Site\", regr = \"Age\", rank = \"Family\") #> Warning: object '.dots' not found #> # Test:     Estimated marginal means of linear trends. #> # Model:    stats::lm(.abundance ~ Age * `Body Site`) #> # A tibble: 30 × 10 #>    .taxa   `Body Site` .trend   .se   .df .lower .upper .t.ratio  .p.val  .adj.p #>    <fct>   <fct>        <dbl> <dbl> <dbl>  <dbl>  <dbl>    <dbl>   <dbl>   <dbl> #>  1 Pasteu… Buccal muc…  37.6   8.09    39  21.3   54.0     4.65  3.72e-5 0.00112 #>  2 Strept… Buccal muc… -53.3  12.8     39 -79.2  -27.3    -4.16  1.71e-4 0.00256 #>  3 Lactob… Mid vagina  -31.3   8.42    39 -48.4  -14.3    -3.72  6.19e-4 0.00619 #>  4 Veillo… Saliva      -11.5   4.13    39 -19.9   -3.18   -2.79  8.04e-3 0.0603  #>  5 Bacter… Stool        -8.82  6.26    39 -21.5    3.85   -1.41  1.67e-1 1       #>  6 Veillo… Mid vagina    2.87  3.07    39  -3.34   9.08    0.935 3.56e-1 1       #>  7 Pasteu… Saliva       -3.02  5.19    39 -13.5    7.49   -0.581 5.65e-1 1       #>  8 Strept… Saliva       -4.56  8.23    39 -21.2   12.1    -0.555 5.82e-1 1       #>  9 Strept… Anterior n…   1.57  6.15    39 -10.9   14.0     0.255 8.00e-1 1       #> 10 Veillo… Buccal muc…  -1.05  6.43    39 -14.1   12.0    -0.162 8.72e-1 1       #> # ℹ 20 more rows"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_sums.html","id":null,"dir":"Reference","previous_headings":"","what":"Get summary taxa abundances. — taxa_sums","title":"Get summary taxa abundances. — taxa_sums","text":"Get summary taxa abundances.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_sums.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get summary taxa abundances. — taxa_sums","text":"","code":"taxa_sums(biom, rank = 0)  taxa_means(biom, rank = 0)"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_sums.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get summary taxa abundances. — taxa_sums","text":"biom rbiom-class object, data coercible as_rbiom(). rank taxonomic rank return sums means . default, 0, returns per-OTU summaries.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_sums.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get summary taxa abundances. — taxa_sums","text":"named, sorted numeric vector.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_sums.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get summary taxa abundances. — taxa_sums","text":"","code":"library(rbiom)           taxa_sums(hmp50) %>% head(4) #> Unc01yki Unc53100 LtbAci52 CnbTube3  #>    24096    23409    15996    14734           taxa_means(hmp50, 'Family') %>% head(5) #>   Lactobacillaceae   Streptococcaceae Corynebacteriaceae     Bacteroidaceae  #>             803.74             492.16             364.74             323.22  #>  Staphylococcaceae  #>             275.52"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Abundance table of taxa per sample at the specified rank. — taxa_table","title":"Abundance table of taxa per sample at the specified rank. — taxa_table","text":"Abundance table taxa per sample specified rank.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Abundance table of taxa per sample at the specified rank. — taxa_table","text":"","code":"taxa_table(   biom,   rank = -1,   taxa = NULL,   lineage = FALSE,   md = TRUE,   unc = \"singly\",   other = FALSE )"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abundance table of taxa per sample at the specified rank. — taxa_table","text":"biom rbiom-class object, data coercible as_rbiom(). rank rank(s) taxa display. E.g. \"Phylum\", \"Genus\", \".otu\", etc. integer vector can also given, 1 highest rank, 2 second highest, -1 lowest rank, -2 second lowest, 0 OTU \"rank\". Run taxa_ranks() see options given rbiom object. Default: -1. taxa taxa display. integer value show top n abundant taxa. value 0 <= n < 1 show taxa mean abundance greater (e.g. 0.1 implies >= 10%). character vector taxa names show named taxa. Default: 6. lineage Include ranks name taxa. instance, setting TRUE produce Bacteria; Actinobacteria; Coriobacteriia; Coriobacteriales. Otherwise taxa name simply Coriobacteriales. want set TRUE unc = \"asis\" taxa names (Incertae_Sedis) map multiple higher level ranks. Default: FALSE md Include metadata output data frame? Options : NULL -  include metadata. TRUE -  Include metadata. character vector -  Include specified metadata columns. Default: TRUE unc handle unclassified, uncultured, similarly ambiguous taxa names. Options : \"singly\" -  Replaces OTU name. \"grouped\" -  Replaces higher rank's name. \"drop\" -  Excludes result. \"asis\" -  check/modify taxa names. Default: \"singly\"  Abbreviations allowed. Sum non-itemized taxa \"\" taxa. FALSE, returns taxa matched taxa argument. Specifying TRUE adds \"\" returned set. string can also given imply TRUE, value name use instead \"\". Default: FALSE","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Abundance table of taxa per sample at the specified rank. — taxa_table","text":"tibble data frame column names .sample, .taxa, .abundance, requested md.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/taxa_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Abundance table of taxa per sample at the specified rank. — taxa_table","text":"","code":"library(rbiom)          taxa_ranks(hmp50) #> [1] \".otu\"    \"Kingdom\" \"Phylum\"  \"Class\"   \"Order\"   \"Family\"  \"Genus\"            head(taxa_table(hmp50, 'Phylum')) #> # A tibble: 6 × 8 #>   .rank  .sample .taxa               .abundance   Age   BMI `Body Site`   Sex    #>   <fct>  <fct>   <fct>                    <dbl> <dbl> <dbl> <fct>         <fct>  #> 1 Phylum HMP01   Actinobacteria              18    22    20 Buccal mucosa Female #> 2 Phylum HMP01   Bacteroidetes              276    22    20 Buccal mucosa Female #> 3 Phylum HMP01   Cyanobacteria                0    22    20 Buccal mucosa Female #> 4 Phylum HMP01   Deinococcus Thermus          0    22    20 Buccal mucosa Female #> 5 Phylum HMP01   Firmicutes                1208    22    20 Buccal mucosa Female #> 6 Phylum HMP01   Fusobacteria                41    22    20 Buccal mucosa Female"},{"path":"https://cmmr.github.io/rbiom/reference/tree_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Provides a 'treedata' S4 object for use in ggtree functions. — tree_data","title":"Provides a 'treedata' S4 object for use in ggtree functions. — tree_data","text":"Provides 'treedata' S4 object use ggtree functions.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/tree_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provides a 'treedata' S4 object for use in ggtree functions. — tree_data","text":"","code":"tree_data(biom, reads = TRUE, clades = TRUE)"},{"path":"https://cmmr.github.io/rbiom/reference/tree_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provides a 'treedata' S4 object for use in ggtree functions. — tree_data","text":"biom rbiom object, returned read_biom(). reads Include 'reads' column indicating sum taxa observations belonging node/leaf. Default: TRUE. clades Notate top-monophyletic nodes. default, TRUE, adds column every rank biom object. character vector ranks can also passed . vector named, names used naming columns returned treedata object. Set NULL return clade notations.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/tree_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provides a 'treedata' S4 object for use in ggtree functions. — tree_data","text":"","code":"library(rbiom)          # Needs the optional ggtree package     if (nzchar(system.file(package = \"ggtree\"))) {            tree_data(hmp50)            } #> 'treedata' S4 object'. #>  #> ...@ phylo: #>  #> Phylogenetic tree with 490 tips and 489 internal nodes. #>  #> Tip labels: #>   EschC738, Unc92490, Unc02pjp, Unc26984, Unc41900, AntBa370, ... #>  #> Rooted; includes branch lengths. #>  #> with the following features available: #>   '', 'reads', '.otu', 'Kingdom', 'Phylum', 'Class', 'Order', 'Family', #> 'Genus', 'OTU'. #>  #> # The associated data tibble abstraction: 979 × 12 #> # The 'node', 'label' and 'isTip' are from the phylo tree. #>     node label   isTip reads .otu  Kingdom Phylum Class Order Family Genus OTU   #>    <dbl> <chr>   <lgl> <dbl> <chr> <chr>   <chr>  <chr> <chr> <chr>  <chr> <chr> #>  1     1 EschC7… TRUE    100 Esch… NA      NA     NA    Ente… Enter… Esch… Esch… #>  2     2 Unc924… TRUE    746 Unc9… NA      NA     NA    NA    NA     Haem… Unc9… #>  3     3 Unc02p… TRUE    242 Unc0… NA      NA     NA    NA    NA     Acti… Unc0… #>  4     4 Unc269… TRUE   5040 Unc2… NA      NA     NA    NA    NA     Haem… Unc2… #>  5     5 Unc419… TRUE      1 Unc4… NA      NA     NA    Ente… Enter… Prov… Unc4… #>  6     6 AntBa3… TRUE     43 AntB… NA      NA     NA    NA    NA     NA    AntB… #>  7     7 AntSp6… TRUE      1 AntS… NA      NA     NA    NA    NA     NA    AntS… #>  8     8 MxlSpe… TRUE      8 MxlS… NA      NA     NA    NA    NA     NA    MxlS… #>  9     9 FuoMan… TRUE      1 FuoM… NA      NA     NA    NA    NA     NA    FuoM… #> 10    10 PeuS18… TRUE     18 PeuS… NA      NA     NA    Pseu… Pseud… Pseu… PeuS… #> # ℹ 969 more rows"},{"path":"https://cmmr.github.io/rbiom/reference/tree_subset.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a subtree by specifying tips to keep. — tree_subset","title":"Create a subtree by specifying tips to keep. — tree_subset","text":"Create subtree specifying tips keep.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/tree_subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a subtree by specifying tips to keep. — tree_subset","text":"","code":"tree_subset(tree, tips)"},{"path":"https://cmmr.github.io/rbiom/reference/tree_subset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a subtree by specifying tips to keep. — tree_subset","text":"tree phylo object, returned read_tree(). tips character, numeric, logical vector tips keep.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/tree_subset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a subtree by specifying tips to keep. — tree_subset","text":"phylo object subtree.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/tree_subset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a subtree by specifying tips to keep. — tree_subset","text":"","code":"library(rbiom)          infile <- system.file(\"extdata\", \"newick.tre\", package = \"rbiom\")     tree <- read_tree(infile)     tree #>  #> Phylogenetic tree with 20 tips and 19 internal nodes. #>  #> Tip labels: #>   Pa5Bac29, AtlPorci, AciSp313, MxlBact8, MxlBacte, PseS1107, ... #>  #> Rooted; includes branch lengths.          subtree <- tree_subset(tree, tips = head(tree_tips(tree)))     subtree #>  #> Phylogenetic tree with 6 tips and 5 internal nodes. #>  #> Tip labels: #>   Pa5Bac29, AtlPorci, AciSp313, MxlBact8, MxlBacte, PseS1107 #>  #> Rooted; includes branch lengths."},{"path":"https://cmmr.github.io/rbiom/reference/tree_tips.html","id":null,"dir":"Reference","previous_headings":"","what":"Names of a phylogenetic tree's tips/leafs. — tree_tips","title":"Names of a phylogenetic tree's tips/leafs. — tree_tips","text":"Names phylogenetic tree's tips/leafs.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/tree_tips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Names of a phylogenetic tree's tips/leafs. — tree_tips","text":"","code":"tree_tips(x)"},{"path":"https://cmmr.github.io/rbiom/reference/tree_tips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Names of a phylogenetic tree's tips/leafs. — tree_tips","text":"x phylo object, returned read_tree().","code":""},{"path":"https://cmmr.github.io/rbiom/reference/tree_tips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Names of a phylogenetic tree's tips/leafs. — tree_tips","text":"character vector leaf names.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/tree_tips.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Names of a phylogenetic tree's tips/leafs. — tree_tips","text":"","code":"library(rbiom)          infile <- system.file(\"extdata\", \"newick.tre\", package = \"rbiom\")     tree  <- read_tree(infile)     leafs <- tree_tips(tree)     head(leafs) #> [1] \"Pa5Bac29\" \"AtlPorci\" \"AciSp313\" \"MxlBact8\" \"MxlBacte\" \"PseS1107\""},{"path":"https://cmmr.github.io/rbiom/reference/within.rbiom.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify sample metadata. — within.rbiom","title":"Modify sample metadata. — within.rbiom","text":"Modify sample metadata.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/within.rbiom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify sample metadata. — within.rbiom","text":"","code":"# S3 method for rbiom within(biom, expr)"},{"path":"https://cmmr.github.io/rbiom/reference/within.rbiom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify sample metadata. — within.rbiom","text":"biom rbiom-class object, data coercible as_rbiom(). expr single compound expression evaluate.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/within.rbiom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify sample metadata. — within.rbiom","text":"rbiom object updated metadata.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/within.rbiom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify sample metadata. — within.rbiom","text":"","code":"library(rbiom)          biom <- hmp50     sample_metadata(biom) #> # A tibble: 50 × 5 #>    .sample   Age   BMI `Body Site`    Sex    #>    <fct>   <dbl> <dbl> <fct>          <fct>  #>  1 HMP01      22    20 Buccal mucosa  Female #>  2 HMP02      24    23 Buccal mucosa  Male   #>  3 HMP03      28    26 Saliva         Male   #>  4 HMP04      25    23 Saliva         Male   #>  5 HMP05      27    24 Buccal mucosa  Female #>  6 HMP06      32    25 Saliva         Male   #>  7 HMP07      26    22 Buccal mucosa  Male   #>  8 HMP08      27    26 Saliva         Female #>  9 HMP09      33    32 Saliva         Male   #> 10 HMP10      22    20 Anterior nares Female #> # ℹ 40 more rows          biom %<>% within(Sex2 <- as.numeric(Sex))     sample_metadata(biom) #> # A tibble: 50 × 6 #>    .sample   Age   BMI `Body Site`    Sex     Sex2 #>    <fct>   <dbl> <dbl> <fct>          <fct>  <dbl> #>  1 HMP01      22    20 Buccal mucosa  Female     1 #>  2 HMP02      24    23 Buccal mucosa  Male       2 #>  3 HMP03      28    26 Saliva         Male       2 #>  4 HMP04      25    23 Saliva         Male       2 #>  5 HMP05      27    24 Buccal mucosa  Female     1 #>  6 HMP06      32    25 Saliva         Male       2 #>  7 HMP07      26    22 Buccal mucosa  Male       2 #>  8 HMP08      27    26 Saliva         Female     1 #>  9 HMP09      33    32 Saliva         Male       2 #> 10 HMP10      22    20 Anterior nares Female     1 #> # ℹ 40 more rows          biom %<>% within({       `Body Site` <- substr(`Body Site`, 1, 4)       remove(\"BMI\", \"Age\", \"Sex2\")     })     sample_metadata(biom) #> # A tibble: 50 × 3 #>    .sample `Body Site` Sex    #>    <fct>   <fct>       <fct>  #>  1 HMP01   Bucc        Female #>  2 HMP02   Bucc        Male   #>  3 HMP03   Sali        Male   #>  4 HMP04   Sali        Male   #>  5 HMP05   Bucc        Female #>  6 HMP06   Sali        Male   #>  7 HMP07   Bucc        Male   #>  8 HMP08   Sali        Female #>  9 HMP09   Sali        Male   #> 10 HMP10   Ante        Female #> # ℹ 40 more rows"},{"path":"https://cmmr.github.io/rbiom/reference/write_biom.html","id":null,"dir":"Reference","previous_headings":"","what":"Write counts, metadata, taxonomy, and phylogeny to a biom file. — write_biom","title":"Write counts, metadata, taxonomy, and phylogeny to a biom file. — write_biom","text":"Write counts, metadata, taxonomy, phylogeny biom file.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_biom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write counts, metadata, taxonomy, and phylogeny to a biom file. — write_biom","text":"","code":"write_biom(biom, file, format = \"json\")"},{"path":"https://cmmr.github.io/rbiom/reference/write_biom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write counts, metadata, taxonomy, and phylogeny to a biom file. — write_biom","text":"biom rbiom object save file. file Path output file. file name ends \".gz\" \".bz2\", file contents compressed accordingly. format Options \"tab\", \"json\", \"hdf5\", corresponding classic tabular format, BIOM format version 1.0 biom version 2.1, respectively. See http://biom-format.org/documentation/ details. NOTE: write HDF5 formatted BIOM files, BioConductor R package rhdf5 must installed.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_biom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write counts, metadata, taxonomy, and phylogeny to a biom file. — write_biom","text":"normalized filepath written (invisibly).","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Write BIOM counts to a tab-separated value (tsv) file. — write_counts","title":"Write BIOM counts to a tab-separated value (tsv) file. — write_counts","text":"Write BIOM counts tab-separated value (tsv) file.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write BIOM counts to a tab-separated value (tsv) file. — write_counts","text":"","code":"write_counts(biom, file)"},{"path":"https://cmmr.github.io/rbiom/reference/write_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write BIOM counts to a tab-separated value (tsv) file. — write_counts","text":"biom rbiom object file Path output file. File names ending .gz .bz2 compressed accordingly.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write BIOM counts to a tab-separated value (tsv) file. — write_counts","text":"normalized filepath written (invisibly).","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_fasta.html","id":null,"dir":"Reference","previous_headings":"","what":"Write DNA sequences to a file in fasta format. — write_fasta","title":"Write DNA sequences to a file in fasta format. — write_fasta","text":"Write DNA sequences file fasta format.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_fasta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write DNA sequences to a file in fasta format. — write_fasta","text":"","code":"write_fasta(seqs, file = NULL)"},{"path":"https://cmmr.github.io/rbiom/reference/write_fasta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write DNA sequences to a file in fasta format. — write_fasta","text":"seqs named character vector names sequence names values sequences. Also accepts rbiom object contains sequences. file Path output fasta file. Filenames ending .gz .bz2 compressed accordingly.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_fasta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write DNA sequences to a file in fasta format. — write_fasta","text":"normalized filepath written (invisibly).","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Write BIOM metadata to a tab-separated value (tsv) file. — write_metadata","title":"Write BIOM metadata to a tab-separated value (tsv) file. — write_metadata","text":"Write BIOM metadata tab-separated value (tsv) file.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write BIOM metadata to a tab-separated value (tsv) file. — write_metadata","text":"","code":"write_metadata(biom, file)"},{"path":"https://cmmr.github.io/rbiom/reference/write_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write BIOM metadata to a tab-separated value (tsv) file. — write_metadata","text":"biom rbiom object file Path output file. Filenames ending .gz .bz2 compressed accordingly.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write BIOM metadata to a tab-separated value (tsv) file. — write_metadata","text":"normalized filepath written (invisibly).","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_taxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Write BIOM taxonomy map to a tab-separated value (tsv) file. — write_taxonomy","title":"Write BIOM taxonomy map to a tab-separated value (tsv) file. — write_taxonomy","text":"Write BIOM taxonomy map tab-separated value (tsv) file.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_taxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write BIOM taxonomy map to a tab-separated value (tsv) file. — write_taxonomy","text":"","code":"write_taxonomy(biom, file)"},{"path":"https://cmmr.github.io/rbiom/reference/write_taxonomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write BIOM taxonomy map to a tab-separated value (tsv) file. — write_taxonomy","text":"biom rbiom object file Path output file. Filenames ending .gz .bz2 compressed accordingly.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_taxonomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write BIOM taxonomy map to a tab-separated value (tsv) file. — write_taxonomy","text":"normalized filepath written (invisibly).","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a newick formatted phylogenetic tree. — write_tree","title":"Write a newick formatted phylogenetic tree. — write_tree","text":"Write newick formatted phylogenetic tree.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a newick formatted phylogenetic tree. — write_tree","text":"","code":"write_tree(tree, file = NULL)"},{"path":"https://cmmr.github.io/rbiom/reference/write_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a newick formatted phylogenetic tree. — write_tree","text":"tree phylo object, returned read_tree(). Also accepts rbiom object phylogentic tree. file Filename connection write newick file (optional).","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a newick formatted phylogenetic tree. — write_tree","text":"file NULL, newick string character vector. Otherwise, normalized filepath written (invisibly).","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a newick formatted phylogenetic tree. — write_tree","text":"","code":"library(rbiom)           infile <- system.file(\"extdata\", \"newick.tre\", package = \"rbiom\")     tree   <- read_tree(infile)     newick <- write_tree(tree)"},{"path":"https://cmmr.github.io/rbiom/reference/write_xlsx.html","id":null,"dir":"Reference","previous_headings":"","what":"Write data and summary information to a Microsoft Excel-compatible workbook. — write_xlsx","title":"Write data and summary information to a Microsoft Excel-compatible workbook. — write_xlsx","text":"Write data summary information Microsoft Excel-compatible workbook.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_xlsx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write data and summary information to a Microsoft Excel-compatible workbook. — write_xlsx","text":"","code":"write_xlsx(biom, file = NULL, depth = NULL, seed = 0, unc = \"asis\")"},{"path":"https://cmmr.github.io/rbiom/reference/write_xlsx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write data and summary information to a Microsoft Excel-compatible workbook. — write_xlsx","text":"biom rbiom object save file. file Path output xlsx file. depth Depth rarefy . See sample_rarefy() function details. depth = NULL auto-selects rarefaction level. depth = 0 disables rarefaction. use depth 'OTU table' data integer count values. seed Random seed use rarefying. See sample_rarefy() function details. unc handle unclassified, uncultured, similarly ambiguous taxa names. Options : \"singly\" -  Replaces OTU name. \"grouped\" -  Replaces higher rank's name. \"drop\" -  Excludes result. \"asis\" -  check/modify taxa names. Default: \"singly\"  Abbreviations allowed.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_xlsx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write data and summary information to a Microsoft Excel-compatible workbook. — write_xlsx","text":"normalized filepath written (invisibly).","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_xlsx.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Write data and summary information to a Microsoft Excel-compatible workbook. — write_xlsx","text":"data frame, matrix, dist attributes biom included separate worksheets. attribute named 'Reads Per Step' treated specially merged usual 'Reads Per Sample' tab.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_xlsx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write data and summary information to a Microsoft Excel-compatible workbook. — write_xlsx","text":"","code":"library(rbiom)           if (FALSE) {              biom <- sample_select(hmp50, 1:10) %>% sample_rarefy()              attr(biom, \"Weighted UniFrac\")   <- bdiv_distmat(biom, 'unifrac')       attr(biom, \"Unweighted Jaccard\") <- bdiv_distmat(biom, 'jaccard', weighted=FALSE)              outfile <- write_xlsx(biom, tempfile(fileext = \".xlsx\"))     }"},{"path":"https://cmmr.github.io/rbiom/news/index.html","id":"rbiom-200","dir":"Changelog","previous_headings":"","what":"rbiom 2.0.0","title":"rbiom 2.0.0","text":"Major release significant new features. Plotting added. Statistics added. Caching added. Clearer naming scheme functions. Previous names still work deprecated. Generation human-readable ggplot2 code modifying plots outside rbiom. Provenience tracking BIOM objects derivatives.","code":""},{"path":"https://cmmr.github.io/rbiom/news/index.html","id":"rbiom-103","dir":"Changelog","previous_headings":"","what":"rbiom 1.0.3","title":"rbiom 1.0.3","text":"CRAN release: 2021-11-05 Corrects breaking changes ‘rhdf5’ package.","code":""},{"path":"https://cmmr.github.io/rbiom/news/index.html","id":"rbiom-102","dir":"Changelog","previous_headings":"","what":"rbiom 1.0.2","title":"rbiom 1.0.2","text":"CRAN release: 2020-05-29 Improved compatibility Debian Solaris. ‘rhdf5’ package now optional dependency. select() subset() functions now subset sequences .","code":""},{"path":"https://cmmr.github.io/rbiom/news/index.html","id":"rbiom-100","dir":"Changelog","previous_headings":"","what":"rbiom 1.0.0","title":"rbiom 1.0.0","text":"CRAN release: 2020-05-26 Initial Release","code":""}]
