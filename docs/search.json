[{"path":"https://cmmr.github.io/rbiom/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel P. Smith. Author, maintainer, copyright holder.","code":""},{"path":"https://cmmr.github.io/rbiom/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Smith D (2023). rbiom: Read/Write, Analyze, Visualize 'BIOM' Data. R package version 2.0.0.9001, https://cmmr.github.io/rbiom/index.html.","code":"@Manual{,   title = {rbiom: Read/Write, Analyze, and Visualize 'BIOM' Data},   author = {Daniel P. Smith},   year = {2023},   note = {R package version 2.0.0.9001},   url = {https://cmmr.github.io/rbiom/index.html}, }"},{"path":"https://cmmr.github.io/rbiom/index.html","id":"rbiom","dir":"","previous_headings":"","what":"Read/Write, Analyze, and Visualize BIOM Data","title":"Read/Write, Analyze, and Visualize BIOM Data","text":"package toolkit working Biological Observation Matrix (BIOM) files. Features include reading/writing BIOM formats, rarefaction, alpha diversity, beta diversity (including UniFrac), summarizing counts taxonomic level, sample subsetting. Standalone functions reading, writing, subsetting phylogenetic trees also provided. CPU intensive operations encoded C multi-thread support. Reference material available online https://cmmr.github.io/rbiom/index.html Source code can found https://github.com/cmmr/rbiom","code":""},{"path":"https://cmmr.github.io/rbiom/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Read/Write, Analyze, and Visualize BIOM Data","text":"latest stable version can downloaded CRAN. development version available GitHub.","code":"install.packages(\"rbiom\") install.packages(\"remotes\") remotes::install_github(\"cmmr/rbiom\")"},{"path":"https://cmmr.github.io/rbiom/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Read/Write, Analyze, and Visualize BIOM Data","text":"","code":"library(rbiom)  infile <- system.file(\"extdata\", \"hmp50.bz2\", package = \"rbiom\") biom <- read_biom(infile)  # Rarefy to 1000 reads per sample biom <- sample_rarefy(biom, depth=1000)  # Summarize counts by phylum phyla <- taxa_rollup(biom, 'Phylum') phyla[1:4,1:6]  # Work with metadata table(biom$metadata$Sex, biom$metadata$Body.Site) sprintf(\"Mean age: %.1f\", mean(biom$metadata$Age))  # Draw the phylogenetic tree plot(biom$phylogeny)  # Get unifrac distance matrix dm <- bdiv_distmat(biom, 'unifrac')"},{"path":"https://cmmr.github.io/rbiom/index.html","id":"parallel-processing","dir":"","previous_headings":"","what":"Parallel Processing","title":"Read/Write, Analyze, and Visualize BIOM Data","text":"Computation beta diversity metrics (UniFrac, Bray-Curtis, etc) use available CPU cores default. limit number cores used, can set numThreads option:","code":"RcppParallel::setThreadOptions(numThreads = 4)"},{"path":"https://cmmr.github.io/rbiom/index.html","id":"caching","dir":"","previous_headings":"","what":"Caching","title":"Read/Write, Analyze, and Visualize BIOM Data","text":"Caching enabled default. rbiom store maximum 200MB temporary directory given file.path(tempdir(), \"rbiom\", \"cache\"). following commands can used change cache directory, storage limit (given bytes), key hashing function: Setting cache directory \"FALSE\" disable caching. R options override environment variables.","code":"options(rbiom.cache_dir=\"/tmp/rbiom_cache\") options(rbiom.cache_size=5 * 1024 ^ 2) # 5MB options(rbiom.cache_hash=rlang::hash)  Sys.setenv(RBIOM_CACHE_DIR=\"/tmp/rbiom_cache\") Sys.setenv(RBIOM_CACHE_SIZE=1024 ^ 2) # 1GB"},{"path":"https://cmmr.github.io/rbiom/index.html","id":"building-from-source","dir":"","previous_headings":"","what":"Building from source","title":"Read/Write, Analyze, and Visualize BIOM Data","text":"rbiom requires following system libraries can installed operating system’s package manager. deb (Debian, Ubuntu): libudunits2-dev libssl-dev libxml2-dev libcurl4-openssl-dev libgdal-dev rpm (Fedora, CentOS, RHEL): udunits2-devel openssl-devel libxml2-devel libcurl-devel gdal-devel csw (Solaris): libssl_dev openssl@1.1 libxml2_dev gdal_dev brew (OSX): udunits","code":""},{"path":"https://cmmr.github.io/rbiom/paper.html","id":null,"dir":"","previous_headings":"","what":"Summary","title":"Summary","text":"Microbes live around us, us, even inside bodies. influence health disease profound, beginning fully understood. Studying microbial populations becoming easier modern DNA sequencing technology; examining trends across thousands samples today common. bottleneck longer collecting data, rather analyzing interpreting results. rbiom R package working abundance datasets, OTU ASV counts 16S amplicon sequencing. enables importing/exporting BIOM formats, subsetting, rarefying, manipulation metadata/taxonomy/phylogeny, computation alpha beta diversity metrics, summarizing counts per taxonomic rank. Computationally intensive tasks (including UniFrac [@unifrac]) implemented multithreaded C++ greatly reduce calculation time. Visualization key component rbiom. Rarefaction curves, taxa abundances, alpha diversity, beta diversity can plotted variety graphical formats, including correlation, heatmap, ordination, stacked bar, box plots. rbiom, box plots can combination box, bar, violin, dot, strip, /range layers. plot includes provenance modification history attributes, well ggplot2 [@ggplot2] call used render encourage downstream user customization. Correlations sample metadata microbiome structure can identified mapping one metadata variables interest plot’s axes, facets, /aesthetics. mappings can optionally define color/shape/pattern assignments, category ordering, subsetting parameters. metadata associated axis aesthetic, rbiom automatically run appropriate statistical test, correct multiple comparisons, display significant differences plot, captioning brief methodology. Currently, rbiom can perform four types significance testing. correlation plots numeric metadata variable x-axis (e.g., Age, BMI), linear regression computed R’s lm linear model function. plots two categories (e.g. Male vs Female), Mann-Whitney test [@Mann1947] run R’s wilcox.test. three categories compared, Kruskal-Wallis rank sum test [@Kruskal1952] used instead via R’s kruskal.test function. P-values ordinations derived using adonis2 function vegan R package [@vegan], randomly re-categorizes samples 1,000 times estimate significance observed clustering. P-values corrected multiple comparisons using method described @Benjamini1995 via R’s p.adjust function control false discovery rate. QIIME2 [@qiime2], mothur [@mothur], Phyloseq [@phyloseq] offer overlapping functionality rbiom, important distinctions. first two designed command-line interaction, making difficult integrate R projects. Phyloseq staple R bioinformatics decade, frustratingly slow studies thousands samples. package designed users experience levels. Novice R users appreciate couple commands produce publication-ready figures. Advanced R users can use rbiom complement existing pipelines faster flexible functions. rbiom cross-platform compatible available CRAN conda-forge. latest development version GitHub.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/adiv_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize alpha diversity with boxplots. — adiv_boxplot","title":"Visualize alpha diversity with boxplots. — adiv_boxplot","text":"Visualize alpha diversity boxplots.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/adiv_boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize alpha diversity with boxplots. — adiv_boxplot","text":"","code":"adiv_boxplot(   biom,   x = NULL,   adiv = \"Shannon\",   layers = \"lsb\",   color.by = NULL,   pattern.by = NULL,   shape.by = NULL,   facet.by = NULL,   limit.by = NULL,   flip = FALSE,   stripe = flip,   p.adj = \"fdr\",   p.label = 0.05,   ci = 95,   outliers = NULL,   xlab.angle = \"auto\",   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/adiv_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize alpha diversity with boxplots. — adiv_boxplot","text":"biom BIOM object, returned read_biom(). x categorical metadata column name use x-axis. default, NULL, groups samples single category. adiv One alpha diversity measures use. Options : \"OTUs\", \"Shannon\", \"Chao1\", \"Simpson\", /\"InvSimpson\". Non-ambiguous abbreviations also accepted. can use adiv=\"\" shortcut adiv=c(\"OTUs\", \"Shannon\", \"Chao1\", \"Simpson\", \"InvSimpson\") Default: \"Shannon\". layers \"box\" (\"x\"), \"bar\", \"violin\", \"dot\", \"strip\", \"crossbar\", \"errorbar\", \"linerange\", \"pointrange\". Single letter abbreviations also accepted. instance, c(\"box\", \"dot\") equivalent c(\"x\", \"d\") \"xd\". See vignette(\"boxplots\") examples . Default: \"lsb\". color., pattern., shape., facet., limit.Metadata columns use aesthetics partitioning. See details. Default: NULL flip Transpose axes, taxa present rows instead columns. Default: FALSE stripe Shade every x position. Default: flip p.adj Method use multiple comparisons adjustment p-values. Run p.adjust.methods list available options. (Default: fdr) p.label Minimum adjusted p-value display plot bracket. p.label = 0.05 -  Use specific value. p.label = TRUE -  equivalent p.label = 0.05 p.label = FALSE -  show stats plot p.label = Inf -  display p-values p.label = NULL -  calculate stats numeric vector one value provided, used breaks asterisk notation. Default: TRUE ci calculate min/max crossbar, errorbar, linerange, pointrange layers. Provide number 75 100 define confidence interval's confidence level, commonly 95 97.5. options : \"range\", \"sd\" (standard deviation), \"se\" (standard error), \"mad\" (median absolute deviation). center mark crossbar pointrange represents mean, except code\"mad\" case represents median. Set NULL disable. Default: 95 outliers Show boxplot outliers? TRUE always show. FALSE always hide. NULL hide overlaying dot strip chart.  Default: NULL xlab.angle rotate tick labels x-axis. 'auto' (default), automatically selects rotation value. 0, 30, 90 sets angle horizontal, angled, vertical, respectively. ... Parameters matched formal arguments ggplot2 functions. Prefixing parameter names layer name ensures particular parameter passed , , layer. instance, dot.size = 2 d.size = 2 ensures dotplot layer size set 2. special prefix pt. control dot strip layers.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/adiv_boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize alpha diversity with boxplots. — adiv_boxplot","text":"ggplot2 plot. computed data points statistics available $data $stats, respectively.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/adiv_boxplot.html","id":"aesthetics-and-partitions","dir":"Reference","previous_headings":"","what":"Aesthetics and Partitions","title":"Visualize alpha diversity with boxplots. — adiv_boxplot","text":"Metadata can used flexibly subset, partition, apply aesthetics creating plot. Common use cases provided . thorough documentation available https://cmmr.github.io/rbiom. color.- categorical metadata column. (Max 1) pattern.- categorical metadata column. (Max 1) shape.- categorical metadata column. (Max 1) facet.- Categorical metadata column(s) . limit.- metadata column(s). built-color palettes colorblind-friendly. available categorical palette names : \"okabe\", \"carto\", \"r4\", \"polychrome\", \"tol\", \"bright\", \"light\", \"muted\", \"vibrant\", \"tableau\", \"classic\", \"alphabet\", \"tableau20\", \"kelly\", \"fishy\". Patterns sourced magick R package. Pattern names : \"bricks\", \"hexagons\", \"horizontalsaw\", \"hs_fdiagonal\", \"fishscales\", \"verticalsaw\", \"checkerboard\", \"octagons\", \"right45\", \"hs_cross\", \"hs_bdiagonal\", \"hs_diagcross\", \"hs_horizontal\", \"hs_vertical\", \"left45\", \"leftshingle\", \"rightshingle\", \"verticalbricks\", \"verticalleftshingle\", \"verticalrightshingle\". Shapes can given per base R - numbers 0 17 various shapes, decimal value ascii character, e.g. -z = 65:90; -Z = 97:122 use letters instead shapes plot. Character strings may used well.","code":"## Colors ----------------------------   color.by = \"Body Site\"   color.by = list('Body Site' = \"bright\")   color.by = list('Body Site' = c(\"Stool\", \"Saliva\"))   color.by = list('Body Site' = list('values' = c(\"Stool\", \"Saliva\"), 'colors' = \"bright\"))   color.by = list('Body Site' = c('Stool' = \"blue\", 'Saliva' = \"green\"))      ## Patterns --------------------------   pattern.by = \"Body Site\"   pattern.by = list('Body Site' = c(\"Stool\", \"Saliva\"))   pattern.by = list('Body Site' = c('Stool' = \"left45\", 'Saliva' = \"hs_cross\"))      ## Shapes ----------------------------   shape.by = \"Body Site\"   shape.by = list('Body Site' = c(\"Stool\", \"Saliva\"))   shape.by = list('Body Site' = c('Stool' = 7, 'Saliva' = 8))      ## Facets ----------------------------   facet.by = \"Body Site\"   facet.by = c(\"Body Site\", \"Sex\")   facet.by = list('Body Site' = c(\"Stool\", \"Saliva\"), \"Sex\")      ## Limits ----------------------------   limit.by = list('Sex' = \"Male\", 'Age' = c(20,40))   limit.by = list('Body Site' = c(\"Saliva\", \"Anterior nares\"), 'Age' = c(NA,35))"},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/adiv_boxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize alpha diversity with boxplots. — adiv_boxplot","text":"","code":"library(rbiom)          biom <- sample_rarefy(hmp50)          adiv_boxplot(biom, x = \"Body Site\", adiv = \"Shannon\")      adiv_boxplot(biom, x = \"Sex\", adiv = c(\"OTUs\", \"Shannon\"), layers=\"b\", color.by=\"Body Site\", scales=\"free\")      adiv_boxplot(biom, x = \"Body Site\", adiv = \"Simpson\", layers=\"p\", color.by=\"Sex\", xlab.angle=30)"},{"path":"https://cmmr.github.io/rbiom/reference/adiv_corrplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize alpha diversity with scatterplots and trendlines. — adiv_corrplot","title":"Visualize alpha diversity with scatterplots and trendlines. — adiv_corrplot","text":"Visualize alpha diversity scatterplots trendlines.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/adiv_corrplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize alpha diversity with scatterplots and trendlines. — adiv_corrplot","text":"","code":"adiv_corrplot(   biom,   x,   adiv = \"Shannon\",   layers = \"t\",   color.by = NULL,   facet.by = NULL,   limit.by = NULL,   model = \"lm\",   stats = \"emtrends\",   p.adj = \"fdr\",   ci = 95,   caption = FALSE,   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/adiv_corrplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize alpha diversity with scatterplots and trendlines. — adiv_corrplot","text":"biom BIOM object, returned read_biom(). x numeric metadata column name use x-axis. Required. adiv One alpha diversity measures use. Options : \"OTUs\", \"Shannon\", \"Chao1\", \"Simpson\", /\"InvSimpson\". Non-ambiguous abbreviations also accepted. can use adiv=\"\" shortcut adiv=c(\"OTUs\", \"Shannon\", \"Chao1\", \"Simpson\", \"InvSimpson\") Default: \"Shannon\". layers \"trend\", \"scatter\". Single letter abbreviations also accepted. instance, c(\"trend\", \"scatter\") equivalent c(\"t\", \"s\") \"ts\". See vignette(\"corrplots\") examples . Default: \"t\". color., facet., limit.Metadata columns use aesthetics partitioning. See details. Default: NULL model type trendline fit data. Options : \"lm\" -   Linear model: stats::lm(formula = y ~ x).) \"log\" -  Logarithmic model: stats::lm(formula = y ~ log(x)). \"gam\" -  Generalized additive model: mgcv::gam(formula = y ~ s(x, bs = \"cs\"), method = \"REML\"). Default: \"lm\"  can alternatively provide list length two first element character vector length 1 naming function, second element list arguments pass function. One function's arguments must named 'formula'. example, model = list(\"stats::lm\", list(formula = y ~ x)). stats statistic display plot. Options : \"fit\" -  well model fit data? \"terms\" -  strongly 'x' influence 'y'? \"emmeans\" -  average 'y' value non-zero? \"emtrends\" -  trendline non-zero slope? \"emm_pairs\" -  means trendlines different? \"emt_pairs\" -  slopes trendlines different? \"hide\" -  show stats plot, still compute . \"none\" -  compute show statistics. Default: \"emtrends\"  Note: \"emm_pairs\" \"emt_pairs\" can calculated using color.metadata column one level.  Statistical tests run separately facet. P-values adjusted multiple comparisons considering facets together. Unless stats = \"none\", stats attached plot attr(,'stats'). p.adj Method use multiple comparisons adjustment p-values. Run p.adjust.methods list available options. Default: \"fdr\". ci confidence interval display around trendline. Default: 95. caption Display information method used trendline fitting beneath plot. Default: FALSE. ... Additional parameters pass along ggplot2 functions. Prefix parameter name either t. s./pt. ensure gets passed () geom_smooth geom_point, respectively. instance, s.size = 2 ensures scatterplot points size set 2.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/adiv_corrplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize alpha diversity with scatterplots and trendlines. — adiv_corrplot","text":"ggplot2 plot. computed data points statistics attached attr(p, 'data') attr(p, 'stats'), respectively.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/adiv_corrplot.html","id":"aesthetics-and-partitions","dir":"Reference","previous_headings":"","what":"Aesthetics and Partitions","title":"Visualize alpha diversity with scatterplots and trendlines. — adiv_corrplot","text":"Metadata can used flexibly subset, partition, apply aesthetics creating plot. Common use cases provided . thorough documentation available https://cmmr.github.io/rbiom. color.- metadata column. (Max 1) facet.- categorical metadata column(s). limit.- metadata column(s). built-color palettes colorblind-friendly. available categorical palette names : \"okabe\", \"carto\", \"r4\", \"polychrome\", \"tol\", \"bright\", \"light\", \"muted\", \"vibrant\", \"tableau\", \"classic\", \"alphabet\", \"tableau20\", \"kelly\", \"fishy\". available numeric palette names : \"reds\", \"oranges\", \"greens\", \"purples\", \"grays\", \"acton\", \"bamako\", \"batlow\", \"bilbao\", \"buda\", \"davos\", \"devon\", \"grayC\", \"hawaii\", \"imola\", \"lajolla\", \"lapaz\", \"nuuk\", \"oslo\", \"tokyo\", \"turku\", \"bam\", \"berlin\", \"broc\", \"cork\", \"lisbon\", \"roma\", \"tofino\", \"vanimo\", \"vik\"","code":"## Colors ----------------------------   color.by = \"Body Site\"   color.by = list('Body Site' = \"bright\")   color.by = list('Body Site' = c(\"Stool\", \"Saliva\"))   color.by = list('Body Site' = list('values' = c(\"Stool\", \"Saliva\"), 'colors' = \"bright\"))   color.by = list('Body Site' = c('Stool' = \"blue\", 'Saliva' = \"green\"))      ## Facets ----------------------------   facet.by = \"Body Site\"   facet.by = c(\"Body Site\", \"Sex\")   facet.by = list('Body Site' = c(\"Stool\", \"Saliva\"), \"Sex\")      ## Limits ----------------------------   limit.by = list('Sex' = \"Male\", 'Age' = c(20,40))   limit.by = list('Body Site' = c(\"Saliva\", \"Anterior nares\"), 'Age' = c(NA,35))"},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/adiv_corrplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize alpha diversity with scatterplots and trendlines. — adiv_corrplot","text":"","code":"library(rbiom)          biom <- sample_rarefy(hmp50)     adiv_corrplot(biom, \"Age\", color.by=\"Body Site\", adiv=c(\"shannon\", \"otus\"), facet.by = \"Sex\", ci = 90)  #> `geom_smooth()` using formula = 'y ~ x'"},{"path":"https://cmmr.github.io/rbiom/reference/adiv_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the alpha diversity of each sample. — adiv_table","title":"Calculate the alpha diversity of each sample. — adiv_table","text":"Calculate alpha diversity sample.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/adiv_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the alpha diversity of each sample. — adiv_table","text":"","code":"adiv_table(biom, rarefy = FALSE, adiv = \"Shannon\", long = FALSE, md = FALSE)"},{"path":"https://cmmr.github.io/rbiom/reference/adiv_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the alpha diversity of each sample. — adiv_table","text":"biom matrix, simple_triplet_matrix, BIOM object, returned read_biom(). matrices, rows columns assumed taxa samples, respectively. rarefy Control /whether rarefactions done prior alpha diversity computations. Options : FALSE -  Use sample's current set observations without applying rarefaction. TRUE -  Automatically select apply single rarefaction. \"multi\", \"multi_log\", \"multi_even\" -  Automatically select apply multiple rarefactions. \"multi\" provides \"multi_log\" low end \"multi_even\" high end. integer vector -  Rarefy specified depth(s). Default: FALSE adiv One alpha diversity measures use. Options : \"OTUs\", \"Shannon\", \"Chao1\", \"Simpson\", /\"InvSimpson\". Non-ambiguous abbreviations also accepted. can use adiv=\"\" shortcut adiv=c(\"OTUs\", \"Shannon\", \"Chao1\", \"Simpson\", \"InvSimpson\") Default: \"Shannon\". long Pivot returned data long format? FALSE -  alpha diversity metric always column, named \".OTUs\", \".Shannon\", etc. TRUE -  name metric \".adiv\" column, alpha diversity values \".diversity\" column. Default: FALSE md Include metadata output data frame? Options : FALSE -  include metadata. TRUE -  Include metadata. character vector -  Include specified metadata columns. Default: FALSE","code":""},{"path":"https://cmmr.github.io/rbiom/reference/adiv_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the alpha diversity of each sample. — adiv_table","text":"data frame diversity values sample biom. first column name .sample. Remaining column names dependent function's arguments.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/adiv_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the alpha diversity of each sample. — adiv_table","text":"","code":"library(rbiom)          biom <- sample_select(hmp50, 1:6)          adiv_table(biom, adiv=\"all\") #>   .sample .OTUs .Shannon    .Chao1  .Simpson .InvSimpson #> 1   HMP01    49 1.741153  59.08333 0.5668414    2.308623 #> 2   HMP02    75 2.587403 104.38889 0.8133914    5.358811 #> 3   HMP03    75 2.950982  90.04167 0.8936622    9.403996 #> 4   HMP04    83 3.255785  93.32143 0.9323645   14.785121 #> 5   HMP05    67 1.462651 127.75000 0.5252255    2.106263 #> 6   HMP06   105 3.087615 131.88889 0.9103916   11.159668     adiv_table(biom, long = TRUE, md = TRUE) #>   .sample .depth   .adiv .diversity Age BMI     Body Site    Sex #> 1   HMP01   1660 Shannon   1.741153  22  20 Buccal mucosa Female #> 2   HMP02   1371 Shannon   2.587403  24  23 Buccal mucosa   Male #> 3   HMP03   1353 Shannon   2.950982  28  26        Saliva   Male #> 4   HMP04   1895 Shannon   3.255785  25  23        Saliva   Male #> 5   HMP05   3939 Shannon   1.462651  27  24 Buccal mucosa Female #> 6   HMP06   4150 Shannon   3.087615  32  25        Saliva   Male"},{"path":"https://cmmr.github.io/rbiom/reference/as_percent.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert absolute counts to relative abundances. — as_percent","title":"Convert absolute counts to relative abundances. — as_percent","text":"Convert absolute counts relative abundances.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/as_percent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert absolute counts to relative abundances. — as_percent","text":"","code":"as_percent(biom)"},{"path":"https://cmmr.github.io/rbiom/reference/as_percent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert absolute counts to relative abundances. — as_percent","text":"biom BIOM object, returned read_biom().","code":""},{"path":"https://cmmr.github.io/rbiom/reference/as_percent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert absolute counts to relative abundances. — as_percent","text":"BIOM object.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/as_percent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert absolute counts to relative abundances. — as_percent","text":"","code":"library(rbiom)          otu_matrix(hmp50)[1:4,1:5] #>          HMP01 HMP02 HMP03 HMP04 HMP05 #> UncO2713     0     0     0     0     0 #> UncO4101     1     5     6    18     5 #> AnmMass2     0     0     0     0     0 #> PreBivi6     0     0     0     0     0          biom <- as_percent(hmp50)     otu_matrix(biom)[1:4,1:5] #>                 HMP01       HMP02      HMP03       HMP04       HMP05 #> UncO2713 0.0000000000 0.000000000 0.00000000 0.000000000 0.000000000 #> UncO4101 0.0006024096 0.003646973 0.00443459 0.009498681 0.001269358 #> AnmMass2 0.0000000000 0.000000000 0.00000000 0.000000000 0.000000000 #> PreBivi6 0.0000000000 0.000000000 0.00000000 0.000000000 0.000000000"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize BIOM data with boxplots. — bdiv_boxplot","title":"Visualize BIOM data with boxplots. — bdiv_boxplot","text":"Visualize BIOM data boxplots.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize BIOM data with boxplots. — bdiv_boxplot","text":"","code":"bdiv_boxplot(   biom,   x = NULL,   bdiv = \"Bray-Curtis\",   layers = \"lsb\",   color.by = NULL,   pattern.by = NULL,   shape.by = NULL,   facet.by = NULL,   limit.by = NULL,   flip = FALSE,   stripe = flip,   p.adj = \"fdr\",   p.label = TRUE,   ci = 95,   outliers = NULL,   xlab.angle = \"auto\",   weighted = TRUE,   tree = NULL,   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize BIOM data with boxplots. — bdiv_boxplot","text":"biom BIOM object, returned read_biom(). x categorical metadata column name. Prefix column name == != limit comparisons within groups, respectively. default, NULL groups distances single column. bdiv beta diversity distance algorithm use. Options : \"Bray-Curtis\", \"Manhattan\", \"Euclidean\", \"Jaccard\", \"UniFrac\". Non-ambiguous abbreviations algorithm names also accepted. \"UniFrac\", phylogenetic tree must present biom explicitly provided via tree=. Default: \"Bray-Curtis\". layers \"box\" (\"x\"), \"bar\", \"violin\", \"dot\", \"strip\", \"crossbar\", \"errorbar\", \"linerange\", \"pointrange\". Single letter abbreviations also accepted. instance, c(\"box\", \"dot\") equivalent c(\"x\", \"d\") \"xd\". See vignette(\"boxplots\") examples . Default: \"lsb\". color., pattern., shape., facet., limit.Metadata columns use data partitioning. Prefix column name == != limit comparisons within groups, respectively. Default: NULL flip Transpose axes, taxa present rows instead columns. Default: FALSE stripe Shade every x position. Default: flip p.adj Method use multiple comparisons adjustment p-values. Run p.adjust.methods list available options. (Default: fdr) p.label Minimum adjusted p-value display plot bracket. p.label = 0.05 -  Use specific value. p.label = TRUE -  equivalent p.label = 0.05 p.label = FALSE -  show stats plot p.label = Inf -  display p-values p.label = NULL -  calculate stats numeric vector one value provided, used breaks asterisk notation. Default: TRUE ci calculate min/max crossbar, errorbar, linerange, pointrange layers. Provide number 75 100 define confidence interval's confidence level, commonly 95 97.5. options : \"range\", \"sd\" (standard deviation), \"se\" (standard error), \"mad\" (median absolute deviation). center mark crossbar pointrange represents mean, except code\"mad\" case represents median. Set NULL disable. Default: 95 outliers Show boxplot outliers? TRUE always show. FALSE always hide. NULL hide overlaying dot strip chart.  Default: NULL xlab.angle rotate tick labels x-axis. 'auto' (default), automatically selects rotation value. 0, 30, 90 sets angle horizontal, angled, vertical, respectively. weighted Take relative abundances account. weighted=FALSE, presence/absence considered. Default: TRUE tree phylo object representing phylogenetic relationships taxa biom. taken tree defined biom explicitly specified. required computing UniFrac distance matrices. Default: NULL ... Parameters matched formal arguments ggplot2 functions. Prefixing parameter names layer name ensures particular parameter passed , , layer. instance, dot.size = 2 d.size = 2 ensures dotplot layer size set 2. special prefix pt. control dot strip layers. filter.fun function takes bdiv_table() input returns bdiv_table() output. modified table used plotting. Default: NULL.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize BIOM data with boxplots. — bdiv_boxplot","text":"ggplot2 plot. computed data points statistics available $data $stats, respectively.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_boxplot.html","id":"aesthetics-and-partitions","dir":"Reference","previous_headings":"","what":"Aesthetics and Partitions","title":"Visualize BIOM data with boxplots. — bdiv_boxplot","text":"Metadata can used flexibly subset, partition, apply aesthetics creating plot. Common use cases provided . thorough documentation available https://cmmr.github.io/rbiom. color.- categorical metadata column. (Max 1) pattern.- categorical metadata column. (Max 1) shape.- categorical metadata column. (Max 1) facet.- Categorical metadata column(s) . limit.- metadata column(s). built-color palettes colorblind-friendly. available categorical palette names : \"okabe\", \"carto\", \"r4\", \"polychrome\", \"tol\", \"bright\", \"light\", \"muted\", \"vibrant\", \"tableau\", \"classic\", \"alphabet\", \"tableau20\", \"kelly\", \"fishy\". Patterns sourced magick R package. Pattern names : \"bricks\", \"hexagons\", \"horizontalsaw\", \"hs_fdiagonal\", \"fishscales\", \"verticalsaw\", \"checkerboard\", \"octagons\", \"right45\", \"hs_cross\", \"hs_bdiagonal\", \"hs_diagcross\", \"hs_horizontal\", \"hs_vertical\", \"left45\", \"leftshingle\", \"rightshingle\", \"verticalbricks\", \"verticalleftshingle\", \"verticalrightshingle\". Shapes can given per base R - numbers 0 17 various shapes, decimal value ascii character, e.g. -z = 65:90; -Z = 97:122 use letters instead shapes plot. Character strings may used well.","code":"## Colors ----------------------------   color.by = \"Body Site\"   color.by = list('Body Site' = \"bright\")   color.by = list('Body Site' = c(\"Stool\", \"Saliva\"))   color.by = list('Body Site' = list('values' = c(\"Stool\", \"Saliva\"), 'colors' = \"bright\"))   color.by = list('Body Site' = c('Stool' = \"blue\", 'Saliva' = \"green\"))      ## Patterns --------------------------   pattern.by = \"Body Site\"   pattern.by = list('Body Site' = c(\"Stool\", \"Saliva\"))   pattern.by = list('Body Site' = c('Stool' = \"left45\", 'Saliva' = \"hs_cross\"))      ## Shapes ----------------------------   shape.by = \"Body Site\"   shape.by = list('Body Site' = c(\"Stool\", \"Saliva\"))   shape.by = list('Body Site' = c('Stool' = 7, 'Saliva' = 8))      ## Facets ----------------------------   facet.by = \"Body Site\"   facet.by = c(\"Body Site\", \"Sex\")   facet.by = list('Body Site' = c(\"Stool\", \"Saliva\"), \"Sex\")      ## Limits ----------------------------   limit.by = list('Sex' = \"Male\", 'Age' = c(20,40))   limit.by = list('Body Site' = c(\"Saliva\", \"Anterior nares\"), 'Age' = c(NA,35))"},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_boxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize BIOM data with boxplots. — bdiv_boxplot","text":"","code":"library(rbiom)          biom <- sample_rarefy(hmp50)     bdiv_boxplot(biom, x=\"==Body Site\", bdiv=\"UniFrac\", color.by=\"Body Site\")"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_distmat.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a distance matrix of samples vs samples. — bdiv_distmat","title":"Make a distance matrix of samples vs samples. — bdiv_distmat","text":"Make distance matrix samples vs samples.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_distmat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a distance matrix of samples vs samples. — bdiv_distmat","text":"","code":"bdiv_distmat(biom, bdiv = \"Bray-Curtis\", weighted = TRUE, tree = NULL)"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_distmat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a distance matrix of samples vs samples. — bdiv_distmat","text":"biom matrix, simple_triplet_matrix, BIOM object (e.g. returned read_biom()). matrices, rows columns assumed taxa samples, respectively. bdiv beta diversity distance algorithm use. Options : \"Bray-Curtis\", \"Manhattan\", \"Euclidean\", \"Jaccard\", \"UniFrac\". Non-ambiguous abbreviations algorithm names also accepted. \"UniFrac\", phylogenetic tree must present biom explicitly provided via tree=. Default: \"Bray-Curtis\". weighted Take relative abundances account. weighted=FALSE, presence/absence considered. Default: TRUE tree phylo object representing phylogenetic relationships taxa biom. taken tree defined biom explicitly specified. required computing UniFrac distance matrices. Default: NULL","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_distmat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a distance matrix of samples vs samples. — bdiv_distmat","text":"distance matrix.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_distmat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a distance matrix of samples vs samples. — bdiv_distmat","text":"","code":"library(rbiom)          biom <- sample_select(hmp50, 1:10)     dm   <- bdiv_distmat(biom, 'unifrac')     as.matrix(dm)[1:4,1:4] #>           HMP01     HMP02     HMP03     HMP04 #> HMP01 0.0000000 0.1950253 0.3687298 0.4239831 #> HMP02 0.1950253 0.0000000 0.2101679 0.3187533 #> HMP03 0.3687298 0.2101679 0.0000000 0.3040937 #> HMP04 0.4239831 0.3187533 0.3040937 0.0000000     plot(hclust(dm))"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Display beta diversities in an all vs all grid. — bdiv_heatmap","title":"Display beta diversities in an all vs all grid. — bdiv_heatmap","text":"Display beta diversities vs grid.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display beta diversities in an all vs all grid. — bdiv_heatmap","text":"","code":"bdiv_heatmap(   biom,   bdiv = \"Bray-Curtis\",   weighted = TRUE,   tree = NULL,   grid = list(label = \"Distance\", colors = \"-bilbao\"),   color.by = NULL,   order.by = NULL,   limit.by = NULL,   label = TRUE,   label_size = NULL,   rescale = \"none\",   ratio = 1,   clust = \"complete\",   trees = TRUE,   tree_height = NULL,   track_height = NULL,   legend = \"right\",   xlab.angle = \"auto\",   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display beta diversities in an all vs all grid. — bdiv_heatmap","text":"biom BIOM object, returned read_biom(). Alternatively, dist class distance matrix can given, case parameters ord, k, ... allowed. bdiv beta diversity distance algorithm use. Options : \"Bray-Curtis\", \"Manhattan\", \"Euclidean\", \"Jaccard\", \"UniFrac\". phylogenetic tree must present biom explicitly provided via tree= use UniFrac methods. Multiple values allowed. Default: \"Bray-Curtis\". weighted Take relative abundances account. weighted=FALSE, presence/absence considered. Multiple values allowed. Default: TRUE tree phylo object representing phylogenetic relationships taxa biom. taken tree defined biom explicitly specified. required computing UniFrac distance matrices. Default: NULL grid Color palette name, list entries label, colors, range, bins, na.color, /guide. See Track Definitions section details. Default: list(label = \"Distance\", colors = \"-bilbao\"). color.Add annotation tracks metadata column(s). See \"Annotation Tracks\" section details. Default: NULL order.metadata column(s) use ordering samples across x y axes. Overrides clust argument. See \"Ordering Limiting\" section details. Default: NULL limit.Metadata definition(s) use sample subsetting prior calculations. See \"Ordering Limiting\" section details. Default: NULL label Label matrix rows columns. can supply list logical vector length two control row labels column labels separately, example label = c(rows = TRUE, cols = FALSE), simply label = c(T, F). valid options \"rows\", \"cols\", \"\", \"bottom\", \"right\", \"none\". Default: TRUE. label_size font size use row column labels. can supply numeric vector length two control row label sizes column label sizes separately, example c(rows = 20, cols = 8), simply c(20, 8). Default: NULL, computes: pmax(8, pmin(20, 100 / dim(mtx))). rescale Rescale rows columns common min/max. Options: \"none\", \"rows\", \"cols\". Default: \"none\". ratio Height/width ratio entire grid. Default: 1 (square). clust Clustering algorithm reordering rows columns similarity. can supply list character vector length two control row column clustering separately, example clust = c(rows = \"complete\", cols = NA), simply clust = c(\"complete\", NA). Default: \"complete\".   trees Draw dendrogram rows (left) columns (top). can supply list logical vector length two control row tree column tree separately, example trees = c(rows = T, cols = F), simply trees = c(T, F). valid options \"rows\", \"cols\", \"\", \"left\", \"top\", \"none\". Default: TRUE. tree_height, track_height height dendrogram annotation tracks multiples (fractions) smaller dimension grid cell size. Use numeric vector length two assign c(left, top) independently. Default: NULL, computes: tree_height = sqrt(min(dim(mtx))), track_height = tree_height / 4. legend place legend. Options : \"right\" \"bottom\". Default: \"right\". xlab.angle Angle labels bottom plot. Options \"auto\", 0, 30, 90. Default: \"auto\". ... Additional arguments pass ggplot2::theme(). example, labs.title = \"Plot Title\".","code":"Options are:     \\itemize{       \\item{\\code{FALSE} or \\code{NA} - }{ Disable reordering. }       \\item{An \\code{hclust} class object} { E.g. from [stats::hclust()]. }       \\item{A method name - }{ \\code{\"ward.D\"},          \\code{\"ward.D2\"}, \\code{\"single\"}, \\code{\"complete\"},          \\code{\"average\"}, \\code{\"mcquitty\"}, \\code{\"median\"}, or          \\code{\"centroid\"}. }     }"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display beta diversities in an all vs all grid. — bdiv_heatmap","text":"ggplot2 plot. constructed ggplot command attached attr(,'cmd'), underlying computed data $data.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_heatmap.html","id":"annotation-tracks","dir":"Reference","previous_headings":"","what":"Annotation Tracks","title":"Display beta diversities in an all vs all grid. — bdiv_heatmap","text":"Metadata can displayed colored tracks heatmap. Common use cases provided , thorough documentation available https://cmmr.github.io/rbiom . following entries track definitions understood: colors -  pre-defined palette name custom set colors map . range -  c(min,max) use scale values. label -  Label track. Defaults name list element. side -  Options \"top\" (default) \"left\". na.color -  color use NA values. bins -  Bin gradient many bins/steps. guide -  list arguments guide_colorbar() guide_legend(). built-color palettes colorblind-friendly. Categorical palette names: \"okabe\", \"carto\", \"r4\", \"polychrome\", \"tol\", \"bright\", \"light\", \"muted\", \"vibrant\", \"tableau\", \"classic\", \"alphabet\", \"tableau20\", \"kelly\", \"fishy\". Numeric palette names: \"reds\", \"oranges\", \"greens\", \"purples\", \"grays\", \"acton\", \"bamako\", \"batlow\", \"bilbao\", \"buda\", \"davos\", \"devon\", \"grayC\", \"hawaii\", \"imola\", \"lajolla\", \"lapaz\", \"nuuk\", \"oslo\", \"tokyo\", \"turku\", \"bam\", \"berlin\", \"broc\", \"cork\", \"lisbon\", \"roma\", \"tofino\", \"vanimo\", \"vik\".","code":"## Categorical ---------------------------- color.by = \"Body Site\" color.by = list('Body Site' = \"bright\") color.by = list('Body Site' = c(\"Stool\", \"Saliva\"), 'colors' = \"bright\") color.by = list('Body Site' = c('Stool' = \"blue\", 'Saliva' = \"green\"))  ## Numeric -------------------------------- color.by = \"Age\" color.by = list('Age' = \"reds\") color.by = list('Age' = c(20,NA), 'colors' = \"reds\") # at least 20 years old color.by = list('Age' = c(20,40)) # between 20 and 40 years old (inclusive)  ## Multiple Tracks ------------------------ color.by = c(\"Body Site\", \"Age\") color.by = list('Body Site' = \"bright\", 'Age' = \"reds\") color.by = list(   'Body Site' = c('Stool' = \"blue\", 'Saliva' = \"green\"),   'Age'       = list(range = c(20,40), 'colors' = \"reds\") )"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_heatmap.html","id":"ordering-and-limiting","dir":"Reference","previous_headings":"","what":"Ordering and Limiting","title":"Display beta diversities in an all vs all grid. — bdiv_heatmap","text":"order.controls metadata column(s) used arrange samples plot. also enables subsetting particular set range values. Prefix column name - arrange values descending order rather ascending. limit.used specify subset samples without side-effects aesthetics. especially useful limiting data single categorical metadata value. Unlike *.parameters, limit.must always named list().","code":"## Categorical ---------------------------- order.by = \"Body Site\" order.by = list('Body Site' = c(\"Stool\", \"Saliva\"))  ## Numeric -------------------------------- order.by = \"-Age\" order.by = list('Age'  = c(20,NA)) # at least 20 years old order.by = list('-Age' = c(20,40)) # between 20 and 40 years old (inclusive)  ## Multiple / Mixed ----------------------- order.by = c(\"-Body Site\", \"Age\") order.by = list(\"Body Site\", '-Age' = c(20,40)) ## Categorical ---------------------------- limit.by = list('Sex' = \"Male\")  ## Numeric -------------------------------- limit.by = list('Age' = c(20,NA)) # at least 20 years old limit.by = list('Age' = c(20,40)) # between 20 and 40 years old (inclusive)  ## Multiple / Mixed ----------------------- limit.by = list(   'Sex'       = \"Male\",    'Body Site' = c(\"Stool\", \"Saliva\")   'Age'       = c(20,40) )"},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display beta diversities in an all vs all grid. — bdiv_heatmap","text":"","code":"library(rbiom)       biom <- hmp50 %>% sample_rarefy() %>% sample_select(1:10)   bdiv_heatmap(biom, color.by=\"Body Site\")"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_ord_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Ordinate samples and taxa on a 2D plane based on beta diversity distances. — bdiv_ord_plot","title":"Ordinate samples and taxa on a 2D plane based on beta diversity distances. — bdiv_ord_plot","text":"Ordinate samples taxa 2D plane based beta diversity distances.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_ord_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ordinate samples and taxa on a 2D plane based on beta diversity distances. — bdiv_ord_plot","text":"","code":"bdiv_ord_plot(   biom,   bdiv = \"Bray-Curtis\",   ord = \"UMAP\",   weighted = TRUE,   layers = \"pe\",   color.by = NULL,   shape.by = NULL,   facet.by = NULL,   limit.by = NULL,   tree = NULL,   test = \"adonis2\",   seed = 0,   permutations = 999,   rank = NULL,   taxa = 5,   p.top = Inf,   p.adj = \"fdr\",   unc = \"singly\",   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_ord_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ordinate samples and taxa on a 2D plane based on beta diversity distances. — bdiv_ord_plot","text":"biom BIOM object, returned read_biom(). Alternatively, dist class distance matrix can given, case parameters ord, k, ... allowed. bdiv beta diversity distance algorithm use. Options : \"Bray-Curtis\", \"Manhattan\", \"Euclidean\", \"Jaccard\", \"UniFrac\". phylogenetic tree must present biom explicitly provided via tree= use UniFrac methods. Multiple values allowed. Default: \"Bray-Curtis\". ord Method reducing dimensionality. Options : \"UMAP\" -  Uniform manifold approximation projection; uwot::umap(). \"PCoA\" -  Principal coordinate analysis; ape::pcoa(). \"NMDS\" -  Nonmetric multidimensional scaling; vegan::metaMDS(). \"tSNE\" -  t-distributed stochastic neighbor embedding; tsne::tsne(). Default: \"UMAP\"  Multiple values allowed. Non-ambiguous abbreviations allowed. weighted Take relative abundances account. weighted=FALSE, presence/absence considered. Multiple values allowed. Default: TRUE layers graphical elements use drawing. Options : point, spider, ellipse, name samples, mean, taxon, arrow taxa. Single letter abbreviations also accepted. instance, c(\"point\", \"ellipse\") equivalent c(\"p\", \"e\") \"pe\". See vignette(\"ordination\") vignette examples . Default: \"pe\" color., shape., facet., limit.Metadata columns use vignette(\"data partitioning\"). Default: color.=NULL, shape.=NULL, facet.=NULL, limit.=NULL tree phylo object representing phylogenetic relationships taxa biom. taken tree defined biom explicitly specified. required computing UniFrac distance matrices. Default: NULL test, seed, permutations Passthrough parameters distmat_stats() assessing significance stat.rank groups. Default: test=\"adonis2\", seed=0, permutations=999 rank rank taxa display, example \"Phylum\" \"Genus\". Use taxa_ranks() see options given BIOM object. default, NULL, selects lowest level. taxa Biplot taxa include. integer value return top n abundant taxa. value 0 <= n < 1 return taxa mean abundance greater (e.g. 0.1). character vector taxon names show taxa. Default: 5 p.top Biplot return taxa significant differences abundance. p.top >= 1, p.top significant taxa displayed. p.top less one, taxa adjusted p-value <= p.top displayed. Recommended used combination taxa parameter set lower bound mean abundance considered taxa. Default: Inf p.adj Biplot Method use multiple comparisons adjustment p-values. Run p.adjust.methods list available options. Default: fdr unc Biplot handle unclassified, uncultured, similarly ambiguous taxa names. Options : \"singly\" -  Replaces OTU name. \"grouped\" -  Replaces higher rank's name. \"drop\" -  Excludes result. \"asis\" -  check/modify taxa names. Default: \"singly\"  Non-ambiguous abbreviations allowed. ... Parameters layer geoms (e.g. ggplot2::geom_point()). Prefixing parameter names layer name ensures particular parameter passed , , layer. instance, point.size = 2 p.size = 2 ensures points size set 2. Points can also controlled pt. prefix.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_ord_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ordinate samples and taxa on a 2D plane based on beta diversity distances. — bdiv_ord_plot","text":"ggplot object.","code":"The computed sample coordinates are in \\code{p$data)}.            If \\code{color.by} is given, then \\code{attr(p, 'stats')} and       \\code{attr(p, 'stats_cmds')} are set.            If \\code{rank} is given, then \\code{attr(p$data, 'taxa_coords')},       \\code{attr(p, 'taxa_stats')}, and \\code{attr(p, 'taxa_stats_cmds')}       are set."},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_ord_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ordinate samples and taxa on a 2D plane based on beta diversity distances. — bdiv_ord_plot","text":"","code":"library(rbiom)          biom <- sample_rarefy(hmp50)     bdiv_ord_plot(biom, layers=\"pemt\", color.by=\"Body Site\", rank=\"g\")"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_ord_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate PCoA and other ordinations, including taxa biplots and statistics. — bdiv_ord_table","title":"Calculate PCoA and other ordinations, including taxa biplots and statistics. — bdiv_ord_table","text":"Calculate PCoA ordinations, including taxa biplots statistics.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_ord_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate PCoA and other ordinations, including taxa biplots and statistics. — bdiv_ord_table","text":"","code":"bdiv_ord_table(   biom,   bdiv = \"Bray-Curtis\",   ord = \"UMAP\",   weighted = TRUE,   md = NULL,   k = 2,   split.by = NULL,   stat.by = NULL,   tree = NULL,   test = \"adonis2\",   seed = 0,   permutations = 999,   rank = NULL,   taxa = 5,   p.top = Inf,   p.adj = \"fdr\",   unc = \"singly\",   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_ord_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate PCoA and other ordinations, including taxa biplots and statistics. — bdiv_ord_table","text":"biom BIOM object, returned read_biom(). Alternatively, dist class distance matrix can given, case parameters ord, k, ... allowed. bdiv beta diversity distance algorithm use. Options : \"Bray-Curtis\", \"Manhattan\", \"Euclidean\", \"Jaccard\", \"UniFrac\". phylogenetic tree must present biom explicitly provided via tree= use UniFrac methods. Multiple values allowed. Default: \"Bray-Curtis\". ord Method reducing dimensionality. Options : \"UMAP\" -  Uniform manifold approximation projection; uwot::umap(). \"PCoA\" -  Principal coordinate analysis; ape::pcoa(). \"NMDS\" -  Nonmetric multidimensional scaling; vegan::metaMDS(). \"tSNE\" -  t-distributed stochastic neighbor embedding; tsne::tsne(). Default: \"UMAP\"  Multiple values allowed. Non-ambiguous abbreviations allowed. weighted Take relative abundances account. weighted=FALSE, presence/absence considered. Multiple values allowed. Default: TRUE md Include metadata output data frame? Options : NULL -  include metadata. (Default) TRUE -  Include metadata. character vector -  Include specified metadata columns. Default: NULL k Number ordination dimensions return. Either 2L 3L. Default: 2L split.Name(s) metadata columns data split prior calculating distance matrices, ordinations, statistics. Equivalent facet.parameter bdiv_ord_plot(). Default: NULL stat.Name metadata column statistical groups. Equivalent color.parameter bdiv_ord_plot(). Default: NULL tree phylo object representing phylogenetic relationships taxa biom. taken tree defined biom explicitly specified. required computing UniFrac distance matrices. Default: NULL test, seed, permutations Passthrough parameters distmat_stats() assessing significance stat.rank groups. Default: test=\"adonis2\", seed=0, permutations=999 rank Biplot rank taxa use biplot (e.g. \"Phylum\"), NULL biplot. Run taxa_ranks() see options given BIOM object. Default: NULL taxa Biplot taxa include. integer value return top n abundant taxa. value 0 <= n < 1 return taxa mean abundance greater (e.g. 0.1). character vector taxon names show taxa. Default: 5 p.top Biplot return taxa significant differences abundance. p.top >= 1, p.top significant taxa displayed. p.top less one, taxa adjusted p-value <= p.top displayed. Recommended used combination taxa parameter set lower bound mean abundance considered taxa. Default: Inf p.adj Biplot Method use multiple comparisons adjustment p-values. Run p.adjust.methods list available options. Default: fdr unc Biplot handle unclassified, uncultured, similarly ambiguous taxa names. Options : \"singly\" -  Replaces OTU name. \"grouped\" -  Replaces higher rank's name. \"drop\" -  Excludes result. \"asis\" -  check/modify taxa names. Default: \"singly\"  Non-ambiguous abbreviations allowed. ... Additional arguments pass uwot::umap(), ape::pcoa(), vegan::metaMDS(), tsne::tsne().","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_ord_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate PCoA and other ordinations, including taxa biplots and statistics. — bdiv_ord_table","text":"data.frame columns .sample, .ord, .x, .y, (optionally) .z.","code":"If \\code{biom} is a \\code{BIOM} object, then \\code{.weighted},       \\code{.bdiv}, and any columns given by \\code{md}, \\code{split.by},       and \\code{stat.by} are included as well.            If \\code{stat.by} is given, then \\code{attr(, 'sample_stats')}      and \\code{attr(, 'sample_stats_cmds')} are set.            If \\code{rank} is given, then \\code{attr(, 'taxa_coords')},      \\code{attr(, 'taxa_stats')}, and \\code{attr(, 'taxa_stats_cmds')}       are set."},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_ord_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate PCoA and other ordinations, including taxa biplots and statistics. — bdiv_ord_table","text":"","code":"library(rbiom)           ord <- bdiv_ord_table(hmp50, \"bray\", \"pcoa\", stat.by=\"Body Site\", rank=\"g\")     head(ord) #>   .weighted       .bdiv .ord .sample     .x       .y     Body Site #> 1      TRUE Bray-Curtis PCoA   HMP01 -0.387 -0.00895 Buccal mucosa #> 2      TRUE Bray-Curtis PCoA   HMP02 -0.461 -0.01350 Buccal mucosa #> 3      TRUE Bray-Curtis PCoA   HMP03 -0.407 -0.01430        Saliva #> 4      TRUE Bray-Curtis PCoA   HMP04 -0.378 -0.01230        Saliva #> 5      TRUE Bray-Curtis PCoA   HMP05 -0.452 -0.01140 Buccal mucosa #> 6      TRUE Bray-Curtis PCoA   HMP06 -0.411 -0.01230        Saliva     attr(ord, 'sample_stats') #>   .weighted       .bdiv .stat   .z .p.val .adj.p        .test #> 1      TRUE Bray-Curtis  19.2 72.2  0.001  0.001 adonis2; fdr     attr(ord, 'taxa_stats') #>   .weighted       .bdiv .rank             .taxa .stat   .z .p.val .adj.p #> 1      TRUE Bray-Curtis Genus     Lactobacillus  8.62 16.8  0.001  0.001 #> 2      TRUE Bray-Curtis Genus     Streptococcus 10.10 19.5  0.001  0.001 #> 3      TRUE Bray-Curtis Genus       Bacteroides  8.72 16.7  0.001  0.001 #> 4      TRUE Bray-Curtis Genus Corynebacterium 1  8.53 16.0  0.001  0.001 #> 5      TRUE Bray-Curtis Genus       Haemophilus  6.56 12.3  0.001  0.001 #>          .test #> 1 adonis2; fdr #> 2 adonis2; fdr #> 3 adonis2; fdr #> 4 adonis2; fdr #> 5 adonis2; fdr"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a data.frame of distances between samples. — bdiv_table","title":"Make a data.frame of distances between samples. — bdiv_table","text":"Make data.frame distances samples.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a data.frame of distances between samples. — bdiv_table","text":"","code":"bdiv_table(   biom,   bdiv = \"Bray-Curtis\",   weighted = TRUE,   tree = NULL,   md = FALSE )"},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a data.frame of distances between samples. — bdiv_table","text":"biom matrix, simple_triplet_matrix, BIOM object (e.g. returned read_biom()). matrices, rows columns assumed taxa samples, respectively. bdiv beta diversity distance algorithm use. Options : \"Bray-Curtis\", \"Manhattan\", \"Euclidean\", \"Jaccard\", \"UniFrac\". Non-ambiguous abbreviations algorithm names also accepted. \"UniFrac\", phylogenetic tree must present biom explicitly provided via tree=. Default: \"Bray-Curtis\". weighted Take relative abundances account. weighted=FALSE, presence/absence considered. Default: TRUE tree phylo object representing phylogenetic relationships taxa biom. taken tree defined biom explicitly specified. required computing UniFrac distance matrices. Default: NULL md Include metadata output data frame? Options : FALSE -  include metadata. TRUE -  Include metadata. character vector -  Include specified metadata columns. Column names can prefixed == != indicate within groupings, respectively, kept. See examples . Default: FALSE","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a data.frame of distances between samples. — bdiv_table","text":"data.frame first three columns named \".sample1\", \".sample2\", \".distance\".","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/bdiv_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a data.frame of distances between samples. — bdiv_table","text":"","code":"library(rbiom)          # Return in long format with metadata     biom <- sample_select(hmp50, 18:21)     bdiv_table(biom, 'unifrac', md = c(\"Body Site\", \"Sex\")) #>    .sample1 .sample2 .distance       Body Site            Sex #> 5     HMP18    HMP19 0.6651627 Saliva vs Stool Female vs Male #> 9     HMP18    HMP20 0.6810017 Saliva vs Stool Female vs Male #> 10    HMP19    HMP20 0.4183059           Stool         Female #> 13    HMP18    HMP21 0.7170374 Saliva vs Stool           Male #> 14    HMP19    HMP21 0.3896741           Stool Female vs Male #> 15    HMP20    HMP21 0.1490926           Stool Female vs Male          # Only look at distances among the stool samples     bdiv_table(biom, 'unifrac', md = c(\"==Body Site\", \"Sex\")) #>    .sample1 .sample2 .distance Body Site            Sex #> 10    HMP19    HMP20 0.4183059     Stool         Female #> 14    HMP19    HMP21 0.3896741     Stool Female vs Male #> 15    HMP20    HMP21 0.1490926     Stool Female vs Male          # Or between males and females     bdiv_table(biom, 'unifrac', md = c(\"Body Site\", \"!=Sex\")) #>    .sample1 .sample2 .distance       Body Site            Sex #> 5     HMP18    HMP19 0.6651627 Saliva vs Stool Female vs Male #> 9     HMP18    HMP20 0.6810017 Saliva vs Stool Female vs Male #> 14    HMP19    HMP21 0.3896741           Stool Female vs Male #> 15    HMP20    HMP21 0.1490926           Stool Female vs Male"},{"path":"https://cmmr.github.io/rbiom/reference/bdply.html","id":null,"dir":"Reference","previous_headings":"","what":"Split BIOM by metadata, apply function, and return results in a data frame. — bdply","title":"Split BIOM by metadata, apply function, and return results in a data frame. — bdply","text":"Calls plyr::ddply internally.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split BIOM by metadata, apply function, and return results in a data frame. — bdply","text":"","code":"bdply(biom, vars, FUN, ..., iters = list(), prefix = FALSE, fast = TRUE)"},{"path":"https://cmmr.github.io/rbiom/reference/bdply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split BIOM by metadata, apply function, and return results in a data frame. — bdply","text":"biom BIOM object, returned read_biom(). Technically accepts types objects, BIOM objects allow using vars option, . vars character vector metadata fields. unique combination values columns used create subsetted BIOM object pass FUN. NULL, biom passed FUN unaltered. Unambiguous abbreviations metadata fields also accepted. FUN function execute BIOM subset. FUN return data.frame, rbind-ed together returned bdply. ... Additional arguments pass FUN. iters named list values pass FUN. Unlike ..., iterated combinations. Default: list() prefix TRUE, prefixes names iters '.' split_labels attribute returned object. Default: FALSE fast TRUE (default), subsetted BIOM objects still contain full taxa table phylogenetic tree. Set fast = FALSE run slow steps subsetting elements well.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split BIOM by metadata, apply function, and return results in a data frame. — bdply","text":"data.frame comprising merged outputs FUN, along columns specified vars.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/bdply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split BIOM by metadata, apply function, and return results in a data frame. — bdply","text":"","code":"library(rbiom)          bdply(hmp50, \"Sex\", n_samples) #>      Sex V1 #> 1 Female 30 #> 2   Male 20          bdply(hmp50, c(\"Body Site\", \"Sex\"), function (b) {       ad <- adiv_table(b, adiv = \"all\")[,c(\".Shannon\", \".Simpson\")]       apply(ad, 2L, mean)     }) #>      Sex      Body Site  .Shannon  .Simpson #> 1 Female Anterior nares 1.4318071 0.6814534 #> 2 Female  Buccal mucosa 1.1739844 0.4080621 #> 3 Female     Mid vagina 0.4070774 0.1670592 #> 4 Female         Saliva 2.9304968 0.8934531 #> 5 Female          Stool 2.4288307 0.8496172 #> 6   Male Anterior nares 1.5053133 0.6650060 #> 7   Male  Buccal mucosa 1.7128815 0.6016869 #> 8   Male         Saliva 3.1718522 0.9132980 #> 9   Male          Stool 2.5126148 0.8347696          iters <- list(w = c(TRUE, FALSE), d = c(\"bray\", \"euclid\"))     bdply(hmp50, \"Sex\", iters = iters, function (b, w, d) {       r <- range(bdiv_distmat(biom = b, bdiv = d, weighted = w))       round(data.frame(min = r[[1]], max = r[[2]]))     }) #>      Sex     w      d min   max #> 1 Female  TRUE   bray   0     1 #> 2 Female FALSE   bray   0     1 #> 3 Female  TRUE euclid 123 17185 #> 4 Female FALSE euclid   3    12 #> 5   Male  TRUE   bray   0     1 #> 6   Male FALSE   bray   0     1 #> 7   Male  TRUE euclid 292 11855 #> 8   Male FALSE euclid   5    14"},{"path":"https://cmmr.github.io/rbiom/reference/biom_build.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a BIOM object. — biom_build","title":"Create a BIOM object. — biom_build","text":"Create BIOM object.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/biom_build.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a BIOM object. — biom_build","text":"","code":"biom_build(   counts,   metadata = NULL,   taxonomy = NULL,   tree = NULL,   sequences = NULL,   id = NULL,   comment = NULL )"},{"path":"https://cmmr.github.io/rbiom/reference/biom_build.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a BIOM object. — biom_build","text":"counts count data numeric matrix, column names sample names row names OTU names. BIOM object filename/URL compatible read_biom() also acceptable. metadata data.frame sample names row names metadata names column names. filename/URL comma- tab-separated data. taxonomy character matrix OTU names row names. filename/URL comma- tab-separated data. tree phylo object tip labels matching OTU names. (E.g. read_tree()). filename/URL newick formatted data. sequences named character vector DNA sequences. filename/URL fasta format data. (Currently used rbiom.) id, comment character vector length one text user's choosing.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/biom_build.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a BIOM object. — biom_build","text":"BIOM class object containing parsed data. object can treated list following named elements: $counts -  numeric slam sparse matrix observation counts. Taxa (OTUs) rows samples columns. $metadata -  data frame containing embedded metadata. Row names sample IDs. $taxonomy -  Character matrix taxonomic names, given. Row names taxa (OTU) IDs. Column rows named Kingdom, Phylum, Class, Order, Family, Genus, Species, Strain, TaxLvl.1, TaxLvl.2, ... , TaxLvl.N 8 levels taxonomy encoded biom file. $phylogeny -  object class phylo defining phylogenetic relationships taxa. Although official specification BIOM includes phylogenetic trees BIOM version 2.1, BIOM version 1.0 file includes phylogeny entry newick data, loaded well. ape package additional functions working phylo objects. $sequences -  named character vector, names taxonomic identifiers values sequences represent. values part official BIOM specification, read written defined. $info -  list attributes defined BIOM file, id, type, format, format_url, generated_by, date, matrix_type, matrix_element_type, Comment, shape. metadata, taxonomy, phylogeny optional components BIOM file specification therefore empty returned object provided BIOM file.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/biom_build.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a BIOM object. — biom_build","text":"","code":"library(rbiom)          biom <- sample_select(hmp50, 1:5)          # Save components to separate files.     ct  <- write_counts(biom, tempfile())     md  <- write_metadata(biom, tempfile())     tax <- write_taxonomy(biom, tempfile())     tre <- write_tree(biom, tempfile())     fas <- write_fasta(biom, tempfile())          # Peek at the file structures.     cat(readLines(ct, n = 2L),  '', sep=\"\\n\") #> #OTU ID\tHMP01\tHMP02\tHMP03\tHMP04\tHMP05 #> UncO4101\t1\t5\t6\t18\t5 #>      cat(readLines(md, n = 2L),  '', sep=\"\\n\") #> SampleID\tAge\tBMI\tBody Site\tSex  #> HMP01\t22\t20\tBuccal mucosa\tFemale #>      cat(readLines(tax, n = 2L), '', sep=\"\\n\") #> UncO4101\tBacteria\tFirmicutes\tClostridia\tClostridiales\tLachnospiraceae\tLachnoanaerobaculum #> Unc96922\tBacteria\tBacteroidetes\tFlavobacteriia\tFlavobacteriales\tFlavobacteriaceae\tCapnocytophaga #>      cat(readChar(tre, nchars = 50L), \"\\n\\n\") #> ((((((((((Unc92490:0.05748,Unc02pjp:0.01233):0.007  #>      cat(readChar(fas, nchars = 50L), \"\\n\\n\") #> >UncO4101  #> TGGGGAATATTGGACAATGGGGGAAACCCTGATCCAGCG  #>           # Re-assemble the BIOM object.     biom <- biom_build(ct, md, tax, tre, id = \"New BIOM\")     print(biom) #> New BIOM (2023-09-29) #>       5 Samples:  (HMP01, HMP02, HMP03, HMP04, and HMP05) #>     132 Taxa:     (UncO4101, Unc96922, Unc02k4w, Unc1721...) #>       6 Ranks:    (Kingdom, Phylum, Class, Order, Family...) #>       4 Metadata: (Age, BMI, Body Site, and Sex) #>         Tree:     Present #>           # Remove temporary files.     invisible(file.remove(c(ct, md, tax, fas, tre)))"},{"path":"https://cmmr.github.io/rbiom/reference/biom_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set a BIOM object's id or comment. — biom_id","title":"Get or set a BIOM object's id or comment. — biom_id","text":"BIOM specification includes id comment fields free-form text.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/biom_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set a BIOM object's id or comment. — biom_id","text":"","code":"biom_id(biom)  biom_id(x) <- value  biom_comment(biom)  biom_comment(x) <- value"},{"path":"https://cmmr.github.io/rbiom/reference/biom_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set a BIOM object's id or comment. — biom_id","text":"biom, x BIOM object, returned read_biom(). value identifier add (character vector length 1).","code":""},{"path":"https://cmmr.github.io/rbiom/reference/biom_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set a BIOM object's id or comment. — biom_id","text":"length 1 character vector.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/biom_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set a BIOM object's id or comment. — biom_id","text":"","code":"library(rbiom)      biom <- hmp50          biom_id(biom) #> [1] \"Human Microbiome Project - 50 Sample Demo\"     biom_id(biom) <- \"My new title/id\"     biom_id(biom) #> [1] \"My new title/id\"          biom_comment(biom) #> [1] \"\"     biom_comment(biom) <- \"A description of this study\"     biom_comment(biom) #> [1] \"A description of this study\""},{"path":"https://cmmr.github.io/rbiom/reference/biom_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get BIOM object's miscellaneous information. — biom_info","title":"Get BIOM object's miscellaneous information. — biom_info","text":"Get BIOM object's miscellaneous information.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/biom_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get BIOM object's miscellaneous information. — biom_info","text":"","code":"biom_info(biom)"},{"path":"https://cmmr.github.io/rbiom/reference/biom_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get BIOM object's miscellaneous information. — biom_info","text":"biom BIOM object, returned read_biom().","code":""},{"path":"https://cmmr.github.io/rbiom/reference/biom_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get BIOM object's miscellaneous information. — biom_info","text":"list top-level metadata biom.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/biom_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get BIOM object's miscellaneous information. — biom_info","text":"","code":"library(rbiom)     biom_info(hmp50) #> $id #> [1] \"Human Microbiome Project - 50 Sample Demo\" #>  #> $type #> [1] \"OTU table\" #>  #> $format #> [1] \"1.0.0\" #>  #> $format_url #> [1] \"http://biom-format.org\" #>  #> $generated_by #> [1] \"rbiom 1.0.2.9026\" #>  #> $date #> [1] \"2021-07-01T18:48:45Z\" #>  #> $matrix_type #> [1] \"sparse\" #>  #> $matrix_element_type #> [1] \"int\" #>  #> $shape #> [1] 490  50 #>  #> $comment #> [1] \"\" #>"},{"path":"https://cmmr.github.io/rbiom/reference/biom_merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine several BIOM datasets into one. — biom_merge","title":"Combine several BIOM datasets into one. — biom_merge","text":"WARNING: generally ill-advised merge BIOM datasets, OTUs mappings dependent upstream clustering equivalent BIOM files.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/biom_merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine several BIOM datasets into one. — biom_merge","text":"","code":"biom_merge(...)"},{"path":"https://cmmr.github.io/rbiom/reference/biom_merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine several BIOM datasets into one. — biom_merge","text":"... number BIOM objects (e.g. read_biom()), lists BIOM objects, valid arguments src parameter read_biom() (instance file names).","code":""},{"path":"https://cmmr.github.io/rbiom/reference/biom_merge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine several BIOM datasets into one. — biom_merge","text":"BIOM class object containing parsed data. object can treated list following named elements: $counts -  numeric slam sparse matrix observation counts. Taxa (OTUs) rows samples columns. $metadata -  data frame containing embedded metadata. Row names sample IDs. $taxonomy -  Character matrix taxonomic names, given. Row names taxa (OTU) IDs. Column rows named Kingdom, Phylum, Class, Order, Family, Genus, Species, Strain, TaxLvl.1, TaxLvl.2, ... , TaxLvl.N 8 levels taxonomy encoded biom file. $phylogeny -  object class phylo defining phylogenetic relationships taxa. Although official specification BIOM includes phylogenetic trees BIOM version 2.1, BIOM version 1.0 file includes phylogeny entry newick data, loaded well. ape package additional functions working phylo objects. $sequences -  named character vector, names taxonomic identifiers values sequences represent. values part official BIOM specification, read written defined. $info -  list attributes defined BIOM file, id, type, format, format_url, generated_by, date, matrix_type, matrix_element_type, Comment, shape. metadata, taxonomy, phylogeny optional components BIOM file specification therefore empty returned object provided BIOM file.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/biom_merge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine several BIOM datasets into one. — biom_merge","text":"","code":"library(rbiom)          b1 <- sample_select(hmp50, 1:4)     b2 <- sample_select(hmp50, 5:8)          biom <- biom_merge(b1, b2)     print(biom) #> Merged BIOM (2023-09-29) #>       8 Samples:  (HMP01, HMP02, HMP03, HMP04, HMP05, HM...) #>     168 Taxa:     (UncO4101, Unc96922, Unc02k4w, Unc1721...) #>       6 Ranks:    (Kingdom, Phylum, Class, Order, Family...) #>       4 Metadata: (Age, BMI, Body Site, and Sex) #>         Tree:     Absent #>           otu_tree(biom) <- otu_tree(hmp50)     print(biom) #> Merged BIOM (2023-09-29) #>       8 Samples:  (HMP01, HMP02, HMP03, HMP04, HMP05, HM...) #>     168 Taxa:     (UncO4101, Unc96922, Unc02k4w, Unc1721...) #>       6 Ranks:    (Kingdom, Phylum, Class, Order, Family...) #>       4 Metadata: (Age, BMI, Body Site, and Sex) #>         Tree:     Present #>"},{"path":"https://cmmr.github.io/rbiom/reference/biom_repair.html","id":null,"dir":"Reference","previous_headings":"","what":"Run after manually editing a BIOM object's content. — biom_repair","title":"Run after manually editing a BIOM object's content. — biom_repair","text":"Run manually editing BIOM object's content.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/biom_repair.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run after manually editing a BIOM object's content. — biom_repair","text":"","code":"biom_repair(biom, prune = TRUE, fast = FALSE)"},{"path":"https://cmmr.github.io/rbiom/reference/biom_repair.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run after manually editing a BIOM object's content. — biom_repair","text":"biom BIOM object repair. prune Remove taxa samples zero observations. (Default: TRUE) fast subsetting phylogenetic tree sequences skipped? slow steps often necessary. (Default: FALSE)","code":""},{"path":"https://cmmr.github.io/rbiom/reference/biom_repair.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run after manually editing a BIOM object's content. — biom_repair","text":"BIOM object.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/blply.html","id":null,"dir":"Reference","previous_headings":"","what":"Split BIOM by metadata, apply function, and return results in a list. — blply","title":"Split BIOM by metadata, apply function, and return results in a list. — blply","text":"Calls plyr::dlply internally.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/blply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split BIOM by metadata, apply function, and return results in a list. — blply","text":"","code":"blply(biom, vars, FUN, ..., iters = list(), prefix = FALSE, fast = TRUE)"},{"path":"https://cmmr.github.io/rbiom/reference/blply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split BIOM by metadata, apply function, and return results in a list. — blply","text":"biom BIOM object, returned read_biom(). Technically accepts types objects, BIOM objects allow using vars option, . vars character vector metadata fields. unique combination values columns used create subsetted BIOM object pass FUN. NULL, biom passed FUN unaltered. Unambiguous abbreviations metadata fields also accepted. FUN function execute BIOM subset. FUN may return object, returned named list. ... Additional arguments pass FUN. iters named list values pass FUN. Unlike ..., iterated combinations. Default: list() prefix TRUE, prefixes names iters '.' split_labels attribute returned object. Default: FALSE fast TRUE (default), subsetted BIOM objects still contain full taxa table phylogenetic tree. Set fast = FALSE run slow steps subsetting elements well.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/blply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split BIOM by metadata, apply function, and return results in a list. — blply","text":"list function outputs.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/blply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split BIOM by metadata, apply function, and return results in a list. — blply","text":"","code":"library(rbiom)          blply(hmp50, \"Sex\", n_samples) #> $Female #> [1] 30 #>  #> $Male #> [1] 20 #>  #> attr(,\"split_type\") #> [1] \"data.frame\" #> attr(,\"split_labels\") #>      Sex #> 1 Female #> 2   Male          blply(hmp50, c(\"Body Site\", \"Sex\"), function (b) {       ad <- adiv_table(b, adiv = \"all\")[,c(\".Shannon\", \".Simpson\")]       apply(ad, 2L, mean)     }) #> $`Female.Anterior nares` #>  .Shannon  .Simpson  #> 1.4318071 0.6814534  #>  #> $`Female.Buccal mucosa` #>  .Shannon  .Simpson  #> 1.1739844 0.4080621  #>  #> $`Female.Mid vagina` #>  .Shannon  .Simpson  #> 0.4070774 0.1670592  #>  #> $Female.Saliva #>  .Shannon  .Simpson  #> 2.9304968 0.8934531  #>  #> $Female.Stool #>  .Shannon  .Simpson  #> 2.4288307 0.8496172  #>  #> $`Male.Anterior nares` #> .Shannon .Simpson  #> 1.505313 0.665006  #>  #> $`Male.Buccal mucosa` #>  .Shannon  .Simpson  #> 1.7128815 0.6016869  #>  #> $Male.Saliva #> .Shannon .Simpson  #> 3.171852 0.913298  #>  #> $Male.Stool #>  .Shannon  .Simpson  #> 2.5126148 0.8347696  #>  #> attr(,\"split_type\") #> [1] \"data.frame\" #> attr(,\"split_labels\") #>      Sex      Body Site #> 1 Female Anterior nares #> 2 Female  Buccal mucosa #> 3 Female     Mid vagina #> 4 Female         Saliva #> 5 Female          Stool #> 6   Male Anterior nares #> 7   Male  Buccal mucosa #> 8   Male         Saliva #> 9   Male          Stool          iters <- list(w = c(TRUE, FALSE), d = c(\"bray\", \"euclid\"))     blply(hmp50, \"Sex\", iters = iters, function (b, w, d) {       r <- range(bdiv_distmat(biom = b, bdiv = d, weighted = w))       round(data.frame(min = r[[1]], max = r[[2]]))     }) #> $Female.1 #>   min max #> 1   0   1 #>  #> $Female.2 #>   min max #> 1   0   1 #>  #> $Female.3 #>   min   max #> 1 123 17185 #>  #> $Female.4 #>   min max #> 1   3  12 #>  #> $Male.1 #>   min max #> 1   0   1 #>  #> $Male.2 #>   min max #> 1   0   1 #>  #> $Male.3 #>   min   max #> 1 292 11855 #>  #> $Male.4 #>   min max #> 1   5  14 #>  #> attr(,\"split_labels\") #>      Sex     w      d #> 1 Female  TRUE   bray #> 2 Female FALSE   bray #> 3 Female  TRUE euclid #> 4 Female FALSE euclid #> 5   Male  TRUE   bray #> 6   Male FALSE   bray #> 7   Male  TRUE euclid #> 8   Male FALSE euclid"},{"path":"https://cmmr.github.io/rbiom/reference/convert_from_phyloseq.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a phyloseq object to an rbiom BIOM object. — convert_from_phyloseq","title":"Convert a phyloseq object to an rbiom BIOM object. — convert_from_phyloseq","text":"Convert phyloseq object rbiom BIOM object.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/convert_from_phyloseq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a phyloseq object to an rbiom BIOM object. — convert_from_phyloseq","text":"","code":"convert_from_phyloseq(phy)"},{"path":"https://cmmr.github.io/rbiom/reference/convert_from_phyloseq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a phyloseq object to an rbiom BIOM object. — convert_from_phyloseq","text":"phy phyloseq object.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/convert_from_phyloseq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a phyloseq object to an rbiom BIOM object. — convert_from_phyloseq","text":"BIOM object.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/convert_from_phyloseq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a phyloseq object to an rbiom BIOM object. — convert_from_phyloseq","text":"","code":"if (FALSE) {     library(rbiom)          fp   <- system.file(\"extdata\", \"rich_sparse_otu_table.biom\", package=\"phyloseq\")     phy  <- phyloseq::import_biom(fp)     biom <- convert_from_phyloseq(phy)  }"},{"path":"https://cmmr.github.io/rbiom/reference/distmat_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Run statistics on a distance matrix vs a categorical or numeric variable. — distmat_stats","title":"Run statistics on a distance matrix vs a categorical or numeric variable. — distmat_stats","text":"Run statistics distance matrix vs categorical numeric variable.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/distmat_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run statistics on a distance matrix vs a categorical or numeric variable. — distmat_stats","text":"","code":"distmat_stats(   dm,   groups,   test = \"adonis2\",   seed = 0,   permutations = 999,   p.adj = \"fdr\" )"},{"path":"https://cmmr.github.io/rbiom/reference/distmat_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run statistics on a distance matrix vs a categorical or numeric variable. — distmat_stats","text":"dm distance matrix dist object, list dist objects. groups named vector grouping values. names correspond attr(dm, 'Labels'). test name function vegan R package use. Options : \"adonis2\" \"mrpp\". Non-ambiguous abbreviations function names also accepted. Default: \"adonis2\" seed Random seed permutations. Default: 0 permutations Number random permutations use. Default: 999 p.adj Method use multiple comparisons adjustment p-values. Run p.adjust.methods list available options. Default: \"fdr\".","code":""},{"path":"https://cmmr.github.io/rbiom/reference/distmat_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run statistics on a distance matrix vs a categorical or numeric variable. — distmat_stats","text":"data.frame summary statistics vegan::permustats(). columns : stat -  observed statistic. mrpp, overall weighted mean group mean distances. z -  difference observed statistic mean permutations divided standard deviation permutations (also known z-values). Evaluated permuted values without observed statistic. p.val -  Include specified metadata columns. adj.p -  P-value correcting false discovery rate p.adj method. test -  test p.adj methods used.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/distmat_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run statistics on a distance matrix vs a categorical or numeric variable. — distmat_stats","text":"","code":"library(rbiom)          biom <- sample_select(hmp50, 1:10)     dm   <- bdiv_distmat(biom, 'unifrac')     distmat_stats(dm, groups = sample_metadata(biom, 'Body Site')) #>   .stat .z .p.val .adj.p        .test #> 1  9.27 11  0.001  0.001 adonis2; fdr     distmat_stats(dm, groups = sample_metadata(biom, 'Age')) #>   .stat   .z .p.val .adj.p        .test #> 1  4.13 3.56  0.012  0.012 adonis2; fdr"},{"path":"https://cmmr.github.io/rbiom/reference/embed_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Wraps R code with Markdown syntax highlighting. — embed_code","title":"Wraps R code with Markdown syntax highlighting. — embed_code","text":"Wraps R code Markdown syntax highlighting.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/embed_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wraps R code with Markdown syntax highlighting. — embed_code","text":"","code":"embed_code(x)"},{"path":"https://cmmr.github.io/rbiom/reference/embed_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wraps R code with Markdown syntax highlighting. — embed_code","text":"x R code.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/embed_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wraps R code with Markdown syntax highlighting. — embed_code","text":"Markdown-compatible syntax highlighted code block.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/embed_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wraps R code with Markdown syntax highlighting. — embed_code","text":"","code":"library(rbiom)     p <- adiv_boxplot(hmp50, color.by = \"Body Site\")     attr(p, 'cmd') %>% embed_code() %>% cat(\"\\n\\n\") #> ~~~~ {.R} #> ggplot(data) + #>   geom_rect( #>     mapping = aes(xmin = -Inf, xmax = Inf, ymin = 4, ymax = Inf),  #>     color   = NA,  #>     fill    = \"white\" ) + #>   geom_bar( #>     mapping  = aes(x = .all, y = .y, color = `Body Site`, fill = `Body Site`),  #>     stat     = \"summary\",  #>     position = position_dodge(width = 0.8),  #>     width    = 0.7,  #>     alpha    = 0.6,  #>     fun      = \"mean\" ) + #>   ggbeeswarm::geom_quasirandom( #>     mapping     = aes(x = .all, y = .y, group = `Body Site`),  #>     dodge.width = 0.8,  #>     alpha       = 0.4,  #>     color       = \"black\",  #>     size        = 1.14,  #>     stroke      = 0 ) + #>   geom_linerange( #>     mapping  = aes(x = .all, y = .y, ymin = .ymin, ymax = .ymax, color = `Body Site`),  #>     data     = ~attr(., \"vline\"),  #>     position = position_dodge(width = 0.8) ) + #>   geom_segment( #>     mapping = aes(x = .x, xend = .xend, y = .y, yend = .yend),  #>     data    = ~attr(., \"stat_brackets\") ) + #>   geom_text( #>     mapping = aes(x = .x, y = .y, label = .label),  #>     data    = ~attr(., \"stat_labels\"),  #>     parse   = TRUE,  #>     hjust   = 0.5,  #>     size    = 3,  #>     vjust   = 0 ) + #>   labs( #>     subtitle = \"Kruskal-Wallis p-values FDR-adjusted as per Benjamini & Hochberg (1995).\",  #>     y        = \"Shannon Diversity\" ) + #>   scale_color_manual(values = c(\"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\", \"#0072B2\")) + #>   scale_fill_manual(values = c(\"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\", \"#0072B2\")) + #>   scale_x_discrete() + #>   scale_y_continuous( #>     breaks = c(0, 1, 2, 3, 4),  #>     expand = c(0.02, 0, 0.08, 0) ) + #>   theme_bw() + #>   theme( #>     text               = element_text(size = 14),  #>     axis.title.x       = element_blank(),  #>     axis.text.x        = element_blank(),  #>     axis.ticks.x       = element_blank(),  #>     panel.grid.major.x = element_blank(),  #>     plot.subtitle      = element_text(size = 9) ) #> ~~~~ #>  #>   #>"},{"path":"https://cmmr.github.io/rbiom/reference/embed_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts a data.frame to a download link. — embed_csv","title":"Converts a data.frame to a download link. — embed_csv","text":"Converts data.frame download link.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/embed_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts a data.frame to a download link. — embed_csv","text":"","code":"embed_csv(x, label = \"Download Data (CSV)\", filename = \"data.csv\", ...)"},{"path":"https://cmmr.github.io/rbiom/reference/embed_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts a data.frame to a download link. — embed_csv","text":"x object coercable data.frame. filename Default filename download . Default: \"data.csv\". ... Additional arguments pass write.csv(). title Text/HTML label link. Default: \"Download Data (CSV)\".","code":""},{"path":"https://cmmr.github.io/rbiom/reference/embed_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts a data.frame to a download link. — embed_csv","text":"HTML string object encoded base64.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/embed_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts a data.frame to a download link. — embed_csv","text":"","code":"library(rbiom)          biom <- sample_rarefy(hmp50)     p    <- bdiv_ord_plot(biom, color.by=\"Sex\")          attr(p, 'stats') %>% embed_csv(row.names=FALSE) %>% cat(\"\\n\\n\") #> <a download=\"data.csv\" href=\"data:text/csv;base64,Ii53ZWlnaHRlZCIsIi5iZGl2IiwiLnN0YXQiLCIueiIsIi5wLnZhbCIsIi5hZGoucCIsIi50ZXN0IgpUUlVFLCJCcmF5LUN1cnRpcyIsMS42LDEuMzQsMC4wODYsMC4wODYsImFkb25pczI7IGZkciI=\">Download Data (CSV)<\/a>  #>"},{"path":"https://cmmr.github.io/rbiom/reference/hmp50.html","id":null,"dir":"Reference","previous_headings":"","what":"Human Microbiome Project - 50 sample demo dataset. — hmp50","title":"Human Microbiome Project - 50 sample demo dataset. — hmp50","text":"Human Microbiome Project - 50 sample demo dataset.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/hmp50.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Human Microbiome Project - 50 sample demo dataset. — hmp50","text":"","code":"hmp50"},{"path":"https://cmmr.github.io/rbiom/reference/hmp50.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Human Microbiome Project - 50 sample demo dataset. — hmp50","text":"BIOM object 50 samples. Includes metadata, taxonomy, phylogeny, sequences. Sex - Male Female Body Site - Buccal mucosa, Saliva, Anterior nares, Stool, Mid vagina Age - 21 - 40 BMI - 19 - 32","code":""},{"path":"https://cmmr.github.io/rbiom/reference/hmp50.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Human Microbiome Project - 50 sample demo dataset. — hmp50","text":"https://portal.hmpdacc.org","code":""},{"path":"https://cmmr.github.io/rbiom/reference/n_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Report the number of samples, otus, or ranks in a BIOM. — n_samples","title":"Report the number of samples, otus, or ranks in a BIOM. — n_samples","text":"Report number samples, otus, ranks BIOM.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/n_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report the number of samples, otus, or ranks in a BIOM. — n_samples","text":"","code":"n_samples(biom)  n_otus(biom)  n_ranks(biom)"},{"path":"https://cmmr.github.io/rbiom/reference/n_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report the number of samples, otus, or ranks in a BIOM. — n_samples","text":"biom BIOM object, returned read_biom().","code":""},{"path":"https://cmmr.github.io/rbiom/reference/n_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report the number of samples, otus, or ranks in a BIOM. — n_samples","text":"number samples, otus, ranks present.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/n_samples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report the number of samples, otus, or ranks in a BIOM. — n_samples","text":"","code":"library(rbiom)          n_samples(hmp50) #> [1] 50     n_otus(hmp50) #> [1] 490     n_ranks(hmp50) #> [1] 6"},{"path":"https://cmmr.github.io/rbiom/reference/otu_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set the abundance counts. — otu_matrix","title":"Get or set the abundance counts. — otu_matrix","text":"Get set abundance counts.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/otu_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set the abundance counts. — otu_matrix","text":"","code":"otu_matrix(biom)  otu_matrix(x) <- value"},{"path":"https://cmmr.github.io/rbiom/reference/otu_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set the abundance counts. — otu_matrix","text":"biom, x BIOM object, returned read_biom(). value numeric matrix. Rownames colnames must identical current otu_matrix() value.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/otu_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set the abundance counts. — otu_matrix","text":"numeric matrix samples row names, OTU identifiers column names.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/otu_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set the abundance counts. — otu_matrix","text":"","code":"library(rbiom)          biom <- hmp50     taxa <- c('Unc53100', 'Unc00c7g', 'Unc25731')          otu_matrix(biom)[taxa,1:5] #>          HMP01 HMP02 HMP03 HMP04 HMP05 #> Unc53100  1083   543   301   223  2672 #> Unc00c7g     0   152   239   162    89 #> Unc25731     3   126   171    31    54          biom <- sample_rarefy(biom, 100)     otu_matrix(biom)[taxa,1:5] #>          HMP01 HMP02 HMP03 HMP04 HMP05 #> Unc53100    72    42    18     8    74 #> Unc00c7g     0    12    20    12     2 #> Unc25731     0     9    12     0     2          otu_matrix(biom) <- otu_matrix(biom) / 100     otu_matrix(biom)[taxa,1:5] #>          HMP01 HMP02 HMP03 HMP04 HMP05 #> Unc53100  0.72  0.42  0.18  0.08  0.74 #> Unc00c7g  0.00  0.12  0.20  0.12  0.02 #> Unc25731  0.00  0.09  0.12  0.00  0.02"},{"path":"https://cmmr.github.io/rbiom/reference/otu_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set the OTU names. — otu_names","title":"Get or set the OTU names. — otu_names","text":"Get set OTU names.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/otu_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set the OTU names. — otu_names","text":"","code":"otu_names(biom)  otu_names(x) <- value"},{"path":"https://cmmr.github.io/rbiom/reference/otu_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set the OTU names. — otu_names","text":"biom, x BIOM object, returned read_biom(). value character vector new OTU names.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/otu_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set the OTU names. — otu_names","text":"character vector taxa names biom.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/otu_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set the OTU names. — otu_names","text":"","code":"library(rbiom)           biom <- hmp50          head(otu_names(biom)) #> [1] \"UncO2713\" \"UncO4101\" \"AnmMass2\" \"PreBivi6\" \"CprSpeci\" \"Unc96922\"          otu_names(biom) <- sub('Unc', 'Uncultured_', otu_names(biom))     head(otu_names(biom)) #> [1] \"Uncultured_O2713\" \"Uncultured_O4101\" \"AnmMass2\"         \"PreBivi6\"         #> [5] \"CprSpeci\"         \"Uncultured_96922\""},{"path":"https://cmmr.github.io/rbiom/reference/otu_sequences.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set the nucleotide sequences associated with each OTU. — otu_sequences","title":"Get or set the nucleotide sequences associated with each OTU. — otu_sequences","text":"Get set nucleotide sequences associated OTU.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/otu_sequences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set the nucleotide sequences associated with each OTU. — otu_sequences","text":"","code":"otu_sequences(biom)  otu_sequences(x) <- value"},{"path":"https://cmmr.github.io/rbiom/reference/otu_sequences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set the nucleotide sequences associated with each OTU. — otu_sequences","text":"biom, x BIOM object, returned read_biom(). value named character vector. Names must match otu_names(x).","code":""},{"path":"https://cmmr.github.io/rbiom/reference/otu_sequences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set the nucleotide sequences associated with each OTU. — otu_sequences","text":"named character vector sequences biom. data present, returns NULL.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/otu_sequences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set the nucleotide sequences associated with each OTU. — otu_sequences","text":"","code":"library(rbiom)           substr(otu_sequences(hmp50)[1:4], 1, 10) #>     UncO2713     UncO4101     AnmMass2     PreBivi6  #> \"TGAGGAATAT\" \"TGGGGAATAT\" \"TGGGGAATAT\" \"TGAGGAATAT\"       if (FALSE) {     # Write to a compressed fasta file in the temporary directory:     seqs <- otu_sequences(hmp50)     conn <- bzfile(file.path(tempdir(), \"Sequences.fa.bz2\"), \"w\")     cat(sprintf(\">%s\\n%s\", names(seqs), seqs), file=conn, sep=\"\\n\")     close(conn)          # You can also use the write_fasta function for this task:     write_fasta(hmp50, file.path(tempdir(), \"Sequences.fa.gz\"))          # Set/replace the sequences     biom <- read_biom('path/to/file.biom')     otu_sequences(biom) <- read_fasta('path/to/sequences.fa')     otu_sequences(biom) <- c(OTU1 = 'ATCGGGTA', OTU2 = 'GGCATTAGC') }"},{"path":"https://cmmr.github.io/rbiom/reference/otu_taxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set the taxonomy table. — otu_taxonomy","title":"Get or set the taxonomy table. — otu_taxonomy","text":"Get set taxonomy table.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/otu_taxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set the taxonomy table. — otu_taxonomy","text":"","code":"otu_taxonomy(biom, ranks = NULL, unc = \"asis\")  otu_taxonomy(x) <- value"},{"path":"https://cmmr.github.io/rbiom/reference/otu_taxonomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set the taxonomy table. — otu_taxonomy","text":"biom, x BIOM object, returned read_biom(). ranks taxonomic ranks return matrix, NULL . Default: NULL unc handle unclassified, uncultured, similarly ambiguous taxa names. Default: \"asis\" \"asis\" -  check/modify taxa names. \"singly\" -  Replace \"Unc. \". \"grouped\" -  Replace \"Unc. \". \"drop\" -  include returned matrix. value character matrix rownames otu_names(x). rownames taxa names, matrix subset. May also character vector length one file URL matrix saved either comma- tab-separated format.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/otu_taxonomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set the taxonomy table. — otu_taxonomy","text":"character matrix taxa/OTU IDs row names taxa ranks column names. 'OTU' column always added last column matches row names.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/otu_taxonomy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set the taxonomy table. — otu_taxonomy","text":"","code":"library(rbiom)          otu_taxonomy(hmp50)[1:4,] #>          Kingdom    Phylum           Class            Order             #> UncO2713 \"Bacteria\" \"Bacteroidetes\"  \"Bacteroidia\"    \"Bacteroidales\"   #> UncO4101 \"Bacteria\" \"Firmicutes\"     \"Clostridia\"     \"Clostridiales\"   #> AnmMass2 \"Bacteria\" \"Actinobacteria\" \"Actinobacteria\" \"Actinomycetales\" #> PreBivi6 \"Bacteria\" \"Bacteroidetes\"  \"Bacteroidia\"    \"Bacteroidales\"   #>          Family             Genus                 OTU        #> UncO2713 \"Rikenellaceae\"    \"Alistipes\"           \"UncO2713\" #> UncO4101 \"Lachnospiraceae\"  \"Lachnoanaerobaculum\" \"UncO4101\" #> AnmMass2 \"Actinomycetaceae\" \"Actinomyces\"         \"AnmMass2\" #> PreBivi6 \"Prevotellaceae\"   \"Prevotella\"          \"PreBivi6\"     otu_taxonomy(hmp50, c(\"Family\", \"Genus\"))[1:4,] #>          Family             Genus                 #> UncO2713 \"Rikenellaceae\"    \"Alistipes\"           #> UncO4101 \"Lachnospiraceae\"  \"Lachnoanaerobaculum\" #> AnmMass2 \"Actinomycetaceae\" \"Actinomyces\"         #> PreBivi6 \"Prevotellaceae\"   \"Prevotella\"              head(otu_taxonomy(hmp50, \"Genus\")[,]) #>              UncO2713              UncO4101              AnmMass2  #>           \"Alistipes\" \"Lachnoanaerobaculum\"         \"Actinomyces\"  #>              PreBivi6              CprSpeci              Unc96922  #>          \"Prevotella\"         \"Barnesiella\"      \"Capnocytophaga\"           # Sometimes taxonomic names are incomplete     otu_taxonomy(hmp50)[c(53,107,139), 2:6] #>          Phylum            Class        Order            Family      Genus     #> GemAsacc \"Firmicutes\"      \"Bacilli\"    \"Bacillales\"     \"Family XI\" \"Gemella\" #> GcbBacte \"Gracilibacteria\" \"c\"          \"o\"              \"f\"         \"g\"       #> Unc58411 \"Tenericutes\"     \"Mollicutes\" \"Mollicutes RF9\" \"f\"         \"g\"                # rbiom can insert more descriptive placeholders     otu_taxonomy(hmp50, unc = \"singly\")[c(53,107,139), 3:6] #>          Class           Order            Family          Genus           #> GemAsacc \"Bacilli\"       \"Bacillales\"     \"Bacillales XI\" \"Gemella\"       #> GcbBacte \"Unc. GcbBacte\" \"Unc. GcbBacte\"  \"Unc. GcbBacte\" \"Unc. GcbBacte\" #> Unc58411 \"Mollicutes\"    \"Mollicutes RF9\" \"Unc. Unc58411\" \"Unc. Unc58411\"     otu_taxonomy(hmp50, unc = \"grouped\")[c(53,107,139), 4:6] #>          Order                   Family                  #> GemAsacc \"Bacillales\"            \"Bacillales XI\"         #> GcbBacte \"Unc.  Gracilibacteria\" \"Unc.  Gracilibacteria\" #> Unc58411 \"Mollicutes RF9\"        \"Unc.  Mollicutes RF9\"  #>          Genus                   #> GemAsacc \"Gemella\"               #> GcbBacte \"Unc.  Gracilibacteria\" #> Unc58411 \"Unc.  Mollicutes RF9\""},{"path":"https://cmmr.github.io/rbiom/reference/otu_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set the phylogenetic tree. — otu_tree","title":"Get or set the phylogenetic tree. — otu_tree","text":"Get set phylogenetic tree.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/otu_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set the phylogenetic tree. — otu_tree","text":"","code":"otu_tree(biom)  otu_tree(x) <- value"},{"path":"https://cmmr.github.io/rbiom/reference/otu_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set the phylogenetic tree. — otu_tree","text":"biom, x BIOM object, returned read_biom(). value phylo class object tip.labels matching otu_names(x). tip.labels taxa names, tree subset.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/otu_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set the phylogenetic tree. — otu_tree","text":"phylo class object tree biom.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/otu_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set the phylogenetic tree. — otu_tree","text":"","code":"if (FALSE) {     library(rbiom)          biom <- hmp50     otu_tree(biom) <- read_tree('path/to/newick.tre') }"},{"path":"https://cmmr.github.io/rbiom/reference/plot_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a heatmap with tracks and dendrograms from any matrix. — plot_heatmap","title":"Create a heatmap with tracks and dendrograms from any matrix. — plot_heatmap","text":"Create heatmap tracks dendrograms matrix.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/plot_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a heatmap with tracks and dendrograms from any matrix. — plot_heatmap","text":"","code":"plot_heatmap(   mtx,   grid = list(label = \"Grid Value\", colors = \"imola\"),   tracks = NULL,   label = TRUE,   label_size = NULL,   rescale = \"none\",   trees = TRUE,   clust = \"complete\",   dist = \"euclidean\",   ratio = 1,   tree_height = NULL,   track_height = NULL,   legend = \"right\",   xlab.angle = \"auto\",   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/plot_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a heatmap with tracks and dendrograms from any matrix. — plot_heatmap","text":"mtx numeric matrix named rows columns. grid Color palette name, list entries label, colors, range, bins, na.color, /guide. See Track Definitions section details. Default: list(label = \"Grid Value\", colors = \"imola\"). tracks List track definitions. See details . Default: NULL. label Label matrix rows columns. can supply list logical vector length two control row labels column labels separately, example label = c(rows = TRUE, cols = FALSE), simply label = c(T, F). valid options \"rows\", \"cols\", \"\", \"bottom\", \"right\", \"none\". Default: TRUE. label_size font size use row column labels. can supply numeric vector length two control row label sizes column label sizes separately, example c(rows = 20, cols = 8), simply c(20, 8). Default: NULL, computes: pmax(8, pmin(20, 100 / dim(mtx))). rescale Rescale rows columns common min/max. Options: \"none\", \"rows\", \"cols\". Default: \"none\". trees Draw dendrogram rows (left) columns (top). can supply list logical vector length two control row tree column tree separately, example trees = c(rows = T, cols = F), simply trees = c(T, F). valid options \"rows\", \"cols\", \"\", \"left\", \"top\", \"none\". Default: TRUE. clust Clustering algorithm reordering rows columns similarity. can supply list character vector length two control row column clustering separately, example clust = c(rows = \"complete\", cols = NA), simply clust = c(\"complete\", NA). Default: \"complete\".   dist Distance algorithm use reordering rows columns similarity. can supply list character vector length two control row column clustering separately, example dist = c(rows = \"euclidean\", cols = \"maximum\"), simply dist = c(\"euclidean\", \"maximum\"). Default: \"euclidean\".   ratio Height/width ratio entire grid. Default: 1 (square). tree_height, track_height height dendrogram annotation tracks multiples (fractions) smaller dimension grid cell size. Use numeric vector length two assign c(left, top) independently. Default: NULL, computes: tree_height = sqrt(min(dim(mtx))), track_height = tree_height / 4. legend place legend. Options : \"right\" \"bottom\". Default: \"right\". xlab.angle Angle labels bottom plot. Options \"auto\", 0, 30, 90. Default: \"auto\". ... Additional arguments pass ggplot2::theme(). example, labs.title = \"Plot Title\".","code":"Options are:     \\itemize{       \\item{\\code{FALSE} or \\code{NA} - }{ Disable reordering. }       \\item{An \\code{hclust} class object} { E.g. from [stats::hclust()]. }       \\item{A method name - }{ \\code{\"ward.D\"},          \\code{\"ward.D2\"}, \\code{\"single\"}, \\code{\"complete\"},          \\code{\"average\"}, \\code{\"mcquitty\"}, \\code{\"median\"}, or          \\code{\"centroid\"}. }     } Options are:     \\itemize{       \\item{A \\code{dist} class object} { E.g. from [stats::dist()] or [bdiv_distmat()]. }       \\item{A method name - }{ \\code{\"euclidean\"},          \\code{\"maximum\"}, \\code{\"manhattan\"}, \\code{\"canberra\"},          \\code{\"binary\"}, or \\code{\"minkowski\"}. }     }"},{"path":"https://cmmr.github.io/rbiom/reference/plot_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a heatmap with tracks and dendrograms from any matrix. — plot_heatmap","text":"ggplot2 plot. constructed ggplot command attached attr(,'cmd'), underlying computed data $data.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/plot_heatmap.html","id":"track-definitions","dir":"Reference","previous_headings":"","what":"Track Definitions","title":"Create a heatmap with tracks and dendrograms from any matrix. — plot_heatmap","text":"One colored tracks can placed left /top heatmap grid visualize associated metadata values. following entries track definitions understood: values -  metadata values. unnamed, order must match matrix. range -  c(min,max) use scale values. label -  Label track. Defaults name list element. side -  Options \"top\" (default) \"left\". colors -  pre-defined palette name custom set colors map . na.color -  color use NA values. bins -  Bin gradient many bins/steps. guide -  list arguments guide_colorbar() guide_legend(). built-color palettes colorblind-friendly. Categorical palette names: \"okabe\", \"carto\", \"r4\", \"polychrome\", \"tol\", \"bright\", \"light\", \"muted\", \"vibrant\", \"tableau\", \"classic\", \"alphabet\", \"tableau20\", \"kelly\", \"fishy\". Numeric palette names: \"reds\", \"oranges\", \"greens\", \"purples\", \"grays\", \"acton\", \"bamako\", \"batlow\", \"bilbao\", \"buda\", \"davos\", \"devon\", \"grayC\", \"hawaii\", \"imola\", \"lajolla\", \"lapaz\", \"nuuk\", \"oslo\", \"tokyo\", \"turku\", \"bam\", \"berlin\", \"broc\", \"cork\", \"lisbon\", \"roma\", \"tofino\", \"vanimo\", \"vik\".","code":"## Categorical ---------------------------- cat_vals = sample(c(\"Male\", \"Female\"), 10, replace = TRUE) tracks   = list('Sex' = cat_vals) tracks   = list('Sex' = list('values' = cat_vals, 'colors' = \"bright\")) tracks   = list('Sex' = list(   'values' = cat_vals,    'colors' = c('Male' = \"blue\", 'Female' = \"red\")) )  ## Numeric -------------------------------- num_vals = sample(25:40, 10, replace = TRUE) tracks   = list('Age' = num_vals) tracks   = list('Age' = list('values' = num_vals, 'colors' = \"greens\")) tracks   = list('Age' = list('values' = num_vals, 'range' = c(0,50))) tracks   = list('Age' = list(   'label'  = \"Age (Years)\",   'values' = num_vals,    'colors' = c(\"azure\", \"darkblue\", \"darkorchid\") ))  ## Multiple Tracks ------------------------ tracks = list('Sex' = cat_vals, 'Age' = num_vals) tracks = list(   list('label' = \"Sex\", values' = cat_vals, 'colors' = \"bright\"),   list('label' = \"Age\", values' = num_vals, 'colors' = \"greens\") )    plot_heatmap(matrix(sample(1:50), ncol=10), tracks = tracks)"},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/plot_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a heatmap with tracks and dendrograms from any matrix. — plot_heatmap","text":"","code":"library(rbiom)          set.seed(123)     mtx <- matrix(runif(5*8), nrow = 5, dimnames = list(LETTERS[1:5], letters[1:8]))          plot_heatmap(mtx)      plot_heatmap(mtx, grid=\"oranges\")      plot_heatmap(mtx, grid=list(colors = \"oranges\", label = \"Some %\", bins = 5))           tracks <- list(       'Number' = sample(1:ncol(mtx)),       'Person' = list(         values = factor(sample(c(\"Alice\", \"Bob\"), ncol(mtx), TRUE)),         colors = c('Alice' = \"purple\", 'Bob' = \"darkcyan\") ),       'State' = list(         side   = \"left\",         values = sample(c(\"TX\", \"OR\", \"WA\"), nrow(mtx), TRUE),         colors = \"bright\" )     )          plot_heatmap(mtx, tracks=tracks)"},{"path":"https://cmmr.github.io/rbiom/reference/print.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize the contents of a BIOM object — print","title":"Summarize the contents of a BIOM object — print","text":"Summarize contents BIOM object","code":""},{"path":"https://cmmr.github.io/rbiom/reference/print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize the contents of a BIOM object — print","text":"","code":"# S3 method for BIOM print(x, ...)"},{"path":"https://cmmr.github.io/rbiom/reference/print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize the contents of a BIOM object — print","text":"x BIOM object, returned read_biom(). ... used.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize the contents of a BIOM object — print","text":"NULL (invisibly)","code":""},{"path":"https://cmmr.github.io/rbiom/reference/print.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize the contents of a BIOM object — print","text":"","code":"library(rbiom)          print(hmp50) #> Human Microbiome Project - 50 Sample Demo (2021-07-01) #>      50 Samples:  (HMP01, HMP02, HMP03, HMP04, HMP05, HM...) #>     490 Taxa:     (UncO2713, UncO4101, AnmMass2, PreBivi...) #>       6 Ranks:    (Kingdom, Phylum, Class, Order, Family...) #>       4 Metadata: (Age, BMI, Body Site, and Sex) #>         Tree:     Present #>"},{"path":"https://cmmr.github.io/rbiom/reference/properties.html","id":null,"dir":"Reference","previous_headings":"","what":"Check specific properties of a BIOM object. — properties","title":"Check specific properties of a BIOM object. — properties","text":"Check specific properties BIOM object.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/properties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check specific properties of a BIOM object. — properties","text":"","code":"has_tree(biom)  has_sequences(biom)  is_rarefied(biom)"},{"path":"https://cmmr.github.io/rbiom/reference/properties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check specific properties of a BIOM object. — properties","text":"biom BIOM object, returned read_biom().","code":""},{"path":"https://cmmr.github.io/rbiom/reference/properties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check specific properties of a BIOM object. — properties","text":"TRUE property, FALSE otherwise.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/properties.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check specific properties of a BIOM object. — properties","text":"","code":"library(rbiom)          has_tree(hmp50) #> [1] TRUE     has_sequences(hmp50) #> [1] TRUE     is_rarefied(hmp50) #> [1] FALSE"},{"path":"https://cmmr.github.io/rbiom/reference/rare_barplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize the number of observations per sample. — rare_barplot","title":"Visualize the number of observations per sample. — rare_barplot","text":"Visualize number observations per sample.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rare_barplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize the number of observations per sample. — rare_barplot","text":"","code":"rare_barplot(   biom,   rline = TRUE,   counts = TRUE,   labels = TRUE,   trans = \"log10\",   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/rare_barplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize the number of observations per sample. — rare_barplot","text":"biom matrix, simple_triplet_matrix, BIOM object, returned read_biom(). matrices, rows columns assumed taxa samples, respectively. rline draw horizontal line plot, intended show particular rarefaction depth. Set TRUE show auto-selected rarefaction depth NULL show line. Default: TRUE. counts Display number samples reads remaining rarefying rline reads per sample. Default: TRUE. labels Show sample names bar. Default: TRUE. trans Y-axis transformation. Options \"log10\" NULL.  Default: \"log10\". ... Additional parameters pass along ggplot2 functions. Prefix parameter name either r. ensure gets passed () geom_vline. instance, r.color = \"black\" ensures vertical rarefaction line color set \"black\".","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rare_barplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize the number of observations per sample. — rare_barplot","text":"ggplot2 plot. underlying dataset attached attr(p, 'data').","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/rare_barplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize the number of observations per sample. — rare_barplot","text":"","code":"library(rbiom)          rare_barplot(hmp50, rline=TRUE)"},{"path":"https://cmmr.github.io/rbiom/reference/rare_corrplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize rarefaction curves with scatterplots and trendlines. — rare_corrplot","title":"Visualize rarefaction curves with scatterplots and trendlines. — rare_corrplot","text":"Visualize rarefaction curves scatterplots trendlines.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rare_corrplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize rarefaction curves with scatterplots and trendlines. — rare_corrplot","text":"","code":"rare_corrplot(   biom,   adiv = \"Shannon\",   depths = NULL,   layers = \"t\",   rline = TRUE,   color.by = NULL,   facet.by = NULL,   limit.by = NULL,   model = \"log\",   stats = \"emtrends\",   p.adj = \"fdr\",   ci = 95,   caption = FALSE,   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/rare_corrplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize rarefaction curves with scatterplots and trendlines. — rare_corrplot","text":"biom BIOM object, returned read_biom(). adiv One alpha diversity measures use. Options : \"OTUs\", \"Shannon\", \"Chao1\", \"Simpson\", /\"InvSimpson\". Non-ambiguous abbreviations also accepted. can use adiv=\"\" shortcut adiv=c(\"OTUs\", \"Shannon\", \"Chao1\", \"Simpson\", \"InvSimpson\") Default: \"Shannon\". depths Rarefaction depths show plot. Passed adiv_table(). default, \"multi_even\", uses heuristic pick 10 evenly spaced depths. layers \"trend\", \"scatter\". Single letter abbreviations also accepted. instance, c(\"trend\", \"scatter\") equivalent c(\"t\", \"s\") \"ts\". See vignette(\"corrplots\") examples . Default: \"t\". rline draw horizontal line plot, intended show particular rarefaction depth. Set TRUE show auto-selected rarefaction depth NULL show line. Default: NULL. color., facet., limit.Metadata columns use aesthetics partitioning. See details. Default: NULL model type trendline fit data. Options : \"lm\" (linear), \"log\" (logarithmic), \"gam\" (generalized additive). can alternatively provide list length two first element character vector length 1 naming function, second element list arguments pass function. One function's arguments must named 'formula'. example, model = list(\"stats::lm\", list(formula = y ~ x)). Default: \"log\". stats statistic display plot. Options : \"fit\" -  well model fit data? \"terms\" -  strongly 'x' influence 'y'? \"emmeans\" -  average 'y' value non-zero? \"emtrends\" -  trendline non-zero slope? \"emm_pairs\" -  means trendlines different? \"emt_pairs\" -  slopes trendlines different? \"hide\" -  show stats plot, still compute . \"none\" -  compute show statistics. Default: \"emtrends\"  Note: \"emm_pairs\" \"emt_pairs\" can calculated using color.metadata column one level.  Statistical tests run separately facet. P-values adjusted multiple comparisons considering facets together. Unless stats = \"none\", stats attached plot attr(,'stats'). p.adj Method use multiple comparisons adjustment p-values. Run p.adjust.methods list available options. Default: \"fdr\". ci confidence interval display around trendline. Default: 95. caption Display information method used trendline fitting beneath plot. Default: FALSE. ... Additional parameters pass along ggplot2 functions. Prefix parameter name either p./pt., r./v., s. ensure gets passed ()  geom_point, vline, geom_smooth, respectively. instance, p.size = 2 ensures points size set 2.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rare_corrplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize rarefaction curves with scatterplots and trendlines. — rare_corrplot","text":"ggplot2 plot. computed data points statistics attached attr(p, 'data') attr(p, 'stats'), respectively.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rare_corrplot.html","id":"aesthetics-and-partitions","dir":"Reference","previous_headings":"","what":"Aesthetics and Partitions","title":"Visualize rarefaction curves with scatterplots and trendlines. — rare_corrplot","text":"Metadata can used flexibly subset, partition, apply aesthetics creating plot. Common use cases provided . thorough documentation available https://cmmr.github.io/rbiom. color.- metadata column. (Max 1) facet.- categorical metadata column(s). limit.- metadata column(s). built-color palettes colorblind-friendly. available categorical palette names : \"okabe\", \"carto\", \"r4\", \"polychrome\", \"tol\", \"bright\", \"light\", \"muted\", \"vibrant\", \"tableau\", \"classic\", \"alphabet\", \"tableau20\", \"kelly\", \"fishy\". available numeric palette names : \"reds\", \"oranges\", \"greens\", \"purples\", \"grays\", \"acton\", \"bamako\", \"batlow\", \"bilbao\", \"buda\", \"davos\", \"devon\", \"grayC\", \"hawaii\", \"imola\", \"lajolla\", \"lapaz\", \"nuuk\", \"oslo\", \"tokyo\", \"turku\", \"bam\", \"berlin\", \"broc\", \"cork\", \"lisbon\", \"roma\", \"tofino\", \"vanimo\", \"vik\"","code":"## Colors ----------------------------   color.by = \"Body Site\"   color.by = list('Body Site' = \"bright\")   color.by = list('Body Site' = c(\"Stool\", \"Saliva\"))   color.by = list('Body Site' = list('values' = c(\"Stool\", \"Saliva\"), 'colors' = \"bright\"))   color.by = list('Body Site' = c('Stool' = \"blue\", 'Saliva' = \"green\"))      ## Facets ----------------------------   facet.by = \"Body Site\"   facet.by = c(\"Body Site\", \"Sex\")   facet.by = list('Body Site' = c(\"Stool\", \"Saliva\"), \"Sex\")      ## Limits ----------------------------   limit.by = list('Sex' = \"Male\", 'Age' = c(20,40))   limit.by = list('Body Site' = c(\"Saliva\", \"Anterior nares\"), 'Age' = c(NA,35))"},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/rare_corrplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize rarefaction curves with scatterplots and trendlines. — rare_corrplot","text":"","code":"library(rbiom)          rare_corrplot(hmp50, color.by=\"Body Site\", adiv=c(\"shannon\", \"otus\"), facet.by=\"Sex\")  #> `geom_smooth()` using formula = 'y ~ x'"},{"path":"https://cmmr.github.io/rbiom/reference/rare_depth.html","id":null,"dir":"Reference","previous_headings":"","what":"If the samples are rarefied, report the level (depth). — rare_depth","title":"If the samples are rarefied, report the level (depth). — rare_depth","text":"value initally set read_biom() subsequently changed calls sample_rarefy(). Calling as_percent() set rare_depth() 1, even though function sets sample_sums() 1.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rare_depth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"If the samples are rarefied, report the level (depth). — rare_depth","text":"","code":"rare_depth(biom)"},{"path":"https://cmmr.github.io/rbiom/reference/rare_depth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"If the samples are rarefied, report the level (depth). — rare_depth","text":"biom BIOM object, returned read_biom().","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rare_depth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"If the samples are rarefied, report the level (depth). — rare_depth","text":"rarefaction depth, NULL BIOM object rarefied.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/rare_depth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"If the samples are rarefied, report the level (depth). — rare_depth","text":"","code":"library(rbiom)          rare_depth(hmp50) #> NULL          biom <- sample_rarefy(hmp50)     rare_depth(biom) #> [1] 1183"},{"path":"https://cmmr.github.io/rbiom/reference/rare_multiplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Combines rare_corrplot and rare_barplot into a single figure. — rare_multiplot","title":"Combines rare_corrplot and rare_barplot into a single figure. — rare_multiplot","text":"Combines rare_corrplot rare_barplot single figure.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rare_multiplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combines rare_corrplot and rare_barplot into a single figure. — rare_multiplot","text":"","code":"rare_multiplot(   biom,   adiv = \"OTUs\",   depths = NULL,   layers = \"t\",   rline = TRUE,   color.by = NULL,   facet.by = NULL,   limit.by = NULL,   model = \"log\",   stats = \"emtrends\",   p.adj = \"fdr\",   ci = 95,   caption = FALSE,   labels = FALSE,   trans = \"log10\",   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/rare_multiplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combines rare_corrplot and rare_barplot into a single figure. — rare_multiplot","text":"biom BIOM object, returned read_biom(). adiv One alpha diversity measures use. Options : \"OTUs\", \"Shannon\", \"Chao1\", \"Simpson\", /\"InvSimpson\". Non-ambiguous abbreviations also accepted. can use adiv=\"\" shortcut adiv=c(\"OTUs\", \"Shannon\", \"Chao1\", \"Simpson\", \"InvSimpson\") Default: \"Shannon\". depths Rarefaction depths show plot. Passed adiv_table(). default, \"multi_even\", uses heuristic pick 10 evenly spaced depths. layers \"trend\", \"scatter\". Single letter abbreviations also accepted. instance, c(\"trend\", \"scatter\") equivalent c(\"t\", \"s\") \"ts\". See vignette(\"corrplots\") examples . Default: \"t\". rline draw horizontal line plot, intended show particular rarefaction depth. Set TRUE show auto-selected rarefaction depth NULL show line. Default: NULL. color., facet., limit.Metadata columns use aesthetics partitioning. See details. Default: NULL model type trendline fit data. Options : \"lm\" (linear), \"log\" (logarithmic), \"gam\" (generalized additive). can alternatively provide list length two first element character vector length 1 naming function, second element list arguments pass function. One function's arguments must named 'formula'. example, model = list(\"stats::lm\", list(formula = y ~ x)). Default: \"log\". stats statistic display plot. Options : \"fit\" -  well model fit data? \"terms\" -  strongly 'x' influence 'y'? \"emmeans\" -  average 'y' value non-zero? \"emtrends\" -  trendline non-zero slope? \"emm_pairs\" -  means trendlines different? \"emt_pairs\" -  slopes trendlines different? \"hide\" -  show stats plot, still compute . \"none\" -  compute show statistics. Default: \"emtrends\"  Note: \"emm_pairs\" \"emt_pairs\" can calculated using color.metadata column one level.  Statistical tests run separately facet. P-values adjusted multiple comparisons considering facets together. Unless stats = \"none\", stats attached plot attr(,'stats'). p.adj Method use multiple comparisons adjustment p-values. Run p.adjust.methods list available options. Default: \"fdr\". ci confidence interval display around trendline. Default: 95. caption Display information method used trendline fitting beneath plot. Default: FALSE. labels Show sample names bar. Default: FALSE. trans Y-axis transformation. Options \"log10\" NULL.  Default: \"log10\". ... Additional parameters pass along ggplot2 functions. Prefix parameter name either t. s./pt. ensure gets passed () geom_smooth geom_point, respectively. instance, s.size = 2 ensures points size set 2.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rare_multiplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combines rare_corrplot and rare_barplot into a single figure. — rare_multiplot","text":"ggplot2 plot. computed data points statistics attached attr(p, 'data') attr(p, 'stats'), respectively.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rare_multiplot.html","id":"aesthetics-and-partitions","dir":"Reference","previous_headings":"","what":"Aesthetics and Partitions","title":"Combines rare_corrplot and rare_barplot into a single figure. — rare_multiplot","text":"Metadata can used flexibly subset, partition, apply aesthetics creating plot. Common use cases provided . thorough documentation available https://cmmr.github.io/rbiom. color.- metadata column. (Max 1) facet.- categorical metadata column(s). limit.- metadata column(s). built-color palettes colorblind-friendly. available categorical palette names : \"okabe\", \"carto\", \"r4\", \"polychrome\", \"tol\", \"bright\", \"light\", \"muted\", \"vibrant\", \"tableau\", \"classic\", \"alphabet\", \"tableau20\", \"kelly\", \"fishy\". available numeric palette names : \"reds\", \"oranges\", \"greens\", \"purples\", \"grays\", \"acton\", \"bamako\", \"batlow\", \"bilbao\", \"buda\", \"davos\", \"devon\", \"grayC\", \"hawaii\", \"imola\", \"lajolla\", \"lapaz\", \"nuuk\", \"oslo\", \"tokyo\", \"turku\", \"bam\", \"berlin\", \"broc\", \"cork\", \"lisbon\", \"roma\", \"tofino\", \"vanimo\", \"vik\"","code":"## Colors ----------------------------   color.by = \"Body Site\"   color.by = list('Body Site' = \"bright\")   color.by = list('Body Site' = c(\"Stool\", \"Saliva\"))   color.by = list('Body Site' = list('values' = c(\"Stool\", \"Saliva\"), 'colors' = \"bright\"))   color.by = list('Body Site' = c('Stool' = \"blue\", 'Saliva' = \"green\"))      ## Facets ----------------------------   facet.by = \"Body Site\"   facet.by = c(\"Body Site\", \"Sex\")   facet.by = list('Body Site' = c(\"Stool\", \"Saliva\"), \"Sex\")      ## Limits ----------------------------   limit.by = list('Sex' = \"Male\", 'Age' = c(20,40))   limit.by = list('Body Site' = c(\"Saliva\", \"Anterior nares\"), 'Age' = c(NA,35))"},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/rare_multiplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combines rare_corrplot and rare_barplot into a single figure. — rare_multiplot","text":"","code":"library(rbiom)          rare_multiplot(hmp50, color.by=\"Body Site\")  #> `geom_smooth()` using formula = 'y ~ x'"},{"path":"https://cmmr.github.io/rbiom/reference/rare_suggest.html","id":null,"dir":"Reference","previous_headings":"","what":"Suggest a 'good' rarefaction depth. — rare_suggest","title":"Suggest a 'good' rarefaction depth. — rare_suggest","text":"Suggest 'good' rarefaction depth.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rare_suggest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Suggest a 'good' rarefaction depth. — rare_suggest","text":"","code":"rare_suggest(biom)"},{"path":"https://cmmr.github.io/rbiom/reference/rare_suggest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Suggest a 'good' rarefaction depth. — rare_suggest","text":"biom matrix, simple_triplet_matrix, BIOM object, returned read_biom(). matrices, rows columns assumed taxa samples, respectively.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rare_suggest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Suggest a 'good' rarefaction depth. — rare_suggest","text":"integer.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions in package rbiom. — rbiom-deprecated","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"functions listed deprecated defunct near future. possible, alternative functions similar functionality also mentioned. Help pages deprecated functions available help(\"<function>-deprecated\").","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"","code":"alpha.div(biom, rarefy = FALSE)  beta.div(biom, method, weighted = TRUE, tree = NULL, long = FALSE, md = FALSE)  counts(biom)  info(biom)  depths_barplot(   biom,   rline = TRUE,   counts = TRUE,   labels = TRUE,   trans = \"log10\",   ... )  metadata(biom, field = NULL, id = NULL, cleanup = FALSE)  nsamples(biom)  ntaxa(biom)  phylogeny(biom)  rarefy(biom, depth = NULL, seed = 0)  read.biom(src, tree = \"auto\", prune = FALSE)  read.fasta(file, ids = NULL)  read.tree(src)  sample.names(biom)  repair(biom)  select(biom, samples = NULL, nTop = NULL, nRandom = NULL, seed = 0)  sequences(biom)  # S3 method for BIOM subset(x, ...)  subtree(tree, tips)  taxa.names(biom)  taxa.ranks(biom)  taxa.rollup(   biom,   rank = \"OTU\",   taxa = NULL,   map = NULL,   lineage = FALSE,   sparse = FALSE,   long = FALSE,   md = FALSE )  taxonomy(biom, ranks = NULL, unc = \"asis\")  tips(x)  write.biom(biom, file, format = \"json\")  write.fasta(seqs, outfile = NULL)  write.tree(tree, file = NULL)  write.xlsx(biom, outfile, depth = NULL, seed = 0)  as.percent(biom)  comments(biom)  depth(biom)  has.phylogeny(biom)  has.sequences(biom)  id(biom)  is.rarefied(biom)  sample.sums(biom, long = FALSE, md = FALSE)  stats.table(...)  taxa.means(biom, rank = NULL)  taxa.sums(biom, rank = NULL)  top.taxa(biom, rank = \"OTU\", n = Inf)  top_taxa(biom, rank = \"OTU\", n = Inf)  comments(x) <- value  counts(x) <- value  id(x) <- value  metadata(x) <- value  phylogeny(x) <- value  sample.names(x) <- value  sequences(x) <- value  taxa.names(x) <- value  taxa.ranks(x) <- value  taxonomy(x) <- value"},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"alpha-div","dir":"Reference","previous_headings":"","what":"alpha.div","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use adiv_table() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"beta-div","dir":"Reference","previous_headings":"","what":"beta.div","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use bdiv_table() bdiv_distmat() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"counts","dir":"Reference","previous_headings":"","what":"counts","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use otu_matrix() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"info","dir":"Reference","previous_headings":"","what":"info","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use biom_info() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"depths-barplot","dir":"Reference","previous_headings":"","what":"depths_barplot","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use rare_barplot() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"metadata","dir":"Reference","previous_headings":"","what":"metadata","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use sample_metadata() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"nsamples","dir":"Reference","previous_headings":"","what":"nsamples","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use n_samples() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"ntaxa","dir":"Reference","previous_headings":"","what":"ntaxa","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use n_otus() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"phylogeny","dir":"Reference","previous_headings":"","what":"phylogeny","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use otu_tree() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"sample-rarefy","dir":"Reference","previous_headings":"","what":"sample_rarefy","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use otu_tree() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"read-biom","dir":"Reference","previous_headings":"","what":"read.biom","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use read_biom() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"read-fasta","dir":"Reference","previous_headings":"","what":"read.fasta","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use read_fasta() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"read-tree","dir":"Reference","previous_headings":"","what":"read.tree","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use read_tree() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"sample-names","dir":"Reference","previous_headings":"","what":"sample.names","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use sample_names() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"repair","dir":"Reference","previous_headings":"","what":"repair","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use biom_repair() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"select","dir":"Reference","previous_headings":"","what":"select","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use sample_select() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"sequences","dir":"Reference","previous_headings":"","what":"sequences","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use otu_sequences() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"subset","dir":"Reference","previous_headings":"","what":"subset","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use sample_subset() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"subtree","dir":"Reference","previous_headings":"","what":"subtree","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use tree_subset() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"taxa-names","dir":"Reference","previous_headings":"","what":"taxa.names","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use otu_names() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"taxa-ranks","dir":"Reference","previous_headings":"","what":"taxa.ranks","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use taxa_ranks() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"taxa-rollup","dir":"Reference","previous_headings":"","what":"taxa.rollup","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use taxa_table() taxa_matrix() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"taxonomy","dir":"Reference","previous_headings":"","what":"taxonomy","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use otu_taxonomy() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"tips","dir":"Reference","previous_headings":"","what":"tips","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use tree_tips() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"write-biom","dir":"Reference","previous_headings":"","what":"write.biom","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use write_biom() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"write-fasta","dir":"Reference","previous_headings":"","what":"write.fasta","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use write_fasta() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"write-tree","dir":"Reference","previous_headings":"","what":"write.tree","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use write_tree() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"write-xlsx","dir":"Reference","previous_headings":"","what":"write.xlsx","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use write_xlsx() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"as-percent","dir":"Reference","previous_headings":"","what":"as.percent","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use as_percent() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"comments","dir":"Reference","previous_headings":"","what":"comments","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use biom_info() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"depth","dir":"Reference","previous_headings":"","what":"depth","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use sample_sums() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"has-phylogeny","dir":"Reference","previous_headings":"","what":"has.phylogeny","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use has_tree() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"has-sequences","dir":"Reference","previous_headings":"","what":"has.sequences","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use has_sequences() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"id","dir":"Reference","previous_headings":"","what":"id","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use biom_info() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"is-rarefied","dir":"Reference","previous_headings":"","what":"is.rarefied","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use is_rarefied() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"sample-sums","dir":"Reference","previous_headings":"","what":"sample.sums","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use sample_sums() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"stats-table","dir":"Reference","previous_headings":"","what":"stats.table","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use biom_stats() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"taxa-means","dir":"Reference","previous_headings":"","what":"taxa.means","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use taxa_means() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"taxa-sums","dir":"Reference","previous_headings":"","what":"taxa.sums","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use taxa_sums() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"top-taxa","dir":"Reference","previous_headings":"","what":"top.taxa","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use taxa_sums() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"top-taxa-1","dir":"Reference","previous_headings":"","what":"top_taxa","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use taxa_sums() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"comments-set","dir":"Reference","previous_headings":"","what":"comments-set","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use biom_comment() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"counts-set","dir":"Reference","previous_headings":"","what":"counts-set","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use otu_matrix() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"id-set","dir":"Reference","previous_headings":"","what":"id-set","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use biom_id() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"metadata-set","dir":"Reference","previous_headings":"","what":"metadata-set","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use sample_metadata() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"phylogeny-set","dir":"Reference","previous_headings":"","what":"phylogeny-set","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use otu_tree() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"sample-names-set","dir":"Reference","previous_headings":"","what":"sample.names-set","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use sample_names() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"sequences-set","dir":"Reference","previous_headings":"","what":"sequences-set","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use otu_sequences() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"taxa-names-set","dir":"Reference","previous_headings":"","what":"taxa.names-set","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use otu_names() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"taxa-ranks-set","dir":"Reference","previous_headings":"","what":"taxa.ranks-set","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use taxa_ranks() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom-deprecated.html","id":"taxonomy-set","dir":"Reference","previous_headings":"","what":"taxonomy-set","title":"Deprecated functions in package rbiom. — rbiom-deprecated","text":"Use otu_taxonomy() instead.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom.html","id":null,"dir":"Reference","previous_headings":"","what":"rbiom: Read/Write, Transform, and Summarize BIOM Data — rbiom","title":"rbiom: Read/Write, Transform, and Summarize BIOM Data — rbiom","text":"toolkit working Biological Observation Matrix (BIOM) files. Features include reading/writing BIOM formats, rarefaction, alpha diversity, beta diversity (including UniFrac), summarizing counts taxonomic level, sample subsetting. Standalone functions reading, writing, subsetting phylogenetic trees also provided. CPU intensive operations encoded C multi-thread support.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/rbiom.html","id":"multithreading","dir":"Reference","previous_headings":"","what":"Multithreading","title":"rbiom: Read/Write, Transform, and Summarize BIOM Data — rbiom","text":"Many rbiom functions support multithreading: default behavior function run many cores available local compute environment. wish limit number simultaneous threads, set RcppParallel's numThreads option. instance:","code":"RcppParallel::setThreadOptions(numThreads = 4)"},{"path":"https://cmmr.github.io/rbiom/reference/read_biom.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts counts, metadata, taxonomy, and phylogeny from a biom file. — read_biom","title":"Extracts counts, metadata, taxonomy, and phylogeny from a biom file. — read_biom","text":"Extracts counts, metadata, taxonomy, phylogeny biom file.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/read_biom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts counts, metadata, taxonomy, and phylogeny from a biom file. — read_biom","text":"","code":"read_biom(src, tree = \"auto\", cleanup = FALSE, prune = cleanup)"},{"path":"https://cmmr.github.io/rbiom/reference/read_biom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts counts, metadata, taxonomy, and phylogeny from a biom file. — read_biom","text":"src Input data either file path, URL, JSON string. BIOM files can formatted according version 1.0 (JSON) 2.1 (HDF5) specifications, classical tabular format. URLs must begin http://, https://, ftp://, ftps://. JSON files must { first character. Compressed (gzip bzip2) BIOM files also supported. NOTE: read HDF5 formatted BIOM files, BioConductor R package rhdf5 must installed. tree default, tree read BIOM file specified src. Specifying tree=TRUE , generate error message tree present. Setting tree=FALSE return BIOM object without tree data. may also provide file path, URL, Newick string load tree data returned BIOM object. Default: \"auto\" cleanup Renames ambiguous taxons removes leading underscores. Also converts character metadata factors dates based heuristics. Default: FALSE prune samples taxa zero observations discarded? Default: cleanup","code":""},{"path":"https://cmmr.github.io/rbiom/reference/read_biom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts counts, metadata, taxonomy, and phylogeny from a biom file. — read_biom","text":"BIOM class object containing parsed data. object can treated list following named elements: $counts -  numeric slam sparse matrix observation counts. Taxa (OTUs) rows samples columns. $metadata -  data frame containing embedded metadata. Row names sample IDs. $taxonomy -  Character matrix taxonomic names, given. Row names taxa (OTU) IDs. Column rows named Kingdom, Phylum, Class, Order, Family, Genus, Species, Strain, TaxLvl.1, TaxLvl.2, ... , TaxLvl.N 8 levels taxonomy encoded biom file. $phylogeny -  object class phylo defining phylogenetic relationships taxa. Although official specification BIOM includes phylogenetic trees BIOM version 2.1, BIOM version 1.0 file includes phylogeny entry newick data, loaded well. ape package additional functions working phylo objects. $sequences -  named character vector, names taxonomic identifiers values sequences represent. values part official BIOM specification, read written defined. $info -  list attributes defined BIOM file, id, type, format, format_url, generated_by, date, matrix_type, matrix_element_type, Comment, shape. metadata, taxonomy, phylogeny optional components BIOM file specification therefore empty returned object provided BIOM file.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/read_biom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts counts, metadata, taxonomy, and phylogeny from a biom file. — read_biom","text":"","code":"library(rbiom)      infile <- system.file(\"extdata\", \"hmp50.bz2\", package = \"rbiom\")     biom <- read_biom(infile)      print(biom) #> Human Microbiome Project - 50 Sample Demo (2023-09-22) #>      50 Samples:  (HMP01, HMP02, HMP03, HMP04, HMP05, HM...) #>     490 Taxa:     (UncO2713, UncO4101, AnmMass2, PreBivi...) #>       6 Ranks:    (Kingdom, Phylum, Class, Order, Family...) #>       4 Metadata: (Age, BMI, Body Site, and Sex) #>         Tree:     Present #>       # Taxa Abundances     as.matrix(biom$counts[1:4,1:4]) #>          HMP01 HMP02 HMP03 HMP04 #> UncO2713     0     0     0     0 #> UncO4101     1     5     6    18 #> AnmMass2     0     0     0     0 #> PreBivi6     0     0     0     0      top5 <- names(head(rev(sort(slam::row_sums(biom$counts))), 5))     biom$taxonomy[top5,c('Family', 'Genus')] #>          Family               Genus               #> Unc01yki \"Lactobacillaceae\"   \"Lactobacillus\"     #> Unc53100 \"Streptococcaceae\"   \"Streptococcus\"     #> LtbAci52 \"Lactobacillaceae\"   \"Lactobacillus\"     #> CnbTube3 \"Corynebacteriaceae\" \"Corynebacterium 1\" #> Unc02qsf \"Staphylococcaceae\"  \"Staphylococcus\"        as.matrix(biom$counts[top5, 1:6]) #>          HMP01 HMP02 HMP03 HMP04 HMP05 HMP06 #> Unc01yki     0     0     0     0     0     0 #> Unc53100  1083   543   301   223  2672   748 #> LtbAci52     0     0     0     0     0     0 #> CnbTube3     0     0     0     0     0     0 #> Unc02qsf     0     0     0     0     0     0      # Metadata     table(biom$metadata$Sex, biom$metadata$`Body Site`) #>          #>          Anterior nares Buccal mucosa Mid vagina Saliva Stool #>   Female              5             5         10      5     5 #>   Male                5             5          0      5     5     sprintf(\"Mean age: %.1f\", mean(biom$metadata$Age)) #> [1] \"Mean age: 27.8\"      # Phylogenetic tree     tree <- biom$phylogeny     top5.tree <- tree_subset(tree, top5)     ape::plot.phylo(top5.tree)"},{"path":"https://cmmr.github.io/rbiom/reference/read_fasta.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a fasta file into a named character vector. — read_fasta","title":"Parse a fasta file into a named character vector. — read_fasta","text":"Parse fasta file named character vector.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/read_fasta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a fasta file into a named character vector. — read_fasta","text":"","code":"read_fasta(file, ids = NULL)"},{"path":"https://cmmr.github.io/rbiom/reference/read_fasta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a fasta file into a named character vector. — read_fasta","text":"file file/URL fasta-formatted sequences. Can optionally compressed gzip, bzip2, xz, lzma. ids Character vector IDs retrieve. default, NULL, retrieve everything.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/read_fasta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a fasta file into a named character vector. — read_fasta","text":"named character vector names fasta headers values sequences.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/read_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a newick formatted phylogenetic tree. — read_tree","title":"Read a newick formatted phylogenetic tree. — read_tree","text":"phylogenetic tree required computing UniFrac distance matrices. can load tree file providing tree string directly. tree must Newick format, also known parenthetic format New Hampshire format.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/read_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a newick formatted phylogenetic tree. — read_tree","text":"","code":"read_tree(src)"},{"path":"https://cmmr.github.io/rbiom/reference/read_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a newick formatted phylogenetic tree. — read_tree","text":"src Input data either file path, URL, Newick string. Compressed (gzip bzip2) files also supported.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/read_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a newick formatted phylogenetic tree. — read_tree","text":"phylo class object representing tree.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/read_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a newick formatted phylogenetic tree. — read_tree","text":"","code":"library(rbiom)          infile <- system.file(\"extdata\", \"newick.tre\", package = \"rbiom\")     tree <- read_tree(infile)          tree <- read_tree(\"         (t9:0.99,((t5:0.87,t2:0.89):0.51,(((t10:0.16,(t7:0.83,t4:0.96)         :0.94):0.69,(t6:0.92,(t3:0.62,t1:0.85):0.54):0.23):0.74,t8:0.1         2):0.43):0.67);\")"},{"path":"https://cmmr.github.io/rbiom/reference/sample_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set the sample metadata. — sample_metadata","title":"Get or set the sample metadata. — sample_metadata","text":"Get set sample metadata.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/sample_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set the sample metadata. — sample_metadata","text":"","code":"sample_metadata(biom, field = NULL, id = NULL, cleanup = FALSE)  sample_metadata(x) <- value"},{"path":"https://cmmr.github.io/rbiom/reference/sample_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set the sample metadata. — sample_metadata","text":"biom, x BIOM object, returned read_biom(). field name single metadata column retrieve. provided, named vector returned instead data.frame. Default: NULL id Copy sample names (rownames) column. Default: NULL cleanup Change character columns factor dates. Date formats recognized : \"%Y-%m-%d\" \"%m/%d/%Y\" (four-digit year). Also replace '.' '_' column names '.' first character order avoid conflicts auto-generated columns. Default: FALSE value data.frame metadata. rownames() must sample_names(biom). fewer rows value samples, biom object subset.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/sample_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set the sample metadata. — sample_metadata","text":"data frame metadata biom. field given, return named vector field's values.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/sample_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set the sample metadata. — sample_metadata","text":"","code":"library(rbiom)          sample_metadata(hmp50)[1:4,1:3] #>       Age BMI     Body Site #> HMP01  22  20 Buccal mucosa #> HMP02  24  23 Buccal mucosa #> HMP03  28  26        Saliva #> HMP04  25  23        Saliva          head(sample_metadata(hmp50, \"Body Site\")) #>           HMP01           HMP02           HMP03           HMP04           HMP05  #> \"Buccal mucosa\" \"Buccal mucosa\"        \"Saliva\"        \"Saliva\" \"Buccal mucosa\"  #>           HMP06  #>        \"Saliva\"           head(sample_metadata(hmp50, \"Body Site\", cleanup=TRUE)) #>         HMP01         HMP02         HMP03         HMP04         HMP05  #> Buccal mucosa Buccal mucosa        Saliva        Saliva Buccal mucosa  #>         HMP06  #>        Saliva  #> Levels: Anterior nares Buccal mucosa Mid vagina Saliva Stool          md <- sample_metadata(hmp50)     md <- md[,c('Sex', 'Body Site')]     sample_metadata(hmp50) <- md     head(sample_metadata(hmp50)) #>          Sex     Body Site #> HMP01 Female Buccal mucosa #> HMP02   Male Buccal mucosa #> HMP03   Male        Saliva #> HMP04   Male        Saliva #> HMP05 Female Buccal mucosa #> HMP06   Male        Saliva"},{"path":"https://cmmr.github.io/rbiom/reference/sample_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set the sample names. — sample_names","title":"Get or set the sample names. — sample_names","text":"Get set sample names.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/sample_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set the sample names. — sample_names","text":"","code":"sample_names(biom)  sample_names(x) <- value"},{"path":"https://cmmr.github.io/rbiom/reference/sample_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set the sample names. — sample_names","text":"biom, x BIOM object, returned read_biom(). value character vector new sample names.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/sample_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set the sample names. — sample_names","text":"character vector sample names biom.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/sample_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set the sample names. — sample_names","text":"","code":"library(rbiom)           biom <- hmp50          head(sample_names(biom)) #> [1] \"HMP01\" \"HMP02\" \"HMP03\" \"HMP04\" \"HMP05\" \"HMP06\"          sample_names(biom) <- sub('HMP', 'Sample_', sample_names(biom))     head(sample_names(biom)) #> [1] \"Sample_01\" \"Sample_02\" \"Sample_03\" \"Sample_04\" \"Sample_05\" \"Sample_06\""},{"path":"https://cmmr.github.io/rbiom/reference/sample_rarefy.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset counts so that all samples have the same number of observations. — sample_rarefy","title":"Subset counts so that all samples have the same number of observations. — sample_rarefy","text":"Subset counts samples number observations.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/sample_rarefy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset counts so that all samples have the same number of observations. — sample_rarefy","text":"","code":"sample_rarefy(biom, depth = NULL, seed = 0)"},{"path":"https://cmmr.github.io/rbiom/reference/sample_rarefy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset counts so that all samples have the same number of observations. — sample_rarefy","text":"biom matrix, simple_triplet_matrix, BIOM object, returned read_biom(). matrices, rows columns assumed taxa samples, respectively. depth number observations keep, per sample. set NULL, depth automatically selected. Samples fewer number observations dropped. called data non-integer abundances, values re-scaled integers 1 depth sum depth. seed integer use seeding random number generator. need create different random rarefactions BIOM object, set seed value different number time.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/sample_rarefy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset counts so that all samples have the same number of observations. — sample_rarefy","text":"matrix, simple_triplet_matrix, BIOM object, depending input object type. type object provided type returned. retained observations randomly selected, based seed value derived BIOM object. Therefore, rarefying biom depth always produce resultant rarefaction.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/sample_rarefy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset counts so that all samples have the same number of observations. — sample_rarefy","text":"","code":"library(rbiom)      range(slam::col_sums(hmp50$counts)) #> [1]   182 22117      biom <- sample_rarefy(hmp50, depth=1000)     range(slam::col_sums(biom$counts)) #> [1] 1000 1000"},{"path":"https://cmmr.github.io/rbiom/reference/sample_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduce samples to a specific list — sample_select","title":"Reduce samples to a specific list — sample_select","text":"Reduce samples specific list","code":""},{"path":"https://cmmr.github.io/rbiom/reference/sample_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduce samples to a specific list — sample_select","text":"","code":"sample_select(   biom,   samples = NULL,   nTop = NULL,   nRandom = NULL,   seed = 0,   fast = FALSE )"},{"path":"https://cmmr.github.io/rbiom/reference/sample_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reduce samples to a specific list — sample_select","text":"biom BIOM object, returned read_biom(). Objects class matrix simple_triplet_matrix also accepted. samples Sample names, indices, logical vector identifying samples keep. latter two based order sample names given colnames(biom$counts). nTop Selects number samples, taking sample observations first, sample second-observations, etc. Ties randomly ordered. nTop higher number samples dataset, entire dataset returned. See note. nRandom Randomly selects number samples. higher number samples dataset, entire dataset returned. See note. seed Random seed, used selecting nRandom samples. fast subsetting phylogenetic tree sequences skipped? slow steps often necessary. (Default: FALSE) Note: Generally, specify one filters: samples, nTop, nRandom. However, specifying multiple filters allowed; applied order listed .","code":""},{"path":"https://cmmr.github.io/rbiom/reference/sample_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reduce samples to a specific list — sample_select","text":"object class biom, subsetted requested.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/sample_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reduce samples to a specific list — sample_select","text":"","code":"if (FALSE) {     library(rbiom)          ex1 <- sample_select(hmp50, c('HMP14', 'HMP22', 'HMP03'))     ex2 <- sample_select(hmp50, c(32, 11, 28, 16, 46, 5))     ex3 <- sample_select(hmp50, 1:50 %% 6 == 0)     ex4 <- sample_select(hmp50, nRandom = 10)     ex5 <- sample_select(hmp50, nTop = 5)     ex6 <- sample_select(hmp50, samples = 10:40, nTop = 20, nRandom = 10)  }"},{"path":"https://cmmr.github.io/rbiom/reference/sample_subset.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset samples using the BIOM's metadata or taxonomy. — sample_subset","title":"Subset samples using the BIOM's metadata or taxonomy. — sample_subset","text":"Subset samples using BIOM's metadata taxonomy.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/sample_subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset samples using the BIOM's metadata or taxonomy. — sample_subset","text":"","code":"sample_subset(   biom,   expr,   env = parent.frame(),   drop.na = TRUE,   refactor = TRUE,   fast = FALSE )"},{"path":"https://cmmr.github.io/rbiom/reference/sample_subset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset samples using the BIOM's metadata or taxonomy. — sample_subset","text":"biom, x BIOM object, returned read_biom(). expr Logical expression run metadata taxonomy () identify samples taxa retain. env environment search variables used expr. Default: parent.frame() drop.na expr e.g. Age > 30, !.na(Age) automatically applied ? Default: TRUE refactor expr e.g. `Body Site` %% c(\"Stool\", \"Saliva\"), `Body Site` redefined factor(`Body Site`, levels=c('Stool', 'Saliva'))? Applies categorical metadata . Default: TRUE fast subsetting phylogenetic tree sequences skipped? slow steps often necessary. Default: FALSE","code":""},{"path":"https://cmmr.github.io/rbiom/reference/sample_subset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset samples using the BIOM's metadata or taxonomy. — sample_subset","text":"BIOM object.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/sample_subset.html","id":"taxonomic-abundance-filtering","dir":"Reference","previous_headings":"","what":"Taxonomic abundance filtering","title":"Subset samples using the BIOM's metadata or taxonomy. — sample_subset","text":"taxonomic subsetting, several functions added overridden behave expected within subsetting expression. : mean(), median(), min(), max(), n(), count(), percent(), rank(), apply(). Therefore can write sample_subset(hmp50, mean(Genus) >= 0.1) returned BIOM object contain genera average least 10% relative abundance across samples. want orders present three samples, can : sample_subset(hmp50, count(Order) >= 3). require presence 25% samples, use: sample_subset(hmp50, percent(Order) >= 0.25). count() percent() default arguments gt=0, le=1, ge=NULL, lt=NULL, can overridden find, e.g., genera comprise least 2% community 10% samples: sample_subset(hmp50, percent(Genus, ge=0.02) >= 0.10). gt = greater , ge = greater equal . lt/le similarly 'less '. keep top 5 abundant genera (based mean), run: sample_subset(hmp50, rank(Genus) <= 5). apply() allows run function per-taxon basis. example, filter genera root mean square relative abundances: rms <- function(x) sqrt(mean(x^2)); sample_subset(hmp50, apply(Genus, rms) >= 0.1). prefer work raw values (e.g. read counts) instead relative abundances, set apply(..., raw = TRUE). instance: sample_subset(hmp50, apply(Genus, mean, raw=TRUE) >= 100).","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/sample_subset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset samples using the BIOM's metadata or taxonomy. — sample_subset","text":"","code":"if (FALSE) {     library(rbiom)           sample_subset(hmp50, `Body Site` %in% c(\"Saliva\", \"Stool\"))     sample_subset(hmp50, Age < 25 & BMI > 22)     sample_subset(hmp50, Phylum %in% c(\"Firmicutes\", \"Actinobacteria\"))     sample_subset(hmp50, mean(Genus) > 0.1)     sample_subset(hmp50, rank(Genus) <= 5)     sample_subset(hmp50, a == b, list(a = as.name(\"Body Site\"), b =\"Saliva\"))  }"},{"path":"https://cmmr.github.io/rbiom/reference/sample_sums.html","id":null,"dir":"Reference","previous_headings":"","what":"Sum the observations in each sample. — sample_sums","title":"Sum the observations in each sample. — sample_sums","text":"Sum observations sample.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/sample_sums.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sum the observations in each sample. — sample_sums","text":"","code":"sample_sums(biom, long = FALSE, md = FALSE)"},{"path":"https://cmmr.github.io/rbiom/reference/sample_sums.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sum the observations in each sample. — sample_sums","text":"biom BIOM object, returned read_biom().","code":""},{"path":"https://cmmr.github.io/rbiom/reference/sample_sums.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sum the observations in each sample. — sample_sums","text":"named numeric vector number observations sample. names sample IDs.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/sample_sums.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sum the observations in each sample. — sample_sums","text":"","code":"library(rbiom)          sample_sums(hmp50) %>% sort() %>% head() #> HMP36 HMP24 HMP03 HMP02 HMP42 HMP17  #>   182  1183  1353  1371  1489  1579           hist(sample_sums(hmp50))"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_barplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Display taxa abundances as a stacked bar graph. — taxa_barplot","title":"Display taxa abundances as a stacked bar graph. — taxa_barplot","text":"Display taxa abundances stacked bar graph.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_barplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display taxa abundances as a stacked bar graph. — taxa_barplot","text":"","code":"taxa_barplot(   biom,   rank = NULL,   taxa = 6,   colors = TRUE,   patterns = FALSE,   label.by = NULL,   order.by = NULL,   facet.by = NULL,   limit.by = NULL,   dist = \"euclidean\",   clust = \"complete\",   other = TRUE,   xlab.angle = 90,   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_barplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display taxa abundances as a stacked bar graph. — taxa_barplot","text":"biom BIOM object, returned read_biom(). rank rank(s) taxa display, example \"Phylum\" \"Genus\". Run taxa_ranks() see options given BIOM object. default, NULL, selects lowest level. taxa taxa give separate colors. integer value show top n abundant taxa. value 0 <= n < 1 show taxa mean abundance greater (e.g. 0.1). character vector taxon names show taxa. Default: 6. colors, patterns character vector colors patterns use graph. named character vector can used map taxon names specific colors patterns. Set TRUE auto-select colors patterns, FALSE disable per-taxa colors patterns. Default: colors=TRUE, patterns=FALSE. label., order.metadata column use labeling /sorting samples across x-axis. order.=NULL, samples arranged based dist clust, . Default: NULL. facet., limit.Metadata columns use data partitioning. Default: NULL dist, clust Distance (stats::dist()) clustering (stats::hclust()) methods use automatically arranging samples along x-axis. Group samples similar composition near one another. Default: dist=\"euclidean\", clust=\"complete\". Add '' taxa ensures bars sum 100%. Default: TRUE. xlab.angle rotate tick labels x-axis. Options 90 (default) 30. ... Parameters underlying functions. Prefixing parameter names layer name ensures particular parameter passed , , layer.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_barplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display taxa abundances as a stacked bar graph. — taxa_barplot","text":"ggplot2 plot. computed data points attached attr(, 'data').","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/taxa_barplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display taxa abundances as a stacked bar graph. — taxa_barplot","text":"","code":"library(rbiom)          biom <- sample_rarefy(hmp50)     taxa_barplot(biom, rank=\"Phylum\")"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize BIOM data with boxplots. — taxa_boxplot","title":"Visualize BIOM data with boxplots. — taxa_boxplot","text":"Visualize BIOM data boxplots.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize BIOM data with boxplots. — taxa_boxplot","text":"","code":"taxa_boxplot(   biom,   x = NULL,   rank = NULL,   taxa = 5,   layers = \"lsb\",   color.by = NULL,   pattern.by = NULL,   shape.by = NULL,   facet.by = NULL,   limit.by = NULL,   flip = FALSE,   stripe = flip,   p.top = Inf,   p.adj = \"fdr\",   p.label = TRUE,   ci = 95,   outliers = NULL,   xlab.angle = \"auto\",   y.trans = \"sqrt\",   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize BIOM data with boxplots. — taxa_boxplot","text":"biom BIOM object, returned read_biom(). x categorical metadata column name use x-axis. default, NULL puts taxa along x-axis. rank rank(s) taxa display. E.g. \"Phylum\", \"Genus\", etc. Run taxa_ranks() see options given BIOM object. default, NULL, selects lowest level. taxa taxa display. integer value show top n abundant taxa. value 0 <= n < 1 show taxa mean abundance greater (e.g. 0.1). character vector taxon names show taxa. Default: 5. layers \"box\" (\"x\"), \"bar\", \"violin\", \"dot\", \"strip\", \"crossbar\", \"errorbar\", \"linerange\", \"pointrange\". Single letter abbreviations also accepted. instance, c(\"box\", \"dot\") equivalent c(\"x\", \"d\") \"xd\". See vignette(\"boxplots\") examples . Default: \"lsb\". color., pattern., shape., facet., limit.Metadata columns use aesthetics partitioning. See details. Default: NULL flip Transpose axes, taxa present rows instead columns. Default: FALSE stripe Shade every x position. Default: flip p.top display taxa significant differences abundance. p.top >= 1, p.top significant taxa displayed. p.top less one, taxa adjusted p-value <= p.top displayed. Recommended used combination taxa parameter set lower bound mean abundance considered taxa. Default: Inf p.adj Method use multiple comparisons adjustment p-values. Run p.adjust.methods list available options. (Default: fdr) p.label Minimum adjusted p-value display plot bracket. p.label = 0.05 -  Use specific value. p.label = TRUE -  equivalent p.label = 0.05 p.label = FALSE -  show stats plot p.label = Inf -  display p-values p.label = NULL -  calculate stats numeric vector one value provided, used breaks asterisk notation. Default: TRUE ci calculate min/max crossbar, errorbar, linerange, pointrange layers. Provide number 75 100 define confidence interval's confidence level, commonly 95 97.5. options : \"range\", \"sd\" (standard deviation), \"se\" (standard error), \"mad\" (median absolute deviation). center mark crossbar pointrange represents mean, except code\"mad\" case represents median. Set NULL disable. Default: 95 outliers Show boxplot outliers? TRUE always show. FALSE always hide. NULL hide overlaying dot strip chart.  Default: NULL xlab.angle rotate tick labels x-axis. 'auto' (default), automatically selects rotation value. 0, 30, 90 sets angle horizontal, angled, vertical, respectively. y.trans transformation apply y-axis. Visualizing differences high- low-abundance taxa best done non-linear axis. Options : \"sqrt\" -  square-root transformation \"log1p\" -  log(y + 1) transformation NULL -  transformation methods allow visualization high- low-abundance taxa simultaneously, without complaint 'zero' count observations. Default: \"sqrt\" ... Parameters matched formal arguments ggplot2 functions. Prefixing parameter names layer name ensures particular parameter passed , , layer. instance, dot.size = 2 d.size = 2 ensures dotplot layer size set 2. special prefix pt. control dot strip layers.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize BIOM data with boxplots. — taxa_boxplot","text":"ggplot2 plot. computed data points statistics available $data $stats, respectively.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_boxplot.html","id":"aesthetics-and-partitions","dir":"Reference","previous_headings":"","what":"Aesthetics and Partitions","title":"Visualize BIOM data with boxplots. — taxa_boxplot","text":"Metadata can used flexibly subset, partition, apply aesthetics creating plot. Common use cases provided . thorough documentation available https://cmmr.github.io/rbiom. color.- categorical metadata column. (Max 1) pattern.- categorical metadata column. (Max 1) shape.- categorical metadata column. (Max 1) facet.- Categorical metadata column(s) . limit.- metadata column(s). built-color palettes colorblind-friendly. available categorical palette names : \"okabe\", \"carto\", \"r4\", \"polychrome\", \"tol\", \"bright\", \"light\", \"muted\", \"vibrant\", \"tableau\", \"classic\", \"alphabet\", \"tableau20\", \"kelly\", \"fishy\". Patterns sourced magick R package. Pattern names : \"bricks\", \"hexagons\", \"horizontalsaw\", \"hs_fdiagonal\", \"fishscales\", \"verticalsaw\", \"checkerboard\", \"octagons\", \"right45\", \"hs_cross\", \"hs_bdiagonal\", \"hs_diagcross\", \"hs_horizontal\", \"hs_vertical\", \"left45\", \"leftshingle\", \"rightshingle\", \"verticalbricks\", \"verticalleftshingle\", \"verticalrightshingle\". Shapes can given per base R - numbers 0 17 various shapes, decimal value ascii character, e.g. -z = 65:90; -Z = 97:122 use letters instead shapes plot. Character strings may used well.","code":"## Colors ----------------------------   color.by = \"Body Site\"   color.by = list('Body Site' = \"bright\")   color.by = list('Body Site' = c(\"Stool\", \"Saliva\"))   color.by = list('Body Site' = list('values' = c(\"Stool\", \"Saliva\"), 'colors' = \"bright\"))   color.by = list('Body Site' = c('Stool' = \"blue\", 'Saliva' = \"green\"))      ## Patterns --------------------------   pattern.by = \"Body Site\"   pattern.by = list('Body Site' = c(\"Stool\", \"Saliva\"))   pattern.by = list('Body Site' = c('Stool' = \"left45\", 'Saliva' = \"hs_cross\"))      ## Shapes ----------------------------   shape.by = \"Body Site\"   shape.by = list('Body Site' = c(\"Stool\", \"Saliva\"))   shape.by = list('Body Site' = c('Stool' = 7, 'Saliva' = 8))      ## Facets ----------------------------   facet.by = \"Body Site\"   facet.by = c(\"Body Site\", \"Sex\")   facet.by = list('Body Site' = c(\"Stool\", \"Saliva\"), \"Sex\")      ## Limits ----------------------------   limit.by = list('Sex' = \"Male\", 'Age' = c(20,40))   limit.by = list('Body Site' = c(\"Saliva\", \"Anterior nares\"), 'Age' = c(NA,35))"},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/taxa_boxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize BIOM data with boxplots. — taxa_boxplot","text":"","code":"library(rbiom)          biom <- sample_rarefy(hmp50)      taxa_boxplot(biom, rank = c(\"Phylum\", \"Genus\"), flip = TRUE)      taxa_boxplot(biom, rank = \"Genus\", taxa = 3, layers = \"ps\", color.by = list(\"Body Site\" = c('Saliva' = \"blue\", 'Stool' = \"red\")))"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_corrplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize taxa abundance with scatterplots and trendlines. — taxa_corrplot","title":"Visualize taxa abundance with scatterplots and trendlines. — taxa_corrplot","text":"Visualize taxa abundance scatterplots trendlines.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_corrplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize taxa abundance with scatterplots and trendlines. — taxa_corrplot","text":"","code":"taxa_corrplot(   biom,   x,   rank = NULL,   taxa = 6,   layers = \"t\",   color.by = NULL,   facet.by = NULL,   limit.by = NULL,   model = \"lm\",   stats = \"emtrends\",   p.top = Inf,   p.adj = \"fdr\",   ci = 95,   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_corrplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize taxa abundance with scatterplots and trendlines. — taxa_corrplot","text":"biom BIOM object, returned read_biom(). x numeric metadata column name use x-axis. Required. rank rank taxa display. E.g. \"Phylum\", \"Genus\", etc. Run taxa_ranks() see options given BIOM object. default, NULL, selects lowest level. taxa taxa display. integer value show top n abundant taxa. value 0 <= n < 1 show taxa mean abundance greater (e.g. 0.1). character vector taxon names show taxa. Default: 6. layers \"trend\", \"scatter\". Single letter abbreviations also accepted. instance, c(\"trend\", \"scatter\") equivalent c(\"t\", \"s\") \"ts\". See vignette(\"corrplots\") examples . Default: \"t\". color., facet., limit.Metadata columns use aesthetics partitioning. See details. Default: NULL model type trendline fit data. Options : \"lm\" -   Linear model: stats::lm(formula = y ~ x).) \"log\" -  Logarithmic model: stats::lm(formula = y ~ log(x)). \"gam\" -  Generalized additive model: mgcv::gam(formula = y ~ s(x, bs = \"cs\"), method = \"REML\"). Default: \"lm\"  can alternatively provide list length two first element character vector length 1 naming function, second element list arguments pass function. One function's arguments must named 'formula'. example, model = list(\"stats::lm\", list(formula = y ~ x)). stats statistic display plot. Options : \"fit\" -  well model fit data? \"terms\" -  strongly 'x' influence 'y'? \"emmeans\" -  average 'y' value non-zero? \"emtrends\" -  trendline non-zero slope? \"emm_pairs\" -  means trendlines different? \"emt_pairs\" -  slopes trendlines different? \"hide\" -  show stats plot, still compute . \"none\" -  compute show statistics. Default: \"emtrends\"  Note: \"emm_pairs\" \"emt_pairs\" can calculated using color.metadata column one level.  Statistical tests run separately facet. P-values adjusted multiple comparisons considering facets together. Unless stats = \"none\", stats attached plot attr(,'stats'). p.top display taxa significant differences abundance. p.top >= 1, p.top significant taxa displayed. p.top less one, taxa adjusted p-value <= p.top displayed. Recommended used combination taxa parameter set lower bound mean abundance considered taxa. Default: Inf p.adj Method use multiple comparisons adjustment p-values. Run p.adjust.methods list available options. Default: \"fdr\". ci confidence interval display around trendline. Default: 95. ... Additional parameters pass along ggplot2 functions. Prefix parameter name either t. s./pt. ensure gets passed () geom_smooth geom_point, respectively. instance, s.size = 2 ensures scatterplot points size set 2.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_corrplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize taxa abundance with scatterplots and trendlines. — taxa_corrplot","text":"ggplot2 plot. computed data points statistics attached attr(p, 'data') attr(p, 'stats'), respectively.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_corrplot.html","id":"aesthetics-and-partitions","dir":"Reference","previous_headings":"","what":"Aesthetics and Partitions","title":"Visualize taxa abundance with scatterplots and trendlines. — taxa_corrplot","text":"Metadata can used flexibly subset, partition, apply aesthetics creating plot. Common use cases provided . thorough documentation available https://cmmr.github.io/rbiom. color.- metadata column. (Max 1) facet.- categorical metadata column(s). limit.- metadata column(s). built-color palettes colorblind-friendly. available categorical palette names : \"okabe\", \"carto\", \"r4\", \"polychrome\", \"tol\", \"bright\", \"light\", \"muted\", \"vibrant\", \"tableau\", \"classic\", \"alphabet\", \"tableau20\", \"kelly\", \"fishy\". available numeric palette names : \"reds\", \"oranges\", \"greens\", \"purples\", \"grays\", \"acton\", \"bamako\", \"batlow\", \"bilbao\", \"buda\", \"davos\", \"devon\", \"grayC\", \"hawaii\", \"imola\", \"lajolla\", \"lapaz\", \"nuuk\", \"oslo\", \"tokyo\", \"turku\", \"bam\", \"berlin\", \"broc\", \"cork\", \"lisbon\", \"roma\", \"tofino\", \"vanimo\", \"vik\"","code":"## Colors ----------------------------   color.by = \"Body Site\"   color.by = list('Body Site' = \"bright\")   color.by = list('Body Site' = c(\"Stool\", \"Saliva\"))   color.by = list('Body Site' = list('values' = c(\"Stool\", \"Saliva\"), 'colors' = \"bright\"))   color.by = list('Body Site' = c('Stool' = \"blue\", 'Saliva' = \"green\"))      ## Facets ----------------------------   facet.by = \"Body Site\"   facet.by = c(\"Body Site\", \"Sex\")   facet.by = list('Body Site' = c(\"Stool\", \"Saliva\"), \"Sex\")      ## Limits ----------------------------   limit.by = list('Sex' = \"Male\", 'Age' = c(20,40))   limit.by = list('Body Site' = c(\"Saliva\", \"Anterior nares\"), 'Age' = c(NA,35))"},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/taxa_corrplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize taxa abundance with scatterplots and trendlines. — taxa_corrplot","text":"","code":"library(rbiom)          biom <- sample_rarefy(hmp50)     taxa_corrplot(biom, \"BMI\", color.by=\"Body Site\", taxa = 4)  #> `geom_smooth()` using formula = 'y ~ x'"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Display taxa abundances as a heatmap. — taxa_heatmap","title":"Display taxa abundances as a heatmap. — taxa_heatmap","text":"Display taxa abundances heatmap.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display taxa abundances as a heatmap. — taxa_heatmap","text":"","code":"taxa_heatmap(   biom,   rank = NULL,   taxa = 6,   grid = list(label = \"{rank} Abundance\", colors = \"bilbao\"),   color.by = NULL,   order.by = NULL,   limit.by = NULL,   label = TRUE,   label_size = NULL,   rescale = \"none\",   trees = TRUE,   clust = \"complete\",   dist = \"euclidean\",   tree_height = NULL,   track_height = NULL,   ratio = 1,   legend = \"right\",   xlab.angle = \"auto\",   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display taxa abundances as a heatmap. — taxa_heatmap","text":"biom BIOM object, returned read_biom(). Alternatively, dist class distance matrix can given, case parameters ord, k, ... allowed. rank rank(s) taxa display, example \"Phylum\" \"Genus\". Run taxa_ranks() see options given BIOM object. default, NULL, selects lowest level. taxa taxa give separate rows. integer value show top n abundant taxa. value 0 <= n < 1 show taxa mean abundance greater (e.g. 0.1). character vector taxon names show taxa. Default: 6. grid Color palette name, list entries label, colors, range, bins, na.color, /guide. See Track Definitions section details. Default: list(label = \"{rank} Abundance\", colors = \"bilbao\"). color.Add annotation tracks metadata column(s). See \"Annotation Tracks\" section details. Default: NULL order.metadata column(s) use ordering samples across x y axes. Overrides clust argument. See \"Ordering Limiting\" section details. Default: NULL limit.Metadata definition(s) use sample subsetting prior calculations. See \"Ordering Limiting\" section details. Default: NULL label Label matrix rows columns. can supply list logical vector length two control row labels column labels separately, example label = c(rows = TRUE, cols = FALSE), simply label = c(T, F). valid options \"rows\", \"cols\", \"\", \"bottom\", \"right\", \"none\". Default: TRUE. label_size font size use row column labels. can supply numeric vector length two control row label sizes column label sizes separately, example c(rows = 20, cols = 8), simply c(20, 8). Default: NULL, computes: pmax(8, pmin(20, 100 / dim(mtx))). rescale Rescale rows columns common min/max. Options: \"none\", \"rows\", \"cols\". Default: \"none\". trees Draw dendrogram rows (left) columns (top). can supply list logical vector length two control row tree column tree separately, example trees = c(rows = T, cols = F), simply trees = c(T, F). valid options \"rows\", \"cols\", \"\", \"left\", \"top\", \"none\". Default: TRUE. clust Clustering algorithm reordering rows columns similarity. can supply list character vector length two control row column clustering separately, example clust = c(rows = \"complete\", cols = NA), simply clust = c(\"complete\", NA). Default: \"complete\".   dist Distance algorithm use reordering rows columns similarity. can supply list character vector length two control row column clustering separately, example dist = c(rows = \"euclidean\", cols = \"maximum\"), simply dist = c(\"euclidean\", \"maximum\"). Default: \"euclidean\".   tree_height, track_height height dendrogram annotation tracks multiples (fractions) smaller dimension grid cell size. Use numeric vector length two assign c(left, top) independently. Default: NULL, computes: tree_height = sqrt(min(dim(mtx))), track_height = tree_height / 4. ratio Height/width ratio entire grid. Default: 1 (square). legend place legend. Options : \"right\" \"bottom\". Default: \"right\". xlab.angle Angle labels bottom plot. Options \"auto\", 0, 30, 90. Default: \"auto\". ... Additional arguments pass ggplot2::theme(). example, labs.title = \"Plot Title\".","code":"Options are:     \\itemize{       \\item{\\code{FALSE} or \\code{NA} - }{ Disable reordering. }       \\item{An \\code{hclust} class object} { E.g. from [stats::hclust()]. }       \\item{A method name - }{ \\code{\"ward.D\"},          \\code{\"ward.D2\"}, \\code{\"single\"}, \\code{\"complete\"},          \\code{\"average\"}, \\code{\"mcquitty\"}, \\code{\"median\"}, or          \\code{\"centroid\"}. }     } Options are:     \\itemize{       \\item{A \\code{dist} class object} { E.g. from [stats::dist()] or [bdiv_distmat()]. }       \\item{A method name - }{ \\code{\"euclidean\"},          \\code{\"maximum\"}, \\code{\"manhattan\"}, \\code{\"canberra\"},          \\code{\"binary\"}, or \\code{\"minkowski\"}. }     }"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display taxa abundances as a heatmap. — taxa_heatmap","text":"ggplot2 plot. computed data points attached attr(, 'data').","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_heatmap.html","id":"annotation-tracks","dir":"Reference","previous_headings":"","what":"Annotation Tracks","title":"Display taxa abundances as a heatmap. — taxa_heatmap","text":"Metadata can displayed colored tracks heatmap. Common use cases provided , thorough documentation available https://cmmr.github.io/rbiom . following entries track definitions understood: colors -  pre-defined palette name custom set colors map . range -  c(min,max) use scale values. label -  Label track. Defaults name list element. side -  Options \"top\" (default) \"left\". na.color -  color use NA values. bins -  Bin gradient many bins/steps. guide -  list arguments guide_colorbar() guide_legend(). built-color palettes colorblind-friendly. Categorical palette names: \"okabe\", \"carto\", \"r4\", \"polychrome\", \"tol\", \"bright\", \"light\", \"muted\", \"vibrant\", \"tableau\", \"classic\", \"alphabet\", \"tableau20\", \"kelly\", \"fishy\". Numeric palette names: \"reds\", \"oranges\", \"greens\", \"purples\", \"grays\", \"acton\", \"bamako\", \"batlow\", \"bilbao\", \"buda\", \"davos\", \"devon\", \"grayC\", \"hawaii\", \"imola\", \"lajolla\", \"lapaz\", \"nuuk\", \"oslo\", \"tokyo\", \"turku\", \"bam\", \"berlin\", \"broc\", \"cork\", \"lisbon\", \"roma\", \"tofino\", \"vanimo\", \"vik\".","code":"## Categorical ---------------------------- color.by = \"Body Site\" color.by = list('Body Site' = \"bright\") color.by = list('Body Site' = c(\"Stool\", \"Saliva\"), 'colors' = \"bright\") color.by = list('Body Site' = c('Stool' = \"blue\", 'Saliva' = \"green\"))  ## Numeric -------------------------------- color.by = \"Age\" color.by = list('Age' = \"reds\") color.by = list('Age' = c(20,NA), 'colors' = \"reds\") # at least 20 years old color.by = list('Age' = c(20,40)) # between 20 and 40 years old (inclusive)  ## Multiple Tracks ------------------------ color.by = c(\"Body Site\", \"Age\") color.by = list('Body Site' = \"bright\", 'Age' = \"reds\") color.by = list(   'Body Site' = c('Stool' = \"blue\", 'Saliva' = \"green\"),   'Age'       = list(range = c(20,40), 'colors' = \"reds\") )"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_heatmap.html","id":"ordering-and-limiting","dir":"Reference","previous_headings":"","what":"Ordering and Limiting","title":"Display taxa abundances as a heatmap. — taxa_heatmap","text":"order.controls metadata column(s) used arrange samples plot. also enables subsetting particular set range values. Prefix column name - arrange values descending order rather ascending. limit.used specify subset samples without side-effects aesthetics. especially useful limiting data single categorical metadata value. Unlike *.parameters, limit.must always named list().","code":"## Categorical ---------------------------- order.by = \"Body Site\" order.by = list('Body Site' = c(\"Stool\", \"Saliva\"))  ## Numeric -------------------------------- order.by = \"-Age\" order.by = list('Age'  = c(20,NA)) # at least 20 years old order.by = list('-Age' = c(20,40)) # between 20 and 40 years old (inclusive)  ## Multiple / Mixed ----------------------- order.by = c(\"-Body Site\", \"Age\") order.by = list(\"Body Site\", '-Age' = c(20,40)) ## Categorical ---------------------------- limit.by = list('Sex' = \"Male\")  ## Numeric -------------------------------- limit.by = list('Age' = c(20,NA)) # at least 20 years old limit.by = list('Age' = c(20,40)) # between 20 and 40 years old (inclusive)  ## Multiple / Mixed ----------------------- limit.by = list(   'Sex'       = \"Male\",    'Body Site' = c(\"Stool\", \"Saliva\")   'Age'       = c(20,40) )"},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/taxa_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display taxa abundances as a heatmap. — taxa_heatmap","text":"","code":"library(rbiom)          biom <- hmp50 %>% sample_rarefy() %>% sample_select(1:10)     taxa_heatmap(biom, rank=\"Phylum\", color.by=\"Body Site\")"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxa abundances per sample, at the specified taxonomic rank. — taxa_matrix","title":"Taxa abundances per sample, at the specified taxonomic rank. — taxa_matrix","text":"Taxa abundances per sample, specified taxonomic rank.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taxa abundances per sample, at the specified taxonomic rank. — taxa_matrix","text":"","code":"taxa_matrix(   biom,   rank = \"OTU\",   taxa = NULL,   map = NULL,   lineage = FALSE,   sparse = FALSE,   unc = \"singly\",   other = FALSE )"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Taxa abundances per sample, at the specified taxonomic rank. — taxa_matrix","text":"biom matrix, simple_triplet_matrix, BIOM object, returned read_biom(). matrices, rows columns assumed taxa samples, respectively. rank taxonomic rank. E.g. rank = \"OTU\", rank = \"Phylum\", etc. May also given numerically: 0 OTU, 1 highest level (.e. Kingdom), extending number taxonomic ranks encoded original biom file. Run taxa_ranks(biom) fetch names available ranks. taxa Limit number taxa returned matrix. Depending value type, different filter applied. NULL -  Retain taxa. integer >= 1 -  N abundant taxa retained.  Example: taxa_matrix(biom, 'Genus', 5) returns five abundant genera. numeric 0 1 -  Retain taxa abundance greater equal N.  Example: taxa_matrix(biom, 'Phylum', 0.1) returns phyla relative abundance least 10 percent. character vector -  taxa names retained.  Example: taxa_matrix(biom, 'Phylum', c(\"Firmicutes\", \"Bacteroidetes\")) retain two phyla. Default: NULL map character matrix defining value taxa IDs assigned taxonomic rank. map=NULL biom BIOM class object, map automatically loaded biom$taxonomy. map must NULL biom matrix simple_triplet_matrix. See example example map's structure. Default: NULL lineage Include ranks name taxa. instance, setting TRUE produce Bacteria; Actinobacteria; Coriobacteriia; Coriobacteriales. Whereas setting FALSE (default) return simply Coriobacteriales. want set TRUE genus names (Incertae_Sedis) map multiple higher level ranks. Default: FALSE sparse true, returns sparse matrix described slam::simple_triplet_matrix, otherwise returns normal R matrix object. Sparse matrices likely considerably memory efficient scenario. Default: FALSE unc handle unclassified, uncultured, similarly ambiguous taxa names. Options : \"singly\" -  Replaces OTU name. \"grouped\" -  Replaces higher rank's name. \"drop\" -  Excludes result. \"asis\" -  check/modify taxa names. Default: \"singly\"  Non-ambiguous abbreviations allowed Sum non-itemized taxa \"\" taxa. FALSE, returns taxa matched `taxa` argument. Specifying TRUE adds \"\" returned set. string can also given imply TRUE, value name use instead \"\". Default: FALSE","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Taxa abundances per sample, at the specified taxonomic rank. — taxa_matrix","text":"numeric matrix samples row names, taxonomic identifiers column names.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Taxa abundances per sample, at the specified taxonomic rank. — taxa_matrix","text":"","code":"library(rbiom)          taxa_ranks(hmp50) #> [1] \"Kingdom\" \"Phylum\"  \"Class\"   \"Order\"   \"Family\"  \"Genus\"            phyla <- taxa_matrix(hmp50, 'Phylum')     phyla[1:4,1:6] #>       Actinobacteria Bacteroidetes Cyanobacteria Deinococcus Thermus Firmicutes #> HMP01             18           276             0                   0       1208 #> HMP02             60           221             0                   0        931 #> HMP03            126           313             0                   0        787 #> HMP04            120           218             0                   0        865 #>       Fusobacteria #> HMP01           41 #> HMP02           44 #> HMP03            6 #> HMP04          276          # Custom matrices should be formatted like so:     counts <- otu_matrix(hmp50)     map    <- otu_taxonomy(hmp50)          counts[1:3,1:6] #>          HMP01 HMP02 HMP03 HMP04 HMP05 HMP06 #> UncO2713     0     0     0     0     0     0 #> UncO4101     1     5     6    18     5    15 #> AnmMass2     0     0     0     0     0     0     map[1:3,1:4] #>          Kingdom    Phylum           Class            Order             #> UncO2713 \"Bacteria\" \"Bacteroidetes\"  \"Bacteroidia\"    \"Bacteroidales\"   #> UncO4101 \"Bacteria\" \"Firmicutes\"     \"Clostridia\"     \"Clostridiales\"   #> AnmMass2 \"Bacteria\" \"Actinobacteria\" \"Actinobacteria\" \"Actinomycetales\"          phyla <- taxa_matrix(counts, 'Phylum', map=map)     phyla[1:3,1:6] #>       Actinobacteria Bacteroidetes Cyanobacteria Deinococcus Thermus Firmicutes #> HMP01             18           276             0                   0       1208 #> HMP02             60           221             0                   0        931 #> HMP03            126           313             0                   0        787 #>       Fusobacteria #> HMP01           41 #> HMP02           44 #> HMP03            6"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_means.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the taxa abundances. — taxa_means","title":"Get the taxa abundances. — taxa_means","text":"Get taxa abundances.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_means.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the taxa abundances. — taxa_means","text":"","code":"taxa_means(biom, rank = NULL)"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_means.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the taxa abundances. — taxa_means","text":"biom BIOM object, returned read_biom(). rank taxonomic rank return means . default, NULL, return OTU means order appear otu_matrix(). NULL, returned means ordered abundance least abundant.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_means.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the taxa abundances. — taxa_means","text":"numeric vector, named taxa names.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_means.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the taxa abundances. — taxa_means","text":"","code":"library(rbiom)          taxa_means(hmp50, 'Genus') %>% head(10) #>     Lactobacillus     Streptococcus Corynebacterium 1       Bacteroides  #>            803.74            491.52            328.66            323.22  #>    Staphylococcus Propionibacterium       Haemophilus       Veillonella  #>            275.50            251.70            115.72             78.40  #>     Unc. Unc0266w         Neisseria  #>             63.56             50.22"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_ranks.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set the names of the taxonomic ranks. — taxa_ranks","title":"Get or set the names of the taxonomic ranks. — taxa_ranks","text":"Get set names taxonomic ranks.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_ranks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set the names of the taxonomic ranks. — taxa_ranks","text":"","code":"taxa_ranks(biom)  taxa_ranks(x) <- value"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_ranks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set the names of the taxonomic ranks. — taxa_ranks","text":"biom, x BIOM object, returned read_biom(). value character vector new taxa rank names.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_ranks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set the names of the taxonomic ranks. — taxa_ranks","text":"character vector taxa rank names biom.","code":""},{"path":[]},{"path":"https://cmmr.github.io/rbiom/reference/taxa_ranks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set the names of the taxonomic ranks. — taxa_ranks","text":"","code":"library(rbiom)           biom <- hmp50          taxa_ranks(biom) #> [1] \"Kingdom\" \"Phylum\"  \"Class\"   \"Order\"   \"Family\"  \"Genus\"            taxa_ranks(biom) <- paste0(\"Level\", seq_len(n_ranks(biom)))     taxa_ranks(biom) #> [1] \"Level1\" \"Level2\" \"Level3\" \"Level4\" \"Level5\" \"Level6\""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_sums.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the taxa abundances. — taxa_sums","title":"Get the taxa abundances. — taxa_sums","text":"Get taxa abundances.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_sums.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the taxa abundances. — taxa_sums","text":"","code":"taxa_sums(biom, rank = NULL)"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_sums.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the taxa abundances. — taxa_sums","text":"biom BIOM object, returned read_biom(). rank taxonomic rank return sums . default, NULL, returns OTU sums order appear otu_matrix(). NULL, returned sums ordered abundant least abundant.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_sums.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the taxa abundances. — taxa_sums","text":"numeric vector, named taxa names.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_sums.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the taxa abundances. — taxa_sums","text":"","code":"library(rbiom)          taxa_sums(hmp50, 'Genus') %>% head(10) #>     Lactobacillus     Streptococcus Corynebacterium 1       Bacteroides  #>             40187             24576             16433             16161  #>    Staphylococcus Propionibacterium       Haemophilus       Veillonella  #>             13775             12585              5786              3920  #>     Unc. Unc0266w         Neisseria  #>              3178              2511"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a data.frame of taxa abundance for each sample at the specified taxonomic rank. — taxa_table","title":"Generate a data.frame of taxa abundance for each sample at the specified taxonomic rank. — taxa_table","text":"Generate data.frame taxa abundance sample specified taxonomic rank.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a data.frame of taxa abundance for each sample at the specified taxonomic rank. — taxa_table","text":"","code":"taxa_table(   biom,   rank = \"OTU\",   taxa = NULL,   map = NULL,   lineage = FALSE,   md = FALSE,   unc = \"singly\",   other = FALSE )"},{"path":"https://cmmr.github.io/rbiom/reference/taxa_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a data.frame of taxa abundance for each sample at the specified taxonomic rank. — taxa_table","text":"biom matrix, simple_triplet_matrix, BIOM object, returned read_biom(). matrices, rows columns assumed taxa samples, respectively. rank taxonomic rank. E.g. rank = \"OTU\", rank = \"Phylum\", etc. May also given numerically: 0 OTU, 1 highest level (.e. Kingdom), extending number taxonomic ranks encoded original biom file. Run taxa_ranks(biom) fetch names available ranks. taxa Limit number taxa returned matrix. Depending value type, different filter applied. NULL -  Retain taxa. integer >= 1 -  N abundant taxa retained.  Example: taxa_matrix(biom, 'Genus', 5) returns five abundant genera. numeric 0 1 -  Retain taxa abundance greater equal N.  Example: taxa_matrix(biom, 'Phylum', 0.1) returns phyla relative abundance least 10 percent. character vector -  taxa names retained.  Example: taxa_matrix(biom, 'Phylum', c(\"Firmicutes\", \"Bacteroidetes\")) retain two phyla. Default: NULL map character matrix defining value taxa IDs assigned taxonomic rank. map=NULL biom BIOM class object, map automatically loaded biom$taxonomy. map must NULL biom matrix simple_triplet_matrix. See example example map's structure. Default: NULL lineage Include ranks name taxa. instance, setting TRUE produce Bacteria; Actinobacteria; Coriobacteriia; Coriobacteriales. Whereas setting FALSE (default) return simply Coriobacteriales. want set TRUE genus names (Incertae_Sedis) map multiple higher level ranks. Default: FALSE md Include metadata output data frame? Options : FALSE -  include metadata. TRUE -  Include metadata. character vector -  Include specified metadata columns. Default: FALSE unc handle unclassified, uncultured, similarly ambiguous taxa names. Options : \"singly\" -  Replaces OTU name. \"grouped\" -  Replaces higher rank's name. \"drop\" -  Excludes result. \"asis\" -  check/modify taxa names. Default: \"singly\"  Non-ambiguous abbreviations allowed Sum non-itemized taxa \"\" taxa. FALSE, returns taxa matched `taxa` argument. Specifying TRUE adds \"\" returned set. string can also given imply TRUE, value name use instead \"\". Default: FALSE long Format returned data. FALSE, returns matrix samples taxa. set TRUE, returns data frame column names 'Samples', 'Taxa', 'Abundance'. Default: FALSE","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a data.frame of taxa abundance for each sample at the specified taxonomic rank. — taxa_table","text":"data.frame column names \".sample\", \".taxa\", \".abundance\", metadata requested md.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/taxa_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a data.frame of taxa abundance for each sample at the specified taxonomic rank. — taxa_table","text":"","code":"library(rbiom)          taxa_ranks(hmp50) #> [1] \"Kingdom\" \"Phylum\"  \"Class\"   \"Order\"   \"Family\"  \"Genus\"            head(taxa_table(hmp50, 'Phylum')) #>   .sample          .taxa .abundance #> 1   HMP01 Actinobacteria         18 #> 2   HMP02 Actinobacteria         60 #> 3   HMP03 Actinobacteria        126 #> 4   HMP04 Actinobacteria        120 #> 5   HMP05 Actinobacteria         30 #> 6   HMP06 Actinobacteria         71          # Custom matrices should be formatted like so:     counts <- otu_matrix(hmp50)     map    <- otu_taxonomy(hmp50)          counts[1:3,1:6] #>          HMP01 HMP02 HMP03 HMP04 HMP05 HMP06 #> UncO2713     0     0     0     0     0     0 #> UncO4101     1     5     6    18     5    15 #> AnmMass2     0     0     0     0     0     0     map[1:3,1:4] #>          Kingdom    Phylum           Class            Order             #> UncO2713 \"Bacteria\" \"Bacteroidetes\"  \"Bacteroidia\"    \"Bacteroidales\"   #> UncO4101 \"Bacteria\" \"Firmicutes\"     \"Clostridia\"     \"Clostridiales\"   #> AnmMass2 \"Bacteria\" \"Actinobacteria\" \"Actinobacteria\" \"Actinomycetales\"          head(taxa_table(counts, 'Phylum', map=map)) #>   .sample          .taxa .abundance #> 1   HMP01 Actinobacteria         18 #> 2   HMP02 Actinobacteria         60 #> 3   HMP03 Actinobacteria        126 #> 4   HMP04 Actinobacteria        120 #> 5   HMP05 Actinobacteria         30 #> 6   HMP06 Actinobacteria         71"},{"path":"https://cmmr.github.io/rbiom/reference/top_taxa.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the names of the most abundant taxa. — top_taxa","title":"Get the names of the most abundant taxa. — top_taxa","text":"Get names abundant taxa.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/top_taxa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the names of the most abundant taxa. — top_taxa","text":"","code":"top_taxa(biom, rank = \"OTU\", n = Inf)"},{"path":"https://cmmr.github.io/rbiom/reference/top_taxa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the names of the most abundant taxa. — top_taxa","text":"biom BIOM object, returned read_biom(). rank taxonomic rank interest. Default: \"OTU\". n number taxa names return. Default: Inf.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/top_taxa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the names of the most abundant taxa. — top_taxa","text":"character vector names top n abundant taxa, ordered abundant least abundant.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/top_taxa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the names of the most abundant taxa. — top_taxa","text":"","code":"library(rbiom)          top_taxa(hmp50, 'Genus', 10) #>  [1] \"Lactobacillus\"     \"Streptococcus\"     \"Corynebacterium 1\" #>  [4] \"Bacteroides\"       \"Staphylococcus\"    \"Propionibacterium\" #>  [7] \"Haemophilus\"       \"Veillonella\"       \"Unc. Unc0266w\"     #> [10] \"Neisseria\""},{"path":"https://cmmr.github.io/rbiom/reference/tree_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Provides a 'treedata' S4 object for use in ggtree functions. — tree_data","title":"Provides a 'treedata' S4 object for use in ggtree functions. — tree_data","text":"Provides 'treedata' S4 object use ggtree functions.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/tree_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provides a 'treedata' S4 object for use in ggtree functions. — tree_data","text":"","code":"tree_data(biom, reads = TRUE, clades = TRUE)"},{"path":"https://cmmr.github.io/rbiom/reference/tree_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provides a 'treedata' S4 object for use in ggtree functions. — tree_data","text":"biom BIOM object, returned read_biom(). reads Include 'reads' column indicating sum taxa observations belonging node/leaf. Default: TRUE. clades Notate top-monophyletic nodes. default, TRUE, adds column every rank biom object. character vector ranks can also passed . vector named, names used naming columns returned treedata object. Set NULL return clade notations.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/tree_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provides a 'treedata' S4 object for use in ggtree functions. — tree_data","text":"","code":"library(rbiom)          # Needs the optional ggtree package     if (nzchar(system.file(package = \"ggtree\"))) {            tree_data(hmp50)            } #> 'treedata' S4 object'. #>  #> ...@ phylo: #>  #> Phylogenetic tree with 490 tips and 489 internal nodes. #>  #> Tip labels: #>   EschC738, Unc92490, Unc02pjp, Unc26984, Unc41900, AntBa370, ... #>  #> Rooted; includes branch lengths. #>  #> with the following features available: #>   '', 'reads', 'Kingdom', 'Phylum', 'Class', 'Order', 'Family', 'Genus', 'OTU'. #>  #> # The associated data tibble abstraction: 979 × 11 #> # The 'node', 'label' and 'isTip' are from the phylo tree. #>     node label    isTip reads Kingdom Phylum Class Order      Family Genus OTU   #>    <dbl> <chr>    <lgl> <dbl> <chr>   <chr>  <chr> <chr>      <chr>  <chr> <chr> #>  1     1 EschC738 TRUE    100 NA      NA     NA    Enterobac… Enter… Esch… Esch… #>  2     2 Unc92490 TRUE    746 NA      NA     NA    NA         NA     Haem… Unc9… #>  3     3 Unc02pjp TRUE    242 NA      NA     NA    NA         NA     Acti… Unc0… #>  4     4 Unc26984 TRUE   5040 NA      NA     NA    NA         NA     Haem… Unc2… #>  5     5 Unc41900 TRUE      1 NA      NA     NA    Enterobac… Enter… Prov… Unc4… #>  6     6 AntBa370 TRUE     43 NA      NA     NA    NA         NA     NA    AntB… #>  7     7 AntSp625 TRUE      1 NA      NA     NA    NA         NA     NA    AntS… #>  8     8 MxlSpe11 TRUE      8 NA      NA     NA    NA         NA     NA    MxlS… #>  9     9 FuoMancu TRUE      1 NA      NA     NA    NA         NA     NA    FuoM… #> 10    10 PeuS1830 TRUE     18 NA      NA     NA    Pseudomon… Pseud… Pseu… PeuS… #> # ℹ 969 more rows"},{"path":"https://cmmr.github.io/rbiom/reference/tree_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Display a dendrogram of the phylogenetic tree. — tree_plot","title":"Display a dendrogram of the phylogenetic tree. — tree_plot","text":"Display dendrogram phylogenetic tree.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/tree_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display a dendrogram of the phylogenetic tree. — tree_plot","text":"","code":"tree_plot(   biom,   layout = \"rectangular\",   tiplab = NULL,   color.by = NULL,   label = NULL,   cladelab = NULL,   top = NULL,   right = NULL,   bottom = NULL,   left = NULL,   ... )"},{"path":"https://cmmr.github.io/rbiom/reference/tree_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display a dendrogram of the phylogenetic tree. — tree_plot","text":"biom BIOM object, returned read_biom(). layout layout option supported ggtree::ggtree(): \"rectangular\", \"dendrogram\", \"slanted\", \"ellipse\", \"roundrect\", \"fan\", \"circular\", \"inward_circular\", \"radial\", \"equal_angle\", \"daylight\" \"ape\". Default: \"rectangular\". tiplab Label tree leafs taxa names. Options NULL (tip labels) taxonomic rank (example tiplab = \"Genus\"). Default: NULL. color.color tree. Currently supports options NULL (coloring) '.reads' (color number taxa observations). Default: NULL. label, cladelab Label monophyletic clades. can specify different taxonomic ranks internal (label) external (cladelab) annotations. Default: NULL. top, right, bottom, left Add additional space around tree. Sometimes necessary wide text annotations. Set fraction tree's width/height. instance, right = 1 reserves right half plotting area non-tree elements. Default: NULL.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/tree_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display a dendrogram of the phylogenetic tree. — tree_plot","text":"","code":"library(rbiom)          hmp1 <- sample_select(hmp50, samples = \"HMP10\")          # Needs the optional ggtree package     if (nzchar(system.file(package = \"ggtree\")))       tree_plot(hmp50)             if (nzchar(system.file(package = \"ggtree\")))       tree_plot(hmp1, cladelab = \"Phylum\", layout = \"roundrect\")           if (nzchar(system.file(package = \"ggtree\")))       tree_plot(hmp1, tiplab = \"Genus\", layout = \"fan\", color.by = \".reads\")"},{"path":"https://cmmr.github.io/rbiom/reference/tree_subset.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a subtree by specifying tips to keep. — tree_subset","title":"Create a subtree by specifying tips to keep. — tree_subset","text":"Create subtree specifying tips keep.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/tree_subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a subtree by specifying tips to keep. — tree_subset","text":"","code":"tree_subset(tree, tips)"},{"path":"https://cmmr.github.io/rbiom/reference/tree_subset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a subtree by specifying tips to keep. — tree_subset","text":"tree phylo object, returned read_tree(). tips character, numeric, logical vector tips keep.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/tree_subset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a subtree by specifying tips to keep. — tree_subset","text":"phylo object subtree.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/tree_subset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a subtree by specifying tips to keep. — tree_subset","text":"","code":"library(rbiom)          infile <- system.file(\"extdata\", \"newick.tre\", package = \"rbiom\")     tree <- read_tree(infile)     tree #>  #> Phylogenetic tree with 20 tips and 19 internal nodes. #>  #> Tip labels: #>   Pa5Bac29, AtlPorci, AciSp313, MxlBact8, MxlBacte, PseS1107, ... #>  #> Rooted; includes branch lengths.          subtree <- tree_subset(tree, tips = head(tree_tips(tree)))     subtree #>  #> Phylogenetic tree with 6 tips and 5 internal nodes. #>  #> Tip labels: #>   Pa5Bac29, AtlPorci, AciSp313, MxlBact8, MxlBacte, PseS1107 #>  #> Rooted; includes branch lengths."},{"path":"https://cmmr.github.io/rbiom/reference/tree_tips.html","id":null,"dir":"Reference","previous_headings":"","what":"Names of a phylogenetic tree's tips/leafs. — tree_tips","title":"Names of a phylogenetic tree's tips/leafs. — tree_tips","text":"Names phylogenetic tree's tips/leafs.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/tree_tips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Names of a phylogenetic tree's tips/leafs. — tree_tips","text":"","code":"tree_tips(x)"},{"path":"https://cmmr.github.io/rbiom/reference/tree_tips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Names of a phylogenetic tree's tips/leafs. — tree_tips","text":"x phylo object, returned read_tree().","code":""},{"path":"https://cmmr.github.io/rbiom/reference/tree_tips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Names of a phylogenetic tree's tips/leafs. — tree_tips","text":"character vector leaf names.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/tree_tips.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Names of a phylogenetic tree's tips/leafs. — tree_tips","text":"","code":"library(rbiom)          infile <- system.file(\"extdata\", \"newick.tre\", package = \"rbiom\")     tree  <- read_tree(infile)     leafs <- tree_tips(tree)     head(leafs) #> [1] \"Pa5Bac29\" \"AtlPorci\" \"AciSp313\" \"MxlBact8\" \"MxlBacte\" \"PseS1107\""},{"path":"https://cmmr.github.io/rbiom/reference/unifrac.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Weighted and Unweighted UniFrac distance matrices. — unifrac","title":"Compute Weighted and Unweighted UniFrac distance matrices. — unifrac","text":"wrapper around bdiv_distmat() common use case.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/unifrac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Weighted and Unweighted UniFrac distance matrices. — unifrac","text":"","code":"unifrac(biom, weighted = TRUE, tree = NULL)"},{"path":"https://cmmr.github.io/rbiom/reference/unifrac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Weighted and Unweighted UniFrac distance matrices. — unifrac","text":"biom matrix, simple_triplet_matrix, BIOM object, returned read_biom(). matrices, rows columns assumed taxa samples, respectively. weighted Use weighted UniFrac, takes abundance account rather simply presence/absence. tree phylo object providing phylogenetic tree taxa names biom. tree=NULL, tree loaded biom, encoded .","code":""},{"path":"https://cmmr.github.io/rbiom/reference/unifrac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Weighted and Unweighted UniFrac distance matrices. — unifrac","text":"distance matrix class dist.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/unifrac.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Weighted and Unweighted UniFrac distance matrices. — unifrac","text":"","code":"library(rbiom)           biom <- sample_select(hmp50, 1:10)          dm <- unifrac(biom)     plot(hclust(dm), cex=.8)      as.matrix(dm)[1:4,1:4] #>           HMP01     HMP02     HMP03     HMP04 #> HMP01 0.0000000 0.1950253 0.3687298 0.4239831 #> HMP02 0.1950253 0.0000000 0.2101679 0.3187533 #> HMP03 0.3687298 0.2101679 0.0000000 0.3040937 #> HMP04 0.4239831 0.3187533 0.3040937 0.0000000          # Using a custom matrix and tree     mtx <- matrix(sample.int(12*20), ncol=20)     dimnames(mtx) <- list(LETTERS[1:12], letters[1:20])     tree <- ape::as.phylo(hclust(dist(mtx)))          dm <- unifrac(mtx, tree=tree)     as.matrix(dm)[1:4,1:4] #>          a        b        c        d #> a   0.0000 192.4499 256.3002 153.7843 #> b 192.4499   0.0000 158.9397 162.8696 #> c 256.3002 158.9397   0.0000 166.1194 #> d 153.7843 162.8696 166.1194   0.0000"},{"path":"https://cmmr.github.io/rbiom/reference/write_biom.html","id":null,"dir":"Reference","previous_headings":"","what":"Write counts, metadata, taxonomy, and phylogeny to a biom file. — write_biom","title":"Write counts, metadata, taxonomy, and phylogeny to a biom file. — write_biom","text":"Write counts, metadata, taxonomy, phylogeny biom file.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_biom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write counts, metadata, taxonomy, and phylogeny to a biom file. — write_biom","text":"","code":"write_biom(biom, file, format = \"json\")"},{"path":"https://cmmr.github.io/rbiom/reference/write_biom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write counts, metadata, taxonomy, and phylogeny to a biom file. — write_biom","text":"biom BIOM object save file. another class object given, coerced matrix output tabular format, provided numeric rownames colnames. file Path output file. file name ends .gz .bz2, file contents compressed accordingly. format Options tab, json, hdf5, corresponding classic tabular format, biom format version 1.0 biom version 2.1, respectively. See http://biom-format.org/documentation/ details. NOTE: write HDF5 formatted BIOM files, BioConductor R package rhdf5 must installed.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_biom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write counts, metadata, taxonomy, and phylogeny to a biom file. — write_biom","text":"normalized filepath written (invisibly).","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Write BIOM counts to a tab-separated value (tsv) file. — write_counts","title":"Write BIOM counts to a tab-separated value (tsv) file. — write_counts","text":"Write BIOM counts tab-separated value (tsv) file.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write BIOM counts to a tab-separated value (tsv) file. — write_counts","text":"","code":"write_counts(biom, file)"},{"path":"https://cmmr.github.io/rbiom/reference/write_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write BIOM counts to a tab-separated value (tsv) file. — write_counts","text":"biom BIOM object file Path output file. File names ending .gz .bz2 compressed accordingly.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write BIOM counts to a tab-separated value (tsv) file. — write_counts","text":"normalized filepath written (invisibly).","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_fasta.html","id":null,"dir":"Reference","previous_headings":"","what":"Write DNA sequences to a file in fasta format. — write_fasta","title":"Write DNA sequences to a file in fasta format. — write_fasta","text":"Write DNA sequences file fasta format.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_fasta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write DNA sequences to a file in fasta format. — write_fasta","text":"","code":"write_fasta(seqs, file = NULL)"},{"path":"https://cmmr.github.io/rbiom/reference/write_fasta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write DNA sequences to a file in fasta format. — write_fasta","text":"seqs named character vector names sequence names values sequences. Also accepts BIOM object contains sequences. file Path output fasta file. Filenames ending .gz .bz2 compressed accordingly.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_fasta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write DNA sequences to a file in fasta format. — write_fasta","text":"normalized filepath written (invisibly).","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Write BIOM metadata to a tab-separated value (tsv) file. — write_metadata","title":"Write BIOM metadata to a tab-separated value (tsv) file. — write_metadata","text":"Write BIOM metadata tab-separated value (tsv) file.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write BIOM metadata to a tab-separated value (tsv) file. — write_metadata","text":"","code":"write_metadata(biom, file)"},{"path":"https://cmmr.github.io/rbiom/reference/write_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write BIOM metadata to a tab-separated value (tsv) file. — write_metadata","text":"biom BIOM object file Path output file. Filenames ending .gz .bz2 compressed accordingly.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write BIOM metadata to a tab-separated value (tsv) file. — write_metadata","text":"normalized filepath written (invisibly).","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_taxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Write BIOM taxonomy map to a tab-separated value (tsv) file. — write_taxonomy","title":"Write BIOM taxonomy map to a tab-separated value (tsv) file. — write_taxonomy","text":"Write BIOM taxonomy map tab-separated value (tsv) file.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_taxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write BIOM taxonomy map to a tab-separated value (tsv) file. — write_taxonomy","text":"","code":"write_taxonomy(biom, file)"},{"path":"https://cmmr.github.io/rbiom/reference/write_taxonomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write BIOM taxonomy map to a tab-separated value (tsv) file. — write_taxonomy","text":"biom BIOM object file Path output file. Filenames ending .gz .bz2 compressed accordingly.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_taxonomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write BIOM taxonomy map to a tab-separated value (tsv) file. — write_taxonomy","text":"normalized filepath written (invisibly).","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a newick formatted phylogenetic tree. — write_tree","title":"Write a newick formatted phylogenetic tree. — write_tree","text":"Write newick formatted phylogenetic tree.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a newick formatted phylogenetic tree. — write_tree","text":"","code":"write_tree(tree, file = NULL)"},{"path":"https://cmmr.github.io/rbiom/reference/write_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a newick formatted phylogenetic tree. — write_tree","text":"tree phylo object, returned read_tree(). Also accepts BIOM object phylogentic tree. file Filename connection write newick file (optional).","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a newick formatted phylogenetic tree. — write_tree","text":"file NULL, newick string character vector. Otherwise, normalized filepath written (invisibly).","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a newick formatted phylogenetic tree. — write_tree","text":"","code":"library(rbiom)           infile <- system.file(\"extdata\", \"newick.tre\", package = \"rbiom\")     tree   <- read_tree(infile)     newick <- write_tree(tree)"},{"path":"https://cmmr.github.io/rbiom/reference/write_xlsx.html","id":null,"dir":"Reference","previous_headings":"","what":"Write data and summary information to a Microsoft Excel-compatible workbook. — write_xlsx","title":"Write data and summary information to a Microsoft Excel-compatible workbook. — write_xlsx","text":"Write data summary information Microsoft Excel-compatible workbook.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_xlsx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write data and summary information to a Microsoft Excel-compatible workbook. — write_xlsx","text":"","code":"write_xlsx(biom, file = NULL, depth = NULL, seed = 0, unc = \"asis\")"},{"path":"https://cmmr.github.io/rbiom/reference/write_xlsx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write data and summary information to a Microsoft Excel-compatible workbook. — write_xlsx","text":"biom BIOM object save file. file Path output xlsx file. depth Depth rarefy . See rarefy function details. depth = NULL auto-selects rarefaction level. depth = 0 disables rarefaction. use depth BIOM files type 'OTU table' integer count values. seed Random seed use rarefying. See rarefy function details. unc handle unclassified, uncultured, similarly ambiguous taxa names. Default: \"asis\" \"asis\" -  check/modify taxa names. \"singly\" -  Replace \"Unc. \". \"grouped\" -  Replace \"Unc. \". \"drop\" -  include returned matrix.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_xlsx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write data and summary information to a Microsoft Excel-compatible workbook. — write_xlsx","text":"normalized filepath written (invisibly).","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_xlsx.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Write data and summary information to a Microsoft Excel-compatible workbook. — write_xlsx","text":"data frame, matrix, dist attributes biom included separate worksheets. attribute named 'Reads Per Step' treated specially merged usual 'Reads Per Sample' tab.","code":""},{"path":"https://cmmr.github.io/rbiom/reference/write_xlsx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write data and summary information to a Microsoft Excel-compatible workbook. — write_xlsx","text":"","code":"library(rbiom)           if (FALSE) {              biom <- sample_select(hmp50, 1:10) %>% sample_rarefy()              attr(biom, \"Weighted UniFrac\")   <- unifrac(biom)       attr(biom, \"Unweighted Jaccard\") <- bdiv_distmat(biom, 'jaccard', weighted=FALSE)              outfile <- write_xlsx(biom, tempfile(fileext = \".xlsx\"))     }"},{"path":"https://cmmr.github.io/rbiom/news/index.html","id":"rbiom-200","dir":"Changelog","previous_headings":"","what":"rbiom 2.0.0","title":"rbiom 2.0.0","text":"Major release significant new features. Plotting added. Statistics added. Caching added. Clearer naming scheme functions. Previous names still work deprecated. Generation human-readable ggplot2 code modifying plots outside rbiom. Provenience tracking BIOM objects derivatives.","code":""},{"path":"https://cmmr.github.io/rbiom/news/index.html","id":"rbiom-103","dir":"Changelog","previous_headings":"","what":"rbiom 1.0.3","title":"rbiom 1.0.3","text":"CRAN release: 2021-11-05 Corrects breaking changes ‘rhdf5’ package.","code":""},{"path":"https://cmmr.github.io/rbiom/news/index.html","id":"rbiom-102","dir":"Changelog","previous_headings":"","what":"rbiom 1.0.2","title":"rbiom 1.0.2","text":"CRAN release: 2020-05-29 Improved compatibility Debian Solaris. ‘rhdf5’ package now optional dependency. select() subset() functions now subset sequences .","code":""},{"path":"https://cmmr.github.io/rbiom/news/index.html","id":"rbiom-100","dir":"Changelog","previous_headings":"","what":"rbiom 1.0.0","title":"rbiom 1.0.0","text":"CRAN release: 2020-05-26 Initial Release","code":""}]
