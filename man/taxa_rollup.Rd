% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/taxa_rollup.r
\name{taxa_rollup}
\alias{taxa_rollup}
\title{Generate a matrix of samples by taxa, at the specified taxonomic rank.}
\usage{
taxa_rollup(
  biom,
  rank = "OTU",
  taxa = NULL,
  map = NULL,
  lineage = FALSE,
  sparse = FALSE,
  long = FALSE,
  md = FALSE,
  safe = FALSE
)
}
\arguments{
\item{biom}{A \code{matrix}, \code{simple_triplet_matrix}, or \code{BIOM} 
object, as returned from \link{read_biom}. For matrices, the rows and 
columns are assumed to be the taxa and samples, respectively.}

\item{rank}{The taxonomic rank. E.g. \code{rank = "OTU"}, 
\code{rank = "Phylum"}, etc. May also be given numerically: 0 for
OTU, 1 for the highest level (i.e. Kingdom), and extending to the number
of taxonomic ranks encoded in the original biom file. Run 
\code{taxa_ranks(biom)} to fetch the names of all available ranks.}

\item{taxa}{Limit the number of taxa returned in the matrix. Depending on 
the value type, a different filter is applied.
\describe{
  \item{\code{NULL}}{ Retain all taxa. (The default.) }
  \item{Integer >= 1}{ The N most abundant taxa are retained. Example:
  \code{taxa_rollup(biom, 'Genus', 5)} returned the five most
  abundant genera. }
  \item{Numeric between 0 and 1}{ Taxa are retained if their abundance 
  is greater than or equal to N. Example: 
  \code{taxa_rollup(biom, 'Phylum', 0.1)} returns all phyla with a
  relative abundance of at least 10 \%. }
  \item{Character vector}{ Only these taxa names are retained. Example: 
  \code{taxa_rollup(biom, 'Phylum', c("Firmicutes", "Bacteroidetes"))}
  will only retain those two phyla. }
}}

\item{map}{A character matrix defining the value that each taxa IDs is
assigned for each taxonomic rank. If \code{map=NULL} and \code{biom} is a
\code{BIOM} class object, the map will be automatically loaded from 
\code{biom$taxonomy}. \code{map} must not be \code{null} when \code{biom}
is a \code{matrix} or \code{simple_triplet_matrix}. See the example below
for an example of \code{map}'s structure.}

\item{lineage}{Include all ranks in the name of the taxa. For instance,
setting to \code{TRUE} will produce 
\code{Bacteria; Actinobacteria; Coriobacteriia; Coriobacteriales}. 
Whereas setting to \code{FALSE} (the default) will return simply
\code{Coriobacteriales}. You want to set this to TRUE if you have
genus names (such as \emph{Incertae_Sedis}) that map to multiple higher
level ranks.}

\item{sparse}{If true, returns a sparse matrix as described by 
\code{slam::simple_triplet_matrix}, otherwise returns a normal R
matrix object. Sparse matrices will likely be considerably more
memory efficient in this scenario.}

\item{long}{Pivot the returned data to long format?
\describe{
  \item{\bold{FALSE}}{ Each metric has its own column. (Default) }
  \item{\bold{TRUE}}{ "Sample", "Metric" and "Abundance" are the columns 
                  returned. Rows are added to attain all combinations of 
                  samples x metrics. }
}}

\item{md}{Include metadata in the output data frame? Options are: 
\describe{
  \item{\code{FALSE}}{ Don't include metadata. (Default) }
  \item{\code{TRUE}}{ Include all metadata. }
  \item{\emph{character vector}}{ Include only the specified metadata columns. }
}}

\item{safe}{Should autogenerated columns be prefixed with a "." to avoid conflicting
with metadata column names? (Default: FALSE) \code{safe=NA} can be used with
\code{long=FALSE} to omit the 'Sample' column entirely, leaving the sample
names only as the row names.}
}
\value{
A numeric matrix with samples as column names, and taxonomic
        identifiers as row names. Or a data.frame if metadata is requested 
        with \code{md}.
}
\description{
Generate a matrix of samples by taxa, at the specified taxonomic rank.
}
\examples{
    library(rbiom)
    
    taxa_ranks(hmp50)
    
    phyla <- taxa_rollup(hmp50, 'Phylum')
    phyla[1:4,1:6]
    
    # Custom matrices should be formatted like so:
    counts <- counts(hmp50)
    map    <- taxonomy(hmp50)
    
    counts[1:3,1:6]
    map[1:3,1:4]
    
    phyla <- taxa_rollup(counts, 'Phylum', map=map)
    phyla[1:3,1:6]

}
