// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// par_beta_div
NumericVector par_beta_div(NumericMatrix counts, IntegerMatrix pairs, const char* bdiv, bool weighted);
RcppExport SEXP _rbiom_par_beta_div(SEXP countsSEXP, SEXP pairsSEXP, SEXP bdivSEXP, SEXP weightedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type pairs(pairsSEXP);
    Rcpp::traits::input_parameter< const char* >::type bdiv(bdivSEXP);
    Rcpp::traits::input_parameter< bool >::type weighted(weightedSEXP);
    rcpp_result_gen = Rcpp::wrap(par_beta_div(counts, pairs, bdiv, weighted));
    return rcpp_result_gen;
END_RCPP
}
// par_unifrac
NumericVector par_unifrac(List sparseMatrix, IntegerMatrix pairs, List tree, IntegerVector weighted);
RcppExport SEXP _rbiom_par_unifrac(SEXP sparseMatrixSEXP, SEXP pairsSEXP, SEXP treeSEXP, SEXP weightedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type sparseMatrix(sparseMatrixSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type pairs(pairsSEXP);
    Rcpp::traits::input_parameter< List >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type weighted(weightedSEXP);
    rcpp_result_gen = Rcpp::wrap(par_unifrac(sparseMatrix, pairs, tree, weighted));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_alpha_div
List rcpp_alpha_div(List sparseMatrix);
RcppExport SEXP _rbiom_rcpp_alpha_div(SEXP sparseMatrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type sparseMatrix(sparseMatrixSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_alpha_div(sparseMatrix));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_rarefy
List rcpp_rarefy(List sparseMatrix, int depth, int seed);
RcppExport SEXP _rbiom_rcpp_rarefy(SEXP sparseMatrixSEXP, SEXP depthSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type sparseMatrix(sparseMatrixSEXP);
    Rcpp::traits::input_parameter< int >::type depth(depthSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_rarefy(sparseMatrix, depth, seed));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_read_tree
List rcpp_read_tree(const char* tree);
RcppExport SEXP _rbiom_rcpp_read_tree(SEXP treeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type tree(treeSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_read_tree(tree));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rbiom_par_beta_div", (DL_FUNC) &_rbiom_par_beta_div, 4},
    {"_rbiom_par_unifrac", (DL_FUNC) &_rbiom_par_unifrac, 4},
    {"_rbiom_rcpp_alpha_div", (DL_FUNC) &_rbiom_rcpp_alpha_div, 1},
    {"_rbiom_rcpp_rarefy", (DL_FUNC) &_rbiom_rcpp_rarefy, 3},
    {"_rbiom_rcpp_read_tree", (DL_FUNC) &_rbiom_rcpp_read_tree, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_rbiom(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
